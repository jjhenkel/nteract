/cb-target/python/e4/92/f086c474f575184e89b465916aaaec31b115869f17b8aa7f613f2fa47581.py	GradientBoostingRegressor	GradientBoostingRegressor(n_estimators=50,max_depth=3,subsample=0.2,learning_rate=0.015,min_samples_split=2,max_features='sqrt')	140	14	140	142	-5013216498909767219	final_model.fit(X_train,y_train)	141	0	141	32	-1024150833752610066
/cb-target/python/e4/92/f086c474f575184e89b465916aaaec31b115869f17b8aa7f613f2fa47581.py	GradientBoostingRegressor	GradientBoostingRegressor(n_estimators=50,max_depth=3,subsample=0.2,learning_rate=0.015,min_samples_split=2,max_features='sqrt')	149	14	149	142	3621519421323987996	final_model.fit(final_x_data,final_y_data)	150	0	150	42	5141465338080120755
/cb-target/python/e4/92/f086c474f575184e89b465916aaaec31b115869f17b8aa7f613f2fa47581.py	GradientBoostingRegressor	GradientBoostingRegressor(n_estimators=50,max_features='sqrt')	158	14	158	76	-3484756951461534589	final_model.fit(final_x_data,final_y_data)	159	0	159	42	-4065454151103740331
/cb-target/python/18/f0/e0a805f30e6a70b1e18215c368c3d1c799560ec8caac04956eeaf1336afb.py	GridSearchCV	grid_search.GridSearchCV(clf, parameters, scoring=f1_scorer)	275	11	275	71	6958126972014379374	grid_obj.fit(X_train, y_train)	278	0	278	30	172552216051888914
/cb-target/python/d2/ed/6b03dea42f7025893e08189e8b3ea9264a1ee0d897783aaa7d03461677e1.py	RandomForestClassifier	RandomForestClassifier(criterion='gini',\n                             n_estimators=50,\n                             min_samples_split=16,\n                             min_samples_leaf=1,\n                             max_features='auto',\n                             oob_score=True,\n                             random_state=1,\n                             n_jobs=-1)	405	5	412	39	2586657735828398747	rf.fit(_delete_train.iloc[:, 2:], _delete_train.iloc[:, 1])	413	0	413	59	-4808611629636727575
/cb-target/python/d2/ed/6b03dea42f7025893e08189e8b3ea9264a1ee0d897783aaa7d03461677e1.py	GridSearchCV	GridSearchCV(estimator=rf,\n                  param_grid=param_grid,\n                  scoring='accuracy',\n                  cv=3,\n                  n_jobs=-1)	384	5	388	28	-4778102847551644814	gs.fit(_delete_train.iloc[:, 2:], _delete_train.iloc[:, 1])	393	5	393	64	-7690499189501353559
/cb-target/python/55/58/d97d95e72b5c0ab88de480dd4f3a2c7a63f85671010701e5a2f61bc1f9f5.py	GridSearchCV	GridSearchCV(estimator = model, param_grid = param_grid, scoring='average_precision',iid=False, cv=5)	296	7	296	108	-24906721351627307	grid.fit(df[features],df['Stable'])	297	0	297	35	-1657371183591091897
/cb-target/python/55/58/d97d95e72b5c0ab88de480dd4f3a2c7a63f85671010701e5a2f61bc1f9f5.py	GridSearchCV	GridSearchCV(estimator = model, param_grid = param_grid, scoring='average_precision',iid=False, cv=5)	342	7	342	108	6507828003745815905	grid.fit(df[features],df['Stable'])	343	0	343	35	6636854874695262177
/cb-target/python/55/58/d97d95e72b5c0ab88de480dd4f3a2c7a63f85671010701e5a2f61bc1f9f5.py	GridSearchCV	GridSearchCV(estimator = model, param_grid = param_grid, scoring='average_precision',iid=False, cv=5)	388	7	388	108	-8054929939595159762	grid.fit(df[features],df['Stable'])	389	0	389	35	-6460220606970215411
/cb-target/python/55/58/d97d95e72b5c0ab88de480dd4f3a2c7a63f85671010701e5a2f61bc1f9f5.py	GridSearchCV	GridSearchCV(estimator = model, param_grid = param_grid, scoring='average_precision',iid=False, cv=Nfolds)	196	7	196	113	4562401111942119705	grid.fit(df[features],df['Stable'])	197	0	197	35	1334283907117201806
/cb-target/python/4d/8f/4b8615da053bd784d2eb7827663ab8dfd686adffa366c6157304cfe3be82.py	LinearRegression	linear_model.LinearRegression()	88	7	88	38	-899631848045212223	regr.fit(df[['X']], df.temp)	89	5	89	33	-6789324767770061616
/cb-target/python/7e/55/e830edf335f95c13862c807f8dc9b633202178ae3beec2779ec33a3ea3ff.py	LogisticRegression	linear_model.LogisticRegression(C=100.0)	109	22	109	62	-7180136101595809044	logistic_classifier.fit(X_train, Y_train)	110	0	110	41	8443813340086566381
/cb-target/python/7e/55/e830edf335f95c13862c807f8dc9b633202178ae3beec2779ec33a3ea3ff.py	LogisticRegression	linear_model.LogisticRegression(C=100.0)	182	22	182	62	-8429825665968655457	logistic_classifier.fit(X_train, Y_train)	183	0	183	41	8337609623143924470
/cb-target/python/7e/55/e830edf335f95c13862c807f8dc9b633202178ae3beec2779ec33a3ea3ff.py	Pipeline	Pipeline(steps=[('rbm', rbm), ('logistic', logistic)])	90	13	90	67	748762108826287753	classifier.fit(X_train, Y_train)	106	0	106	32	-3021562089545611043
/cb-target/python/7e/55/e830edf335f95c13862c807f8dc9b633202178ae3beec2779ec33a3ea3ff.py	Pipeline	Pipeline(steps=[('rbm', rbm), ('logistic', logistic)])	162	13	162	67	-3469135337203194922	classifier.fit(X_train, Y_train)	179	0	179	32	-1722231374159441816
/cb-target/python/8e/7b/dca46820bab6b99d44d03df3d121820d77a0467a7e937f1774345a014a1d.py	RandomForestClassifier	RandomForestClassifier(random_state = 0,criterion=param_rf['criterion'],max_features=param_rf['max_features'],n_estimators=param_rf['n_estimators'])	205	16	205	164	-3935495576897546361	classifier_rf.fit(x_train, y_train)	206	0	206	35	-6056610618463014497
/cb-target/python/8e/7b/dca46820bab6b99d44d03df3d121820d77a0467a7e937f1774345a014a1d.py	RandomForestClassifier	"RandomForestClassifier(random_state = 0,criterion=""entropy"")"	186	14	186	74	2424532544306526134	classifier_rf.fit(x_train, y_train)	187	0	187	35	3521352430622468825
/cb-target/python/8e/7b/dca46820bab6b99d44d03df3d121820d77a0467a7e937f1774345a014a1d.py	LogisticRegression	LogisticRegression(random_state =0)	273	16	273	51	1626683797298639367	classifier_lr.fit(x_train,y_train)	274	0	274	34	-5321906760132054121
/cb-target/python/8e/7b/dca46820bab6b99d44d03df3d121820d77a0467a7e937f1774345a014a1d.py	DecisionTreeClassifier	DecisionTreeClassifier(random_state=0,criterion=param_dt['criterion'],max_features=param_dt['max_features'])	156	14	156	122	4887282316933641758	classifier_dt.fit(x_train, y_train)	157	0	157	35	-6934042571914747394
/cb-target/python/8e/7b/dca46820bab6b99d44d03df3d121820d77a0467a7e937f1774345a014a1d.py	DecisionTreeClassifier	DecisionTreeClassifier(random_state=0,criterion='entropy')	138	14	138	72	8965223426449487254	classifier_dt.fit(x_train, y_train)	139	0	139	35	1151939230803129272
/cb-target/python/8e/7b/dca46820bab6b99d44d03df3d121820d77a0467a7e937f1774345a014a1d.py	GridSearchCV	GridSearchCV(estimator=classifier_rf,param_grid=parameters_rf,cv=10,n_jobs=-1)	192	14	192	92	-2375623003965398130	grid_search.fit(x_train,y_train)	193	14	193	46	-55415052981888201
/cb-target/python/8e/7b/dca46820bab6b99d44d03df3d121820d77a0467a7e937f1774345a014a1d.py	GridSearchCV	GridSearchCV(estimator=classifier_bc,param_grid=parameters_bc,cv=10,n_jobs=-1)	237	14	237	92	741114336452689231	grid_search.fit(x_train,y_train)	238	14	238	46	-2446898379515008535
/cb-target/python/8e/7b/dca46820bab6b99d44d03df3d121820d77a0467a7e937f1774345a014a1d.py	GridSearchCV	GridSearchCV(estimator=classifier_dt,param_grid=parameters_dt,cv=10,n_jobs=-1)	144	14	144	92	8692313281502470560	grid_search.fit(x_train,y_train)	145	14	145	46	-249547333713372916
/cb-target/python/8e/7b/dca46820bab6b99d44d03df3d121820d77a0467a7e937f1774345a014a1d.py	BernoulliNB	BernoulliNB(alpha=param_bc['alpha'],fit_prior=param_bc['fit_prior'])	248	16	248	84	-413654825418659286	classifier_bc.fit(x_train, y_train)	249	0	249	35	2749039322036986847
/cb-target/python/8e/7b/dca46820bab6b99d44d03df3d121820d77a0467a7e937f1774345a014a1d.py	BernoulliNB	BernoulliNB()	231	16	231	29	2846294335455710145	classifier_bc.fit(x_train, y_train)	232	0	232	35	-6785387799657337819
/cb-target/python/5a/ff/25f8cbe034c8d00fd9b9af1bc8f4d5c7f666660c5df802b757e01b8795e2.py	RandomForestClassifier	RandomForestClassifier(n_estimators=100)	187	9	187	49	-7876979715314951802	"forest.fit(train_data_features, trainwv[""sentiment""])"	188	9	188	62	8419716717945291469
/cb-target/python/dc/31/7d466af0d3f762a29d88b9c1a55027e22fdbed093bb7a0eb44129d11e3f5.py	GMM	GMM(n_components = 2, random_state = 0)	184	12	184	51	7601204224586528854	clusterer.fit(reduced_data)	185	0	185	27	5393922966963259946
/cb-target/python/dc/31/7d466af0d3f762a29d88b9c1a55027e22fdbed093bb7a0eb44129d11e3f5.py	PCA	PCA(n_components = 2)	155	6	155	27	-3549721486873812510	pca.fit(good_data)	156	0	156	18	6632086386795449177
/cb-target/python/dc/31/7d466af0d3f762a29d88b9c1a55027e22fdbed093bb7a0eb44129d11e3f5.py	PCA	PCA(n_components = 6)	136	6	136	27	-1443432022576964855	pca.fit(good_data)	137	0	137	18	-7725346351777590604
/cb-target/python/dc/31/7d466af0d3f762a29d88b9c1a55027e22fdbed093bb7a0eb44129d11e3f5.py	DTR	DTR(random_state = 0)	72	6	72	27	923880219388256047	clf.fit(X_train, y_train)	73	0	73	25	5201285542677598200
/cb-target/python/1c/15/9ff1e4e8bc5b10f9f3f5b345e48715b23ed807c3bda4506c9f92f9c65fa6.py	BaggingClassifier	BaggingClassifier(base_estimator=tree, n_estimators=100, random_state=14)	31	8	31	81	-7563686869289759664	model.fit(X,Y)	36	0	36	14	-404461675246625970
/cb-target/python/75/a5/4d55e2c4b9f250bf62108382cd62b199a50626940a19463f620ddfb0721c.py	RandomForestClassifier	RandomForestClassifier()	245	8	245	32	-7899028939218187329	model.fit(X_train,y_train)	246	0	246	26	8098382825467755428
/cb-target/python/75/a5/4d55e2c4b9f250bf62108382cd62b199a50626940a19463f620ddfb0721c.py	LogisticRegression	LogisticRegression()	209	6	209	26	2786728093978826708	clf.fit(X_train, y_train)	228	15	228	40	-6339138505291039609
/cb-target/python/75/a5/4d55e2c4b9f250bf62108382cd62b199a50626940a19463f620ddfb0721c.py	GridSearchCV	GridSearchCV(clf,parameters,scoring = scorer)	218	11	218	56	2839965056930121038	grid_obj.fit(X_train,y_train)	222	11	222	40	-4871574001196194880
/cb-target/python/a9/b0/718222f60a00338f4e641868e1df16e18aef5e97340fd822680b4172cc34.py	DecisionTreeClassifier	tree.DecisionTreeClassifier(\n    criterion='gini',\n    max_depth=100\n)	87	5	90	1	5619836766328424169	dt.fit(X, y)	102	0	102	12	-2399653835877727292
/cb-target/python/7d/94/cb46a4104ab8f1a73bc1acb93168b710cbe6d1d348b021d391d8d3384e47.py	SVC	SVC(kernel='poly', C=best_C, degree=best_degree)	223	14	223	62	-8734557638989756336	polySVM.fit(x_train, y_train)	224	4	224	33	-1035645564770716510
/cb-target/python/7d/94/cb46a4104ab8f1a73bc1acb93168b710cbe6d1d348b021d391d8d3384e47.py	SVC	SVC(kernel='linear', C=best_C)	65	16	65	46	-6235384948742860013	linearSVM.fit(x_train, y_train)	67	4	67	35	166290889969945279
/cb-target/python/7d/94/cb46a4104ab8f1a73bc1acb93168b710cbe6d1d348b021d391d8d3384e47.py	SVC	SVC(C=20.69, kernel='poly', degree=1,probability=True)	243	6	243	60	-3824107006536408069	svm.fit(x_train, y_train)	244	0	244	25	1690981961772613556
/cb-target/python/7d/94/cb46a4104ab8f1a73bc1acb93168b710cbe6d1d348b021d391d8d3384e47.py	SVC	SVC(C=10.07, kernel='rbf', gamma=1.43,probability=True)	167	6	167	61	2673130533458263776	svm.fit(x_train, y_train)	168	0	168	25	1568377230876284625
/cb-target/python/7d/94/cb46a4104ab8f1a73bc1acb93168b710cbe6d1d348b021d391d8d3384e47.py	SVC	SVC(kernel='rbf', C=best_C, gamma=best_gamma)	143	13	143	58	2766489539140908338	rbfSVM.fit(x_train, y_train)	145	4	145	32	-5848875850393942880
/cb-target/python/7d/94/cb46a4104ab8f1a73bc1acb93168b710cbe6d1d348b021d391d8d3384e47.py	SVC	SVC(C=83.45, kernel='linear', probability=True)	85	6	85	53	6775403084366321263	svm.fit(x_train, y_train)	86	0	86	25	-6071318265727343651
/cb-target/python/7d/94/cb46a4104ab8f1a73bc1acb93168b710cbe6d1d348b021d391d8d3384e47.py	RandomizedSearchCV	RandomizedSearchCV(svm, param_distributions=hyperparameters, n_iter=20)	57	15	57	86	7786460646501834447	randomCV.fit(x_train, y_train)	58	4	58	34	-1407610002929557371
/cb-target/python/7d/94/cb46a4104ab8f1a73bc1acb93168b710cbe6d1d348b021d391d8d3384e47.py	RandomizedSearchCV	RandomizedSearchCV(svm, param_distributions=hyperparameters, n_iter=20)	133	15	133	86	1489379625463238085	randomCV.fit(x_train, y_train)	134	4	134	34	-6128507141053138373
/cb-target/python/7d/94/cb46a4104ab8f1a73bc1acb93168b710cbe6d1d348b021d391d8d3384e47.py	RandomizedSearchCV	RandomizedSearchCV(svm, param_distributions=hyperparameters, n_iter=20)	210	14	210	85	-2298899534446079346	polySVM.fit(x_train, y_train)	213	4	213	33	-4707282118383404276
/cb-target/python/a2/b1/0093ab8b9f0f60599b9103b51db408414c71a1fc2c63aa1cf9d31398efb4.py	Pipeline	Pipeline([\n        ('bow', CountVectorizer()),\n        ('tfidf', TfidfTransformer()),\n        ('clf', MultinomialNB())\n    ])	148	11	152	6	223498068723824553	pipeline.fit(X_train, y_train)	164	0	164	30	-4423511055006480468
/cb-target/python/a2/b1/0093ab8b9f0f60599b9103b51db408414c71a1fc2c63aa1cf9d31398efb4.py	MultinomialNB	MultinomialNB()	111	5	111	20	-5110827084439020874	nb.fit(X_train, y_train)	116	0	116	24	-6252511400369166875
/cb-target/python/96/06/fc734f6946a68e6c13c5d5eab87f4404d810b35b55863c539aba5fea2be3.py	LinearRegression	linear_model.LinearRegression()	165	5	165	36	8164735191686621433	lr.fit(train_predictors, train_targets)	183	4	183	43	7405915522000689905
/cb-target/python/96/06/fc734f6946a68e6c13c5d5eab87f4404d810b35b55863c539aba5fea2be3.py	LinearRegression	linear_model.LinearRegression()	165	5	165	36	8164735191686621433	lr.fit(train_predictors, train_targets)	257	4	257	43	5496996976583907857
/cb-target/python/96/06/fc734f6946a68e6c13c5d5eab87f4404d810b35b55863c539aba5fea2be3.py	LinearRegression	linear_model.LinearRegression()	165	5	165	36	8164735191686621433	lr.fit(train_predictors, train_targets)	287	4	287	43	3266135097595789527
/cb-target/python/96/06/fc734f6946a68e6c13c5d5eab87f4404d810b35b55863c539aba5fea2be3.py	LinearRegression	linear_model.LinearRegression()	165	5	165	36	8164735191686621433	lr.fit(train_predictors, train_targets)	342	4	342	43	-1575061045660709423
/cb-target/python/96/06/fc734f6946a68e6c13c5d5eab87f4404d810b35b55863c539aba5fea2be3.py	LinearRegression	linear_model.LinearRegression()	165	5	165	36	8164735191686621433	lr.fit(train_predictors, train_targets)	398	4	398	43	-640034158672649584
/cb-target/python/96/06/fc734f6946a68e6c13c5d5eab87f4404d810b35b55863c539aba5fea2be3.py	LinearRegression	linear_model.LinearRegression()	165	5	165	36	8164735191686621433	lr.fit(train_predictors, train_targets)	454	4	454	43	5907422254155491353
/cb-target/python/96/06/fc734f6946a68e6c13c5d5eab87f4404d810b35b55863c539aba5fea2be3.py	LinearRegression	linear_model.LinearRegression()	165	5	165	36	8164735191686621433	lr.fit(train_predictors, train_targets)	600	4	600	43	6199389249921631136
/cb-target/python/96/06/fc734f6946a68e6c13c5d5eab87f4404d810b35b55863c539aba5fea2be3.py	Ridge	linear_model.Ridge (alpha = 100)	487	6	487	38	5235103086430668488	clf.fit(train_predictors, train_targets)	501	4	501	44	8596239837918266873
/cb-target/python/96/06/fc734f6946a68e6c13c5d5eab87f4404d810b35b55863c539aba5fea2be3.py	Ridge	linear_model.Ridge (alpha = 100)	540	6	540	38	7986447673945675704	clf.fit(train_predictors, train_targets)	552	4	552	44	378081324703891976
/cb-target/python/a2/07/272c43b3e7234fbd63fb9ab71478b4c2417d6ce837c07f8c515dc2abab2c.py	NearestNeighbors	NearestNeighbors(n_neighbors=len(X_array))	59	7	59	49	-1052158346276227942	NearestNeighbors(n_neighbors=len(X_array)).fit(X_array)	59	7	59	62	-3295348230913631700
/cb-target/python/a2/07/272c43b3e7234fbd63fb9ab71478b4c2417d6ce837c07f8c515dc2abab2c.py	DBSCAN	DBSCAN(eps=1.2, min_samples=3)	71	5	71	35	-9111265673603913253	DBSCAN(eps=1.2, min_samples=3).fit(X)	71	5	71	42	3100180722750112740
/cb-target/python/96/ad/2cfb96656ceb3217fadc83d40342046d8b5662288c87240813a10a42c262.py	SVC	SVC(kernel='rbf')	105	6	105	23	4683283298399567002	clf.fit(train_predictors, train_target)	110	4	110	43	9020029974980098299
/cb-target/python/96/ad/2cfb96656ceb3217fadc83d40342046d8b5662288c87240813a10a42c262.py	Pipeline	Pipeline([('poly', PolynomialFeatures(degree=2)),\n                ('linear', LogisticRegression(fit_intercept=False, n_jobs=-1))])	83	6	84	80	-9100373245828605546	alg.fit(train_predictors, train_target)	93	4	93	43	36410291911406399
/cb-target/python/96/ad/2cfb96656ceb3217fadc83d40342046d8b5662288c87240813a10a42c262.py	Pipeline	Pipeline([('poly', PolynomialFeatures(degree=2)),\n                ('linear', LinearRegression(fit_intercept=False, n_jobs=-1))])	55	6	56	78	-2227687684209318382	alg.fit(train_predictors, train_target)	70	4	70	43	469759198243225101
/cb-target/python/e4/4e/a92c69ffce414e0323a9023ce1da91eddcf51634e5b2078de3b652996909.py	DBSCAN	DBSCAN(eps=0.5, min_samples=5)	146	5	146	35	24904597636409799	DBSCAN(eps=0.5, min_samples=5).fit(useData)	146	5	146	48	3987415701315927558
/cb-target/python/11/3d/2b051d07cc52cf2427e173a6a4ed9144cf65eeaec57f788edc1452fd9a9c.py	KNeighborsClassifier	neighbors.KNeighborsClassifier(10, weights='uniform')	187	14	187	67	-6620141071044891530	clf.fit(X,y)	201	10	201	22	-7611045696455868126
/cb-target/python/11/3d/2b051d07cc52cf2427e173a6a4ed9144cf65eeaec57f788edc1452fd9a9c.py	LogisticRegression	LogisticRegression()	195	14	195	34	-6525148244343677579	clf.fit(X,y)	201	10	201	22	-7611045696455868126
/cb-target/python/11/3d/2b051d07cc52cf2427e173a6a4ed9144cf65eeaec57f788edc1452fd9a9c.py	rfc	rfc()	199	14	199	19	-8897965363455981451	clf.fit(X,y)	201	10	201	22	-7611045696455868126
/cb-target/python/11/3d/2b051d07cc52cf2427e173a6a4ed9144cf65eeaec57f788edc1452fd9a9c.py	ExtraTreesClassifier	ExtraTreesClassifier(n_estimators=500,\n                              random_state=0)	97	8	98	45	4900035016976205508	forest.fit(X, y)	105	0	105	16	-8639453560499277006
/cb-target/python/11/3d/2b051d07cc52cf2427e173a6a4ed9144cf65eeaec57f788edc1452fd9a9c.py	ExtraTreesClassifier	ExtraTreesClassifier(n_estimators=500,\n                              random_state=0)	97	8	98	45	4900035016976205508	forest.fit(X2, y2)	133	0	133	18	-8253962136208713864
/cb-target/python/11/3d/2b051d07cc52cf2427e173a6a4ed9144cf65eeaec57f788edc1452fd9a9c.py	gnb	gnb()	191	14	191	19	5525801134761349180	clf.fit(X,y)	201	10	201	22	-7611045696455868126
/cb-target/python/be/9b/d9951920f0d679aff0b59bf14a1fd79a7154a97b38a907959991efa1001c.py	GradientBoostingRegressor	ensemble.GradientBoostingRegressor(**params)	174	9	174	53	-8692038710815099350	gboost.fit(X, y)	299	0	299	16	3859584228195060773
/cb-target/python/be/9b/d9951920f0d679aff0b59bf14a1fd79a7154a97b38a907959991efa1001c.py	Ridge	linear_model.Ridge()	170	8	170	28	7166785241186706760	ridge.fit(X, y)	292	0	292	15	8958938456700663732
/cb-target/python/74/e1/89b732d8ed35d345cfde8d767d3fe934d35bce15b83d2d49bdcfd94df891.py	LogisticRegression	LogisticRegression()	105	6	105	26	1890942010444637194	clf.fit(X_train, y_train)	106	0	106	25	5778795130643078030
/cb-target/python/74/e1/89b732d8ed35d345cfde8d767d3fe934d35bce15b83d2d49bdcfd94df891.py	LogisticRegression	LogisticRegression()	132	6	132	26	4345250648854588789	clf.fit(X_train_s, y_train)	133	0	133	27	-5227508628810057132
/cb-target/python/74/e1/89b732d8ed35d345cfde8d767d3fe934d35bce15b83d2d49bdcfd94df891.py	DictVectorizer	DictVectorizer()	55	6	55	22	6380380920894778035	vec.fit(toy_data)	62	0	62	17	-477132259963790027
/cb-target/python/09/00/021de068782abb2313fd53181903a18815f33f858142ca704ee9ef087ad0.py	KNeighborsClassifier	neighbors.KNeighborsClassifier(n_neighbors, weights='distance')	383	6	383	69	405211540746509004	clf.fit(train, train_y)	391	4	391	27	-1429450333622125493
/cb-target/python/09/00/021de068782abb2313fd53181903a18815f33f858142ca704ee9ef087ad0.py	GridSearchCV	GridSearchCV(estimator=clf, param_grid = param_test1, scoring='accuracy', n_jobs=-1,cv=2, verbose=True)	386	15	386	118	-2179820321682485024	gsearch1.fit(train, train_y)	387	4	387	32	-2749676999011071486
/cb-target/python/09/00/021de068782abb2313fd53181903a18815f33f858142ca704ee9ef087ad0.py	LabelEncoder	preprocessing.LabelEncoder()	113	10	113	38	5696508459469828648	le.fit(data[name])	114	4	114	22	7986949369811601070
/cb-target/python/3e/2f/9897465fcdae6ad27ffafb9b637bf55cb4179e9de2b1b502f352f1f355bc.py	RandomForestClassifier	RandomForestClassifier()	166	8	166	32	-1745444586492304471	clf_R.fit(x_train, y_train)	167	0	167	27	2398823798459986492
/cb-target/python/3e/2f/9897465fcdae6ad27ffafb9b637bf55cb4179e9de2b1b502f352f1f355bc.py	LogisticRegression	LogisticRegression()	129	6	129	26	-1786384220121881128	clf.fit(x_train, y_train)	130	0	130	25	-2608665038189894384
/cb-target/python/3e/2f/9897465fcdae6ad27ffafb9b637bf55cb4179e9de2b1b502f352f1f355bc.py	DecisionTreeClassifier	DecisionTreeClassifier()	159	8	159	32	-5792169415594146944	clf_D.fit(x_train, y_train)	160	0	160	27	8643754607155182091
/cb-target/python/d1/9d/d8ad88b0da988838731666487b54a7d69d147846f155e536aa3bd5c7a47f.py	SVC	svm.SVC()	253	6	253	15	3883514043035210924	clf.fit(X_train_ohe, y_train_df.as_matrix().flatten().tolist())	256	0	256	63	1101408916505512883
/cb-target/python/d1/9d/d8ad88b0da988838731666487b54a7d69d147846f155e536aa3bd5c7a47f.py	LogisticRegression	linear_model.LogisticRegression()	267	8	267	41	8137272236258572752	model.fit(X_train_ohe, y_train_df.as_matrix().flatten().tolist())	268	0	268	65	5845451012776064596
/cb-target/python/d1/9d/d8ad88b0da988838731666487b54a7d69d147846f155e536aa3bd5c7a47f.py	DecisionTreeClassifier	tree.DecisionTreeClassifier()	231	6	231	35	-7005072970961507004	clf.fit(X_train_df, y_train_df)	232	6	232	37	-6012032504490444216
/cb-target/python/d1/9d/d8ad88b0da988838731666487b54a7d69d147846f155e536aa3bd5c7a47f.py	StandardScaler	preprocessing.StandardScaler()	205	13	205	43	-3496467883135105218	preprocessing.StandardScaler().fit(df)	205	13	205	51	1827439888424996382
/cb-target/python/d1/9d/d8ad88b0da988838731666487b54a7d69d147846f155e536aa3bd5c7a47f.py	LabelEncoder	preprocessing.LabelEncoder()	108	19	108	47	-2736895586281061371	labelenc.fit(df[colname])	109	8	109	33	5469643442556112831
/cb-target/python/d1/9d/d8ad88b0da988838731666487b54a7d69d147846f155e536aa3bd5c7a47f.py	OneHotEncoder	preprocessing.OneHotEncoder()	173	10	173	39	-3584992744739112279	enc.fit(df)	174	4	174	15	-6816995317743628502
/cb-target/python/30/bf/e4b19bb4a040eef3f991d7066a954678d9dfd17e6efd48ac1f1af5d0fb59.py	SVC	SVC()	55	6	55	11	-1910473248224310988	clf.fit(x_train,y_train)	56	6	56	30	1770995918746256460
/cb-target/python/30/bf/e4b19bb4a040eef3f991d7066a954678d9dfd17e6efd48ac1f1af5d0fb59.py	DecisionTreeClassifier	DecisionTreeClassifier(splitter='random')	88	6	88	47	4734217641147334821	clf.fit(x_train,y_train)	89	6	89	30	9197320254966889074
/cb-target/python/fd/ac/b37ff10c9da439ad1fe6ddb245fa67d23fd4e49236b5a1670f01c7f246d1.py	GradientBoostingClassifier	GradientBoostingClassifier(n_estimators=101, learning_rate=0.1, random_state=2016)	236	5	236	87	5381453828945396001	GradientBoostingClassifier(n_estimators=101, learning_rate=0.1, random_state=2016).fit(x_train, y_train)	236	5	236	109	4407248448404721188
/cb-target/python/fd/ac/b37ff10c9da439ad1fe6ddb245fa67d23fd4e49236b5a1670f01c7f246d1.py	RandomForestClassifier	RandomForestClassifier()	129	5	129	29	-8339543337732221227	RF.fit(x_train, y_train)	130	5	130	29	-3664166176498258842
/cb-target/python/fd/ac/b37ff10c9da439ad1fe6ddb245fa67d23fd4e49236b5a1670f01c7f246d1.py	RandomForestClassifier	RandomForestClassifier(n_estimators=41, criterion='entropy')	180	5	180	65	4622411913029757794	RF.fit(x_train, y_train)	181	5	181	29	-8756568137828632146
/cb-target/python/fd/ac/b37ff10c9da439ad1fe6ddb245fa67d23fd4e49236b5a1670f01c7f246d1.py	LogisticRegression	linear_model.LogisticRegression(C=0.1, penalty='l1', tol=0.1, random_state=2016)	208	5	208	85	-8690477272546704314	LR.fit(x_train, y_train)	209	0	209	24	6746123450178492154
/cb-target/python/fd/ac/b37ff10c9da439ad1fe6ddb245fa67d23fd4e49236b5a1670f01c7f246d1.py	GridSearchCV	grid_search.GridSearchCV(estimator  = est,\n                                     param_grid = param_grid,\n                                     scoring    = 'f1',\n                                     verbose    = 10,\n                                     n_jobs  = n_jobs,\n                                     iid    = True,\n                                     refit    = refit,\n                                     cv      = cv)	146	12	153	50	-5429920504096163385	model.fit(x_train, y_train)	155	4	155	31	8322446344141971481
/cb-target/python/fd/ac/b37ff10c9da439ad1fe6ddb245fa67d23fd4e49236b5a1670f01c7f246d1.py	GridSearchCV	grid_search.GridSearchCV(estimator  = GradientBoostingClassifier(), param_grid = param_grid,\n                                     scoring = 'f1', verbose = 10, n_jobs  = 5, iid    = True, refit = False)	222	5	223	109	3076841510569212101	RB.fit(x_train, y_train)	224	0	224	24	-9101682217047223595
/cb-target/python/fd/ac/b37ff10c9da439ad1fe6ddb245fa67d23fd4e49236b5a1670f01c7f246d1.py	VotingClassifier	VotingClassifier(estimators=[('Random Forest',RF), ('Logistic Regression', LR),\n                                          ('Gradient Boosting',GB)], voting='hard')	253	13	254	83	3305003606502201027	finalModel.fit(X, Y)	267	0	267	20	-2813313945739149526
/cb-target/python/f2/c6/f3391c9e7dad4f13e6575c15af50f3bb05d327d0ec788bdbae25efdd0617.py	LinearRegression	LinearRegression()	94	5	94	23	-3831076752364113069	lm.fit(x_train, y_train)	100	0	100	24	3678805499889369960
/cb-target/python/2d/c6/1872873121afdfbcd4c35c3bb955d2aa69241a5f4d6611552ba9189dbf39.py	random_forest	random_forest(n_estimators = 100)	121	9	121	42	5673826840297304139	forest.fit(titanic_training, titanic_training)	122	9	122	55	-5595206687332766275
/cb-target/python/b2/45/e3bd9c180e7367468dcfb9269aa1fafcc2cd5c600259ba5963e69ff8f14a.py	GridSearchCV	grid_search.GridSearchCV(\n    estimator=LogisticRegression(),\n    param_grid={'C': [i for i in range(1, 10)]},\n    cv=cross_validation.KFold(n=len(data_test_refined), n_folds=5),\n    scoring='recall'\n)	222	5	227	1	8661387891796737358	gs.fit(feature_set, data_test_refined[[str_complex]])	234	4	234	57	8477814602186177058
/cb-target/python/58/75/658ab843c0b98bd9915fcfbfd3f0b05c91c83b8e4ba4b766bab1a4614597.py	GridSearchCV	GridSearchCV(lr, params)	101	5	101	29	-6050137297158274103	gs.fit(train.drop('OutcomeType', axis=1).values, train['OutcomeType'].values)	102	0	102	77	5744840614885840440
/cb-target/python/58/75/658ab843c0b98bd9915fcfbfd3f0b05c91c83b8e4ba4b766bab1a4614597.py	LabelEncoder	preprocessing.LabelEncoder()	30	5	30	33	8597849634607222815	le.fit(train.OutcomeType.values)	52	4	52	36	-1907234355854422744
/cb-target/python/62/a4/fcd32eadc135f484122506cec0ed99d6cc3803f85c5e6a4875e872d9d293.py	LogisticRegression	LogisticRegression()	57	8	57	28	-2718912898057684948	model.fit(X_train_tfidf, y_train)	62	0	62	33	-6577267241010235841
/cb-target/python/a0/d3/97058c8a8e5f00f9b89701a96cd89ded0eb3322dace902fb4a1c3a61d4cc.py	LinearRegression	LinearRegression()	341	8	341	26	-1506637679012625445	model.fit(X_train, y_train)	342	0	342	27	-5527231291965065171
/cb-target/python/a0/d3/97058c8a8e5f00f9b89701a96cd89ded0eb3322dace902fb4a1c3a61d4cc.py	RandomForestRegressor	RandomForestRegressor(random_state=42)	357	8	357	46	-7612713590242750713	model.fit(X_train, y_train)	358	0	358	27	-4134474381600902744
/cb-target/python/a0/d3/97058c8a8e5f00f9b89701a96cd89ded0eb3322dace902fb4a1c3a61d4cc.py	RandomForestRegressor	"RandomForestRegressor(n_estimators=1000,\n                                  oob_score=True,\n                                  n_jobs=-1,\n                                  random_state=42,\n                                  max_features=""auto"",\n                                  min_samples_leaf=min_samples)"	565	12	570	63	-7442636692960389736	model.fit(X, y)	571	4	571	19	1230312476349715036
/cb-target/python/a0/d3/97058c8a8e5f00f9b89701a96cd89ded0eb3322dace902fb4a1c3a61d4cc.py	RandomForestRegressor	"RandomForestRegressor(n_estimators=1000,\n                                  oob_score=True,\n                                  n_jobs=-1,\n                                  random_state=42,\n                                  max_features=""auto"",\n                                  min_samples_leaf=min_samples)"	587	12	592	63	5089478765387574286	model.fit(X, y)	593	4	593	19	4581101689737147727
/cb-target/python/a0/d3/97058c8a8e5f00f9b89701a96cd89ded0eb3322dace902fb4a1c3a61d4cc.py	RandomForestRegressor	RandomForestRegressor(n_estimators=1000,\n                              oob_score=True,\n                              n_jobs=-1,\n                              random_state=42,\n                              max_features=None,\n                              min_samples_leaf=5)	664	8	669	49	-6823843970625408605	model.fit(X, y)	670	0	670	15	-5767118046752436988
/cb-target/python/a0/d3/97058c8a8e5f00f9b89701a96cd89ded0eb3322dace902fb4a1c3a61d4cc.py	RandomForestRegressor	"RandomForestRegressor(n_estimators=1000,\n                              oob_score=True,\n                              n_jobs=-1,\n                              random_state=42,\n                              max_features=""sqrt"",\n                              min_samples_leaf=5)"	638	8	643	49	-6748967014205936373	model.fit(X, y)	644	0	644	15	-7209603464841394228
/cb-target/python/a0/d3/97058c8a8e5f00f9b89701a96cd89ded0eb3322dace902fb4a1c3a61d4cc.py	RandomForestRegressor	RandomForestRegressor(2000, oob_score=True, n_jobs=-1, random_state=42)	445	8	445	79	-6395824865782807390	model.fit(X, y)	446	0	446	15	-326344322454832831
/cb-target/python/a0/d3/97058c8a8e5f00f9b89701a96cd89ded0eb3322dace902fb4a1c3a61d4cc.py	RandomForestRegressor	"RandomForestRegressor(n_estimators=1000,\n                              oob_score=True,\n                              n_jobs=-1,\n                              random_state=42,\n                              max_features=""auto"",\n                              min_samples_leaf=5)"	612	8	617	49	-5821798334112671446	model.fit(X, y)	618	0	618	15	5978433733646622634
/cb-target/python/a0/d3/97058c8a8e5f00f9b89701a96cd89ded0eb3322dace902fb4a1c3a61d4cc.py	RandomForestRegressor	RandomForestRegressor(n_estimators=100, oob_score=True, random_state=42)	374	8	374	80	-4602254100385427383	model.fit(X[numeric_variables], y)	377	0	377	34	7800977231760170943
/cb-target/python/a0/d3/97058c8a8e5f00f9b89701a96cd89ded0eb3322dace902fb4a1c3a61d4cc.py	RandomForestRegressor	RandomForestRegressor(trees, oob_score=True, n_jobs=-1, random_state=42)	531	12	531	84	-4018282477522988497	model.fit(X, y)	532	4	532	19	8656201683965880208
/cb-target/python/a0/d3/97058c8a8e5f00f9b89701a96cd89ded0eb3322dace902fb4a1c3a61d4cc.py	RandomForestRegressor	RandomForestRegressor(1000, oob_score=True, n_jobs=-1, random_state=42)	521	8	521	79	-2896457282699177658	model.fit(X, y)	522	0	522	15	5804939594862563801
/cb-target/python/a0/d3/97058c8a8e5f00f9b89701a96cd89ded0eb3322dace902fb4a1c3a61d4cc.py	RandomForestRegressor	"RandomForestRegressor(n_estimators=1000,\n                              oob_score=True,\n                              n_jobs=-1,\n                              random_state=42,\n                              max_features=""log2"",\n                              min_samples_leaf=5)"	651	8	656	49	-2012491076827776329	model.fit(X, y)	657	0	657	15	3603246317756741152
/cb-target/python/a0/d3/97058c8a8e5f00f9b89701a96cd89ded0eb3322dace902fb4a1c3a61d4cc.py	RandomForestRegressor	"RandomForestRegressor(n_estimators=2000,\n                              oob_score=True,\n                              n_jobs=1,\n                              random_state=42,\n                              max_features=""sqrt"",\n                              min_samples_leaf=5)"	625	8	630	49	-1573633478461893532	model.fit(X, y)	631	0	631	15	4738355772584496325
/cb-target/python/a0/d3/97058c8a8e5f00f9b89701a96cd89ded0eb3322dace902fb4a1c3a61d4cc.py	RandomForestRegressor	RandomForestRegressor(1000, oob_score=True, n_jobs=2, random_state=42)	606	8	606	78	2856357835378452146	model.fit(X, y)	607	0	607	15	-4679119649210551453
/cb-target/python/a0/d3/97058c8a8e5f00f9b89701a96cd89ded0eb3322dace902fb4a1c3a61d4cc.py	RandomForestRegressor	RandomForestRegressor(n_estimators=1000, oob_score=True, n_jobs=-1, random_state=42, max_features=max_features)	548	12	548	123	4204499024666181462	model.fit(X, y)	549	4	549	19	-7092998328146236762
/cb-target/python/a0/d3/97058c8a8e5f00f9b89701a96cd89ded0eb3322dace902fb4a1c3a61d4cc.py	RandomForestRegressor	"RandomForestRegressor(n_estimators=1000,\n                              oob_score=True,\n                              n_jobs=-1,\n                              random_state=42,\n                              max_features=""auto"",\n                              min_samples_leaf=10)"	690	8	695	50	4677378730586501371	model.fit(X, y)	696	0	696	15	8707565678371670817
/cb-target/python/a0/d3/97058c8a8e5f00f9b89701a96cd89ded0eb3322dace902fb4a1c3a61d4cc.py	RandomForestRegressor	RandomForestRegressor(1000, oob_score=True, n_jobs=1, random_state=42)	514	8	514	78	8076624728577322243	model.fit(X, y)	515	0	515	15	-5277356948745246919
/cb-target/python/a0/d3/97058c8a8e5f00f9b89701a96cd89ded0eb3322dace902fb4a1c3a61d4cc.py	RandomForestRegressor	RandomForestRegressor(n_estimators=1000,\n                              oob_score=True,\n                              n_jobs=-1,\n                              random_state=42,\n                              max_features=0.9,\n                              min_samples_leaf=10)	677	8	682	50	8085407311401840098	model.fit(X, y)	683	0	683	15	-3296872688351475877
/cb-target/python/a0/d3/97058c8a8e5f00f9b89701a96cd89ded0eb3322dace902fb4a1c3a61d4cc.py	RandomForestClassifier	RandomForestClassifier(n_estimators=100, oob_score=True, random_state=42)	713	8	713	81	-6221362378790457675	model.fit(X_train, y_train)	714	0	714	27	-769563851617579870
/cb-target/python/a0/d3/97058c8a8e5f00f9b89701a96cd89ded0eb3322dace902fb4a1c3a61d4cc.py	RandomForestClassifier	RandomForestClassifier(trees, oob_score=True, n_jobs=1, random_state=42)	741	12	741	84	-3446374565195134012	model.fit(X_train, y_train)	742	4	742	31	4900695294295345907
/cb-target/python/a0/d3/97058c8a8e5f00f9b89701a96cd89ded0eb3322dace902fb4a1c3a61d4cc.py	RandomForestClassifier	RandomForestClassifier(trees, oob_score=True, n_jobs=1, random_state=42)	775	12	775	84	-5728287100209750977	model.fit(X_train, y_train)	776	4	776	31	1272178269906017853
/cb-target/python/a0/d3/97058c8a8e5f00f9b89701a96cd89ded0eb3322dace902fb4a1c3a61d4cc.py	RandomForestClassifier	RandomForestClassifier(n_estimators=1000, oob_score=True, n_jobs=1, random_state=42, max_features=max_features)	758	12	758	123	-2062378411073085754	model.fit(X_train, y_train)	759	4	759	31	-2983528981200243668
/cb-target/python/a0/d3/97058c8a8e5f00f9b89701a96cd89ded0eb3322dace902fb4a1c3a61d4cc.py	RandomForestClassifier	RandomForestClassifier(1000, oob_score=True, n_jobs=1, random_state=42)	724	8	724	79	3198870663393650215	model.fit(X_train, y_train)	725	0	725	27	2811419718870429093
/cb-target/python/a0/d3/97058c8a8e5f00f9b89701a96cd89ded0eb3322dace902fb4a1c3a61d4cc.py	RandomForestClassifier	"RandomForestClassifier(n_estimators=1000,\n                              oob_score=True,\n                              n_jobs=1,\n                              random_state=42,\n                              max_features=""log2"",\n                              min_samples_leaf=1)"	794	8	799	49	5318653830666700492	model.fit(X_train, y_train)	800	0	800	27	-5789050370455416669
/cb-target/python/a0/d3/97058c8a8e5f00f9b89701a96cd89ded0eb3322dace902fb4a1c3a61d4cc.py	RandomForestClassifier	RandomForestClassifier(1000, oob_score=True, n_jobs=-1, random_state=42)	731	8	731	80	7972590771931849038	model.fit(X_train, y_train)	732	0	732	27	610048468021651440
/cb-target/python/a0/d3/97058c8a8e5f00f9b89701a96cd89ded0eb3322dace902fb4a1c3a61d4cc.py	LogisticRegression	LogisticRegression(penalty='l2', C=1)	244	8	244	45	-4670444313886813797	model.fit(X_train, y_train)	249	0	249	27	-2909478706699507564
/cb-target/python/a0/d3/97058c8a8e5f00f9b89701a96cd89ded0eb3322dace902fb4a1c3a61d4cc.py	DecisionTreeRegressor	DecisionTreeRegressor()	349	8	349	31	7844132106041917721	model.fit(X_train, y_train)	350	0	350	27	-51290680437929522
/cb-target/python/02/6a/034f96d8d0ed13433b4ba33269b5fa98daf845a023c08ca23a7643b1fc3a.py	KNeighborsClassifier	neighbors.KNeighborsClassifier(n_neighbors = k)	71	12	71	59	-1833356773047712910	model.fit(X_train, y_train)	72	4	72	31	6032111872795036596
/cb-target/python/02/6a/034f96d8d0ed13433b4ba33269b5fa98daf845a023c08ca23a7643b1fc3a.py	KNeighborsClassifier	neighbors.KNeighborsClassifier(n_neighbors = 50)	55	8	55	56	4053713734966645149	model.fit(X_train, y_train)	56	0	56	27	-281117930202104542
/cb-target/python/02/6a/034f96d8d0ed13433b4ba33269b5fa98daf845a023c08ca23a7643b1fc3a.py	GridSearchCV	GridSearchCV(model, param_grid={'n_neighbors': k_array}, cv=10)	103	9	103	72	7633215514112112005	grid10.fit(X_train, y_train)	104	0	104	28	-5951691526668453527
/cb-target/python/02/6a/034f96d8d0ed13433b4ba33269b5fa98daf845a023c08ca23a7643b1fc3a.py	GridSearchCV	GridSearchCV(model, param_grid={'n_neighbors': k_array}, cv=10)	149	9	149	72	-7510425467120960238	grid10.fit(X_train, y_train)	150	0	150	28	6098339676023899843
/cb-target/python/02/6a/034f96d8d0ed13433b4ba33269b5fa98daf845a023c08ca23a7643b1fc3a.py	GridSearchCV	GridSearchCV(model, param_grid={'n_neighbors': k_array}, cv=5,)	99	8	99	71	7398189275451379366	grid5.fit(X_train, y_train)	100	0	100	27	6455258077125760701
/cb-target/python/02/6a/034f96d8d0ed13433b4ba33269b5fa98daf845a023c08ca23a7643b1fc3a.py	GridSearchCV	GridSearchCV(model, param_grid={'n_neighbors': k_array}, cv=5,)	146	8	146	71	-2386753703252255718	grid5.fit(X_train, y_train)	147	0	147	27	787639851741189809
/cb-target/python/00/2d/064aa1c7618365912e3cb62c75c1bb992035e27defb34e875ff9f182e1eb.py	RandomForestRegressor	RandomForestRegressor(n_estimators = 100 , oob_score = True, random_state = 42)	206	5	206	84	469360734734803261	rf.fit(X,Y)	221	0	221	11	-5142173113304188050
/cb-target/python/ab/f7/d1af930eac44fbd0da27a51b2bab6bc241b72c6dcfd6c96cb3165d71dc48.py	SVC	"SVC( kernel='rbf',class_weight=""auto"" )"	50	5	50	44	7952715196040965711	mod1.fit(x_train, y_train)	56	0	56	26	-3452672172651032199
/cb-target/python/ab/f7/d1af930eac44fbd0da27a51b2bab6bc241b72c6dcfd6c96cb3165d71dc48.py	GradientBoostingClassifier	GradientBoostingClassifier( n_estimators=1000,  learning_rate=0.01 )	183	6	183	74	3083688456553646522	gf1.fit(x_train, y_train)	184	0	184	25	4274152964423905242
/cb-target/python/ab/f7/d1af930eac44fbd0da27a51b2bab6bc241b72c6dcfd6c96cb3165d71dc48.py	RandomForestClassifier	RandomForestClassifier(n_estimators=500)	147	6	147	46	8281180115717167729	rf2.fit(x_train, y_train)	148	0	148	25	-5087333576416371246
/cb-target/python/c2/0d/abfc97d074f30b62aa684a47789aa61373431ca8d1f33c5132cffdefe9c7.py	KNeighborsClassifier	KNeighborsClassifier()	492	6	492	28	-7452554918873406706	knn.fit(X, Y)	493	0	493	13	-2025942128462729041
/cb-target/python/c2/0d/abfc97d074f30b62aa684a47789aa61373431ca8d1f33c5132cffdefe9c7.py	PCA	PCA(n_components=2)	501	6	501	25	8138899642695173606	pca.fit(X)	502	6	502	16	2618894601672534915
/cb-target/python/a8/c9/a0bd843d9d91037d08f2a0e27ffed961f818f64ee95d64ad6d899466360b.py	GridSearchCV	GridSearchCV(naive_bayes.MultinomialNB(),\n                         dict(alpha=alpha,\n                              ), n_jobs=-1)	89	12	91	43	-4641265730551047126	estimator.fit(X_train, y_train)	96	0	96	31	7860254529866752689
/cb-target/python/a8/c9/a0bd843d9d91037d08f2a0e27ffed961f818f64ee95d64ad6d899466360b.py	MultinomialNB	naive_bayes.MultinomialNB()	73	6	73	33	-2416721674486535103	clf.fit(X_train, y_train)	74	0	74	25	-7040365644655168760
/cb-target/python/15/8c/1c77a57f81a6a660fdf8838db9eb0d30b122d6bec1f57f60b2abf3e4a70a.py	GMM	GMM(n_components=2)	259	12	259	31	8351464975623255468	GMM(n_components=2).fit(reduced_data)	259	12	259	49	-912278210899487647
/cb-target/python/15/8c/1c77a57f81a6a660fdf8838db9eb0d30b122d6bec1f57f60b2abf3e4a70a.py	PCA	PCA(n_components = 2)	229	6	229	27	-3948984534037270505	PCA(n_components = 2).fit(good_data)	229	6	229	42	-6078171976192900830
/cb-target/python/15/8c/1c77a57f81a6a660fdf8838db9eb0d30b122d6bec1f57f60b2abf3e4a70a.py	PCA	PCA()	206	6	206	11	8385687771702580123	PCA().fit(good_data)	206	6	206	26	-1351739754641993605
/cb-target/python/15/8c/1c77a57f81a6a660fdf8838db9eb0d30b122d6bec1f57f60b2abf3e4a70a.py	DecisionTreeRegressor	DecisionTreeRegressor()	76	20	76	43	6854730395087499011	DecisionTreeRegressor().fit(X_train, y_train)	76	20	76	65	-733194362432109829
/cb-target/python/15/8c/1c77a57f81a6a660fdf8838db9eb0d30b122d6bec1f57f60b2abf3e4a70a.py	DecisionTreeRegressor	DecisionTreeRegressor()	82	29	82	52	8874171220910375059	DecisionTreeRegressor().fit(X_train, y_train)	82	29	82	74	4775893896945650251
/cb-target/python/a4/73/0fbdeb0a0504041c996baf9de28756c83e88d9ee25fb0c0329bddae078fd.py	LinearRegression	LinearRegression()	85	9	85	27	4628149794586283142	linreg.fit(X_train, y_train)	87	0	87	28	-8286711735744923135
/cb-target/python/a4/73/0fbdeb0a0504041c996baf9de28756c83e88d9ee25fb0c0329bddae078fd.py	LinearRegression	LinearRegression()	85	9	85	27	4628149794586283142	linreg.fit(X_train, y_train)	145	0	145	28	-230617208454506802
/cb-target/python/17/27/0f14d46bd0b254d83b95113e8635fcc296c645801bde56a058eeb3455314.py	SVC	SVC(C=100000.0, kernel = 'linear')	104	7	104	41	-3042576119798980147	best.fit(data, target)	105	0	105	22	-8977904858681844489
/cb-target/python/17/27/0f14d46bd0b254d83b95113e8635fcc296c645801bde56a058eeb3455314.py	SVC	"SVC(random_state=42, C=100000, kernel = ""linear"")"	19	6	19	55	-1864429759885468893	clf.fit(data, target)	34	0	34	21	-5691321078407566636
/cb-target/python/17/27/0f14d46bd0b254d83b95113e8635fcc296c645801bde56a058eeb3455314.py	GridSearchCV	GridSearchCV(clf, grid, scoring='accuracy', cv=cv)	83	5	83	55	-2979299642605716195	gs.fit(data, target)	84	0	84	20	-3100136750601235086
/cb-target/python/24/d9/df59bcb069b2520effdd1c24c10e481b71049ea720659a9850eebe0c1582.py	GridSearchCV	grid_search.GridSearchCV(estimator, parameters_grid, scoring = 'mean_absolute_error', cv = 4)	150	10	150	103	5801484391757613589	grid_cv.fit(train_data, train_labels)	156	0	156	37	5395703059745420033
/cb-target/python/24/d9/df59bcb069b2520effdd1c24c10e481b71049ea720659a9850eebe0c1582.py	Pipeline	pipeline.Pipeline(steps = [\n    ('feature_processing', pipeline.FeatureUnion(transformer_list = [\n            #binary\n            ('binary_variables_processing', preprocessing.FunctionTransformer(lambda data: data[:, binary_data_indices])),\n\n            #numeric\n            ('numeric_variables_processing', pipeline.Pipeline(steps = [\n                ('selecting', preprocessing.FunctionTransformer(lambda data: data[:, numeric_data_indices])),\n                ('scaling', preprocessing.StandardScaler(with_mean = 0.))\n                        ])),\n\n            #categorical\n            ('categorical_variables_processing', pipeline.Pipeline(steps = [\n                ('selecting', preprocessing.FunctionTransformer(lambda data: data[:, categorical_data_indices])),\n                ('hot_encoding', preprocessing.OneHotEncoder(handle_unknown = 'ignore'))\n                        ])),\n        ])),\n    ('model_fitting', regressor)\n    ]\n)	103	12	122	1	-5914902588629982087	estimator.fit(train_data, train_labels)	127	0	127	39	7236448304321899987
/cb-target/python/24/d9/df59bcb069b2520effdd1c24c10e481b71049ea720659a9850eebe0c1582.py	Pipeline	pipeline.Pipeline(steps = [\n    ('feature_processing', pipeline.FeatureUnion(transformer_list = [\n            #binary\n            ('binary_variables_processing', preprocessing.FunctionTransformer(lambda data: data[:, binary_data_indices])),\n\n            #numeric\n            ('numeric_variables_processing', pipeline.Pipeline(steps = [\n                ('selecting', preprocessing.FunctionTransformer(lambda data: data[:, numeric_data_indices])),\n                ('scaling', preprocessing.StandardScaler(with_mean = 0., with_std = 1.))\n                        ])),\n\n            #categorical\n            ('categorical_variables_processing', pipeline.Pipeline(steps = [\n                ('selecting', preprocessing.FunctionTransformer(lambda data: data[:, categorical_data_indices])),\n                ('hot_encoding', preprocessing.OneHotEncoder(handle_unknown = 'ignore'))\n                        ])),\n        ])),\n    ('model_fitting', regressor)\n    ]\n)	207	12	226	1	6431222018111417545	estimator.fit(train_data, train_labels)	231	0	231	39	-7737548598535352379
/cb-target/python/f7/e4/ddad207d980514c6e789037296ca8735ff3b073d718676a2bd2d0b04da94.py	GridSearchCV	GridSearchCV(estimator3, param_grid = param_test3, scoring='roc_auc',n_jobs=4, cv=5)	268	11	268	95	-9021665171512801530	gsearch3.fit(X_train,y_train)	273	0	273	29	-551549915084308237
/cb-target/python/f7/e4/ddad207d980514c6e789037296ca8735ff3b073d718676a2bd2d0b04da94.py	GridSearchCV	GridSearchCV(estimator = XGBClassifier(max_depth=5, min_child_weight=1,gamma=0.2, colsample_bytree= 0.5, subsample= 0.7, seed=27), param_grid = param_test5, scoring='roc_auc',n_jobs=4, cv=5)	416	11	416	201	-8734652499567979814	gsearch5.fit(X_train, y_train)	417	0	417	30	-1405614180825531500
/cb-target/python/f7/e4/ddad207d980514c6e789037296ca8735ff3b073d718676a2bd2d0b04da94.py	GridSearchCV	GridSearchCV(estimator = XGBClassifier(max_depth=5, min_child_weight=1,seed=27), param_grid = param_test3, scoring='roc_auc',n_jobs=4, cv=5)	395	11	395	151	-6611156910517473799	gsearch3.fit(X_train, y_train)	396	0	396	30	1489474018433399384
/cb-target/python/f7/e4/ddad207d980514c6e789037296ca8735ff3b073d718676a2bd2d0b04da94.py	GridSearchCV	GridSearchCV(estimator = XGBClassifier(seed=27), param_grid = param_test7, scoring='roc_auc',n_jobs=4, cv=5)	466	11	466	119	-2883905288251359149	gsearch7.fit(X_train, y_train)	467	0	467	30	1881444078826297269
/cb-target/python/f7/e4/ddad207d980514c6e789037296ca8735ff3b073d718676a2bd2d0b04da94.py	GridSearchCV	GridSearchCV(estimator2, param_grid = param_test2, scoring='roc_auc',n_jobs=4, cv=5)	238	11	238	95	-1874898686412823610	gsearch2.fit(X_train,y_train)	243	0	243	29	-10040958319862532
/cb-target/python/f7/e4/ddad207d980514c6e789037296ca8735ff3b073d718676a2bd2d0b04da94.py	GridSearchCV	GridSearchCV(estimator = XGBClassifier(max_depth=5, min_child_weight=1,gamma=0.2, seed=27), param_grid = param_test4, scoring='roc_auc',n_jobs=4, cv=5)	406	11	406	162	807367395299677030	gsearch4.fit(X_train, y_train)	407	0	407	30	8109386275362472838
/cb-target/python/f7/e4/ddad207d980514c6e789037296ca8735ff3b073d718676a2bd2d0b04da94.py	GridSearchCV	GridSearchCV(estimator5, param_grid = param_test5, scoring='roc_auc',n_jobs=4, cv=5)	329	11	329	95	1922651139242472782	gsearch5.fit(X_train,y_train)	334	0	334	29	-4926351927992135994
/cb-target/python/f7/e4/ddad207d980514c6e789037296ca8735ff3b073d718676a2bd2d0b04da94.py	GridSearchCV	GridSearchCV(estimator = XGBClassifier(max_depth=5, min_child_weight=1,gamma=0.2,reg_alpha=0.01,\n                                                  colsample_bytree= 0.5, subsample= 0.7, seed=27),\n                        param_grid = param_test6, scoring='roc_auc',n_jobs=4, cv=5)	426	11	428	83	6867900271014828171	gsearch6.fit(X_train, y_train)	429	0	429	30	1932640613312185278
/cb-target/python/f7/e4/ddad207d980514c6e789037296ca8735ff3b073d718676a2bd2d0b04da94.py	GridSearchCV	GridSearchCV(estimator4, param_grid = param_test4, scoring='roc_auc',n_jobs=4, cv=5)	298	11	298	95	7180111338739281431	gsearch4.fit(X_train,y_train)	303	0	303	29	2552505369125402045
/cb-target/python/f7/e4/ddad207d980514c6e789037296ca8735ff3b073d718676a2bd2d0b04da94.py	GridSearchCV	GridSearchCV(estimator, param_grid = param_test1, scoring='roc_auc',n_jobs=4, cv=5)	207	11	207	94	7874921710290913926	gsearch1.fit(X_train,y_train)	212	0	212	29	-5516346910675875845
/cb-target/python/23/c9/97f01110955e500862b945be554c33b3276d5a7447fbcd544bd3ae4dc6dd.py	GaussianNB	GaussianNB()	114	8	114	20	-4003658964933212888	model.fit(X_train, y_train)	116	0	116	27	9073603477179206740
/cb-target/python/23/c9/97f01110955e500862b945be554c33b3276d5a7447fbcd544bd3ae4dc6dd.py	RandomForestClassifier	RandomForestClassifier(random_state = 0)	259	8	259	48	-1445277135040583320	model.fit(X_train, y_train)	260	0	260	27	-1964301068663819299
/cb-target/python/23/c9/97f01110955e500862b945be554c33b3276d5a7447fbcd544bd3ae4dc6dd.py	LogisticRegression	LogisticRegression(random_state = 0)	223	6	223	42	-2448654428400170132	clf.fit(X_train, y_train)	242	15	242	40	1307558038896405998
/cb-target/python/23/c9/97f01110955e500862b945be554c33b3276d5a7447fbcd544bd3ae4dc6dd.py	GridSearchCV	GridSearchCV(clf, param_grid = parameters, scoring= scorer, cv =10)	233	11	233	78	3874517215722603848	grid_obj.fit(X_train, y_train)	236	11	236	41	-3425307468456482584
/cb-target/python/8b/1d/ece7d0f02e55adf90eb6490a3f672fa1dcfc92a6edb52f4a2065fd9351d3.py	LinearRegression	LinearRegression()	95	5	95	23	5512963294763332354	lr.fit(X_train, y_train)	97	0	97	24	-1166869402987093502
/cb-target/python/8b/1d/ece7d0f02e55adf90eb6490a3f672fa1dcfc92a6edb52f4a2065fd9351d3.py	Ridge	Ridge(alpha=optimal_ridge.alpha_)	160	8	160	41	3281240277086214395	ridge.fit(X_train, y_train)	167	0	167	27	5547871441648981166
/cb-target/python/8b/1d/ece7d0f02e55adf90eb6490a3f672fa1dcfc92a6edb52f4a2065fd9351d3.py	Lasso	Lasso(alpha=optimal_lasso.alpha_)	180	8	180	41	-3228700862474493721	lasso.fit(X_train, y_train)	186	0	186	27	-5196583229673004841
/cb-target/python/8b/1d/ece7d0f02e55adf90eb6490a3f672fa1dcfc92a6edb52f4a2065fd9351d3.py	Lasso	Lasso(alpha=optimal_lasso.alpha_)	180	8	180	41	-3228700862474493721	lasso.fit(X_train, y_train)	214	0	214	27	5675074986930093320
/cb-target/python/8b/1d/ece7d0f02e55adf90eb6490a3f672fa1dcfc92a6edb52f4a2065fd9351d3.py	GridSearchCV	GridSearchCV(dtr, params, n_jobs=-1, cv=10, verbose=1)	295	9	295	63	4388760548291582841	dtr_gs.fit(X_train, y_train)	301	0	301	28	4428837875116414219
/cb-target/python/8b/1d/ece7d0f02e55adf90eb6490a3f672fa1dcfc92a6edb52f4a2065fd9351d3.py	GridSearchCV	GridSearchCV(forest, params, n_jobs=-1,  cv=10,verbose=1)	381	16	381	73	4532880029781105397	estimator_rfr.fit(X_train, y_train)	387	0	387	35	8332754451412567751
/cb-target/python/8b/1d/ece7d0f02e55adf90eb6490a3f672fa1dcfc92a6edb52f4a2065fd9351d3.py	ElasticNetCV	ElasticNetCV(l1_ratio=l1_ratios, n_alphas=300, cv=5, verbose=1)	195	15	195	78	-955325665711795912	optimal_enet.fit(X_train, y_train)	196	0	196	34	1898773103558849731
/cb-target/python/8b/1d/ece7d0f02e55adf90eb6490a3f672fa1dcfc92a6edb52f4a2065fd9351d3.py	ElasticNetCV	ElasticNetCV(l1_ratio=l1_ratios, n_alphas=300, cv=5, verbose=1)	219	15	219	78	1700841890280525383	optimal_enet.fit(X_train, y_train)	220	0	220	34	3194211472999280852
/cb-target/python/8b/1d/ece7d0f02e55adf90eb6490a3f672fa1dcfc92a6edb52f4a2065fd9351d3.py	RidgeCV	RidgeCV(alphas=ridge_alphas, cv=10)	156	16	156	51	2771045394695381344	optimal_ridge.fit(X_train, y_train)	157	0	157	35	-7408418476036848110
/cb-target/python/8b/1d/ece7d0f02e55adf90eb6490a3f672fa1dcfc92a6edb52f4a2065fd9351d3.py	ElasticNet	ElasticNet(alpha=optimal_enet.alpha_, l1_ratio=optimal_enet.l1_ratio_)	200	7	200	77	-7974809821852218825	enet.fit(X_train, y_train)	206	0	206	26	2166639605437359299
/cb-target/python/8b/1d/ece7d0f02e55adf90eb6490a3f672fa1dcfc92a6edb52f4a2065fd9351d3.py	ElasticNet	ElasticNet(alpha=optimal_enet.alpha_, l1_ratio=optimal_enet.l1_ratio_)	224	7	224	77	3467541187884258206	enet.fit(X_train, y_train)	230	0	230	26	4599931403576819915
/cb-target/python/8b/1d/ece7d0f02e55adf90eb6490a3f672fa1dcfc92a6edb52f4a2065fd9351d3.py	LassoCV	LassoCV(n_alphas=300, cv=10, verbose=1)	176	16	176	55	5966431728570495038	optimal_lasso.fit(X_train, y_train)	177	0	177	35	-8289929841673442670
/cb-target/python/25/b8/d0ccd1dfef23fc4c70c1f9e070ca53fc6076fe33f36fb2861135cdefec26.py	GaussianNB	GaussianNB()	176	11	176	23	-969129269413580976	nb_model.fit(X_train, y_train.ravel())	178	0	178	38	4257477768535301685
/cb-target/python/25/b8/d0ccd1dfef23fc4c70c1f9e070ca53fc6076fe33f36fb2861135cdefec26.py	RandomForestClassifier	RandomForestClassifier(random_state=42)	243	11	243	50	-4469857560118970750	rf_model.fit(X_train, y_train.ravel())	244	0	244	38	4399142252729084220
/cb-target/python/25/b8/d0ccd1dfef23fc4c70c1f9e070ca53fc6076fe33f36fb2861135cdefec26.py	LogisticRegression	"LogisticRegression(class_weight=""balanced"", C=best_score_C_val, random_state=42)"	379	11	379	91	-3113859028980711299	lr_model.fit(X_train, y_train.ravel())	380	0	380	38	-3733465718888631112
/cb-target/python/25/b8/d0ccd1dfef23fc4c70c1f9e070ca53fc6076fe33f36fb2861135cdefec26.py	LogisticRegression	LogisticRegression(C=0.7, random_state=42)	294	9	294	51	4572326422714954689	lr_model.fit(X_train, y_train.ravel())	296	0	296	38	100785621608246451
/cb-target/python/25/b8/d0ccd1dfef23fc4c70c1f9e070ca53fc6076fe33f36fb2861135cdefec26.py	LogisticRegressionCV	"LogisticRegressionCV(n_jobs=-1, random_state=42, Cs=3, cv=10, refit=True, class_weight=""balanced"")"	395	14	395	112	7503992281262659445	lr_cv_model.fit(X_train, y_train.ravel())	396	0	396	41	4504301292166498472
/cb-target/python/c4/fc/65f18c39d9e1cb8bce8e8f2ddd7b691a0b415c3696aa1dcae7a9181683ee.py	LogisticRegression	LogisticRegression(C = 10**2)	119	5	119	34	-7937089534642729432	lm.fit(X,y)	129	0	129	11	3091589299687492490
/cb-target/python/83/d2/08d8adea7a7e5d2b702381405d1262447e7105fc2138d9715739bf6d7a48.py	LogisticRegression	LogisticRegression()	67	18	67	38	-4439193897062997352	sentiment_model.fit(train_matrix, train_data['sentiment'])	68	0	68	58	4527795732721081233
/cb-target/python/83/d2/08d8adea7a7e5d2b702381405d1262447e7105fc2138d9715739bf6d7a48.py	LogisticRegression	LogisticRegression()	154	15	154	35	-1912005850730518361	simple_model.fit(train_matrix_word_subset, train_data['sentiment'])	155	0	155	67	-1401902464797905789
/cb-target/python/b2/e6/aa65771fffc57dfd440bb2d52a55b2b1b2bc4d8566468bda33c1e51624f9.py	LogisticRegression	LogisticRegression()	111	12	111	32	8448479460980701493	LRM_Model.fit(Man_XTrain5,Man_YTrain5)	379	0	379	38	7959518636093804459
/cb-target/python/b2/e6/aa65771fffc57dfd440bb2d52a55b2b1b2bc4d8566468bda33c1e51624f9.py	LogisticRegression	LogisticRegression()	111	12	111	32	8448479460980701493	LRM_Model.fit(Scaled_XTrain3,LRM_YTrain3)	265	0	265	41	3194748836000890175
/cb-target/python/b2/e6/aa65771fffc57dfd440bb2d52a55b2b1b2bc4d8566468bda33c1e51624f9.py	LogisticRegression	LogisticRegression()	111	12	111	32	8448479460980701493	LRM_Model.fit(PCA_XTrain4,PCA_YTrain4)	336	0	336	38	5846962900330217373
/cb-target/python/b2/e6/aa65771fffc57dfd440bb2d52a55b2b1b2bc4d8566468bda33c1e51624f9.py	LogisticRegression	LogisticRegression()	111	12	111	32	8448479460980701493	LRM_Model.fit(Scaled_XTrain,LRM_YTrain)	153	0	153	39	-2620517083529010058
/cb-target/python/b2/e6/aa65771fffc57dfd440bb2d52a55b2b1b2bc4d8566468bda33c1e51624f9.py	LogisticRegression	LogisticRegression()	111	12	111	32	8448479460980701493	LRM_Model.fit(LRM_Features, LRM_Response)	112	0	112	41	3915219270486414518
/cb-target/python/b2/e6/aa65771fffc57dfd440bb2d52a55b2b1b2bc4d8566468bda33c1e51624f9.py	PCA	PCA(n_components=5)	321	6	321	25	-3159373061578085653	pca.fit(dc_expanded)	322	8	322	28	1114288831577545255
/cb-target/python/b2/e6/aa65771fffc57dfd440bb2d52a55b2b1b2bc4d8566468bda33c1e51624f9.py	StandardScaler	StandardScaler()	145	9	145	25	-4690655208211491012	Scaler.fit(LRM_XTrain3)	258	0	258	23	1159145630373498183
/cb-target/python/b2/e6/aa65771fffc57dfd440bb2d52a55b2b1b2bc4d8566468bda33c1e51624f9.py	StandardScaler	StandardScaler()	145	9	145	25	-4690655208211491012	Scaler.fit(LRM_XTrain)	146	0	146	22	-3234313119063525660
/cb-target/python/2b/4c/e4a0278135418004c8c2d958cd61488956e211239aeb4ca594a7643f1493.py	LogisticRegression	LogisticRegression()	75	9	75	29	-1641656508419780451	logreg.fit(X,y)	78	0	78	15	-219353751937591874
/cb-target/python/36/0d/8e4ceeae712685ebea4a6da36cfb4db6ff5aa5fc92edb3e9218988367b2f.py	LabelEncoder	pp.LabelEncoder()	134	8	134	25	1489821371833631531	l.fit(dataset[:, column_index])	135	4	135	35	38642000092492352
/cb-target/python/36/0d/8e4ceeae712685ebea4a6da36cfb4db6ff5aa5fc92edb3e9218988367b2f.py	RFC	RFC(n_estimators=55, n_jobs=-1)	281	5	281	36	-9185236753837034460	rf.fit(x_train, y_train)	283	0	283	24	5843101502593131387
/cb-target/python/36/0d/8e4ceeae712685ebea4a6da36cfb4db6ff5aa5fc92edb3e9218988367b2f.py	RFC	RFC(n_estimators=55, n_jobs=-1)	292	5	292	36	-125587188272161107	rf.fit(x_train, y_train)	294	0	294	24	9216103043082331981
/cb-target/python/df/78/e07a1818587a2881df7eae24e17d26d35f9d68afb9433ed828b2e0d354ae.py	KNeighborsClassifier	KNeighborsClassifier(n_neighbors=17, weights='distance')	57	6	57	62	-2355239993670893678	knn.fit(X, y)	76	0	76	13	-4512923429434244231
/cb-target/python/0b/cd/6483812679d1d66488eef24d0954d2f2fd30056c16006fc5fe0eb9295393.py	DecisionTreeClassifier	tree.DecisionTreeClassifier(max_depth=6)	115	6	115	46	-18747034606348798	clf.fit(train_data_1.as_matrix(), loan_status_train_1.as_matrix())	120	22	120	88	-2155783893550249450
/cb-target/python/0b/cd/6483812679d1d66488eef24d0954d2f2fd30056c16006fc5fe0eb9295393.py	DecisionTreeClassifier	tree.DecisionTreeClassifier(max_depth=2)	125	13	125	53	530658749329200329	clf_simple.fit(train_data_1.as_matrix(), loan_status_train_1.as_matrix())	126	14	126	87	7592716514364276177
/cb-target/python/0b/cd/6483812679d1d66488eef24d0954d2f2fd30056c16006fc5fe0eb9295393.py	DecisionTreeClassifier	tree.DecisionTreeClassifier(max_depth=10)	190	10	190	51	6653038340273257279	clf_big.fit(train_data_1, loan_status_train_1)	191	12	191	58	-1102736117812584851
/cb-target/python/d9/1a/6b0e1e8f6a23e22c78985fcb77107ef5528efcee0767ee4b1180f2212229.py	LinearRegression	LinearRegression()	264	6	264	24	3622509950741156715	lm1.fit(X, y)	265	0	265	13	5667925775140748282
/cb-target/python/d9/1a/6b0e1e8f6a23e22c78985fcb77107ef5528efcee0767ee4b1180f2212229.py	LinearRegression	LinearRegression()	370	6	370	24	6469698188688588169	lm2.fit(X2_train, y2_train)	371	0	371	27	1136587017264722095
/cb-target/python/ce/e1/ffcee7ab6d88b70a78470c85e83a1927a5541e75d2acf9c29cf9bedde029.py	LogisticRegression	LogisticRegression()	358	6	358	26	7034446146336478574	clf.fit(X_train, y_train)	359	0	359	25	-9195531985337774039
/cb-target/python/ce/e1/ffcee7ab6d88b70a78470c85e83a1927a5541e75d2acf9c29cf9bedde029.py	LogisticRegression	LogisticRegression()	448	6	448	26	-6340144383229325943	clf.fit(X_train, y_train)	449	0	449	25	6123507617188450262
/cb-target/python/ce/e1/ffcee7ab6d88b70a78470c85e83a1927a5541e75d2acf9c29cf9bedde029.py	LogisticRegression	LogisticRegression()	509	6	509	26	-741984212733819879	clf.fit(X_train_res, y_train_res)	510	0	510	33	5425018684138836550
/cb-target/python/8b/72/f88e126ab84826268ff34327fad28b1fd69c4cd6d1b3abff69595db7c966.py	RandomForestClassifier	RandomForestClassifier()	11	5	11	29	-3012420082003715839	rf.fit(X_train, y_train)	37	0	37	24	-1688729830938259220
/cb-target/python/2e/cb/53395910bd0ee07bc97be8edcd2abe61719b5e9017a43dac57c7107f67bf.py	SVC	SVC(kernel='linear')	133	13	133	33	4083190604678829720	classifier.fit(singles, target)	134	0	134	31	-8125516764300319671
/cb-target/python/a5/f0/8f2d816f4a27cec0ddd7a42286d21f0d8c5bf390bbb7999ef70ca92c8e87.py	PCA	decomposition.PCA()	49	6	49	25	-4630786025928202025	pca.fit(my_scaled_data)	50	0	50	23	-753170032314375187
/cb-target/python/a5/f0/8f2d816f4a27cec0ddd7a42286d21f0d8c5bf390bbb7999ef70ca92c8e87.py	DBSCAN	DBSCAN(eps = eps_,min_samples=10, algorithm = algo, metric = met)	252	19	252	84	-8223711421092859335	DBSCAN(eps = eps_,min_samples=10, algorithm = algo, metric = met).fit(my_data_scaled_PCA_DBSCAN0)	252	19	252	116	3207898541566884917
/cb-target/python/a5/f0/8f2d816f4a27cec0ddd7a42286d21f0d8c5bf390bbb7999ef70ca92c8e87.py	DBSCAN	"DBSCAN(eps = .85,min_samples=10, metric = ""euclidean"")"	99	7	99	61	2815406523830404999	"DBSCAN(eps = .85,min_samples=10, metric = ""euclidean"").fit(my_scaled_data_transformed_pd)"	99	7	99	96	841632808113459493
/cb-target/python/05/23/002e08d9a81ecde6e75c9e0607d9d861bd3dff222aca0087642630d067df.py	RandomForestClassifier	RandomForestClassifier(random_state=42)	308	6	308	45	-1437595313241638781	clf.fit(X_train, y_train)	332	15	332	40	-8774959373470757599
/cb-target/python/05/23/002e08d9a81ecde6e75c9e0607d9d861bd3dff222aca0087642630d067df.py	RandomForestClassifier	RandomForestClassifier(bootstrap=True,\n class_weight=None,\n criterion='entropy',\n max_depth= 20,\n max_features='auto',\n max_leaf_nodes=None,\n min_impurity_split=1e-07,\n min_samples_leaf=1,\n min_samples_split=4,\n min_weight_fraction_leaf=0.0,\n n_estimators=1000,\n n_jobs=-1,\n oob_score=False,\n random_state=42,\n verbose=0,\n warm_start=False)	360	17	375	18	1080663756779668482	more_trees_clf.fit(X_train, y_train)	378	0	378	36	5656438976686865311
/cb-target/python/05/23/002e08d9a81ecde6e75c9e0607d9d861bd3dff222aca0087642630d067df.py	GridSearchCV	GridSearchCV(clf, param_grid=parameters, scoring=scorer, cv=3, n_jobs=-1)	320	11	320	84	7572423158181756745	grid_obj.fit(X_train, y_train)	325	11	325	41	-3211758883019532986
/cb-target/python/05/23/002e08d9a81ecde6e75c9e0607d9d861bd3dff222aca0087642630d067df.py	clone	clone(best_clf)	425	8	425	23	-6641772268680510464	model.fit(X_train, y_train)	428	0	428	27	867804336020337851
/cb-target/python/2a/21/ecb8d1896d65ff46ed1266c7f71ee45e673459e7dc85e6640e5fcd25e53d.py	GaussianNB	GaussianNB()	28	6	28	18	8002321456674634403	clf.fit(X, y)	29	0	29	13	3139752284137568479
/cb-target/python/2a/21/ecb8d1896d65ff46ed1266c7f71ee45e673459e7dc85e6640e5fcd25e53d.py	GaussianNB	GaussianNB()	68	6	68	18	6874535107796179945	clf.fit(datas, flags)	72	0	72	21	5885860678951277635
/cb-target/python/2a/21/ecb8d1896d65ff46ed1266c7f71ee45e673459e7dc85e6640e5fcd25e53d.py	GaussianNB	GaussianNB()	113	6	113	18	-8854247888218399976	clf.fit(keitaiso_array, flags)	117	0	117	30	-8659268374052299412
/cb-target/python/9c/2f/f513dea99382de04298eac71261ee068ada9d9ee116fa2d6fb99ef61cd22.py	GradientBoostingClassifier	GradientBoostingClassifier(random_state=0)	273	6	273	48	-4188432186616282397	clf.fit(X_train, y_train)	308	15	308	40	-4914176532428416771
/cb-target/python/9c/2f/f513dea99382de04298eac71261ee068ada9d9ee116fa2d6fb99ef61cd22.py	GridSearchCV	GridSearchCV(estimator=clf, param_grid=parameters,  scoring=scorer,  cv=5,  n_jobs=-1)	297	11	297	97	-1723862786723320717	grid_obj.fit(X_train, y_train.ravel())	302	11	302	49	-8535352050161784580
/cb-target/python/96/91/de7cf6330d748208f1556bded26fdf2a0ed7f42e9b4da435c0e6f0cddf51.py	RandomForestClassifier	ensemble.RandomForestClassifier()	40	6	40	39	346000178576211631	clf.fit(X, y)	41	0	41	13	1046361453603660804
/cb-target/python/d1/72/501d64332730ce282e84f3e493b9078d87713f60728fa7f87db523b1a269.py	RandomForestClassifier	RandomForestClassifier(n_estimators = 100)	168	9	168	51	7948662570729127625	"forest.fit(train_data_features, train[""sentiment""])"	169	9	169	60	5915530396793288752
/cb-target/python/11/73/0c319425fa85b68f5eeae83eaa9b6c36c2b0f21c4e9e1deae1f0eb8d5cc6.py	DecisionTreeClassifier	tree.DecisionTreeClassifier()	41	6	41	35	-8611891249208004656	clf.fit(X, Y)	42	6	42	19	5622666338584642948
/cb-target/python/11/73/0c319425fa85b68f5eeae83eaa9b6c36c2b0f21c4e9e1deae1f0eb8d5cc6.py	DecisionTreeClassifier	tree.DecisionTreeClassifier()	76	6	76	35	-2599313206432291587	clf.fit(X, Y)	77	6	77	19	-3544679509635163924
/cb-target/python/11/73/0c319425fa85b68f5eeae83eaa9b6c36c2b0f21c4e9e1deae1f0eb8d5cc6.py	DecisionTreeClassifier	tree.DecisionTreeClassifier()	120	6	120	35	8725938932125068208	clf.fit(X, Y)	121	6	121	19	-3356708873023225413
/cb-target/python/c6/b1/7f2182ce34f481c76d98de200f881e7b8ffd1de15e8d5248242bcff3a670.py	RandomForestClassifier	RandomForestClassifier(n_estimators = 5)	246	9	246	49	4154294903991782584	model1.fit(X_train, y_train)	247	9	247	37	7657231051155991002
/cb-target/python/c6/b1/7f2182ce34f481c76d98de200f881e7b8ffd1de15e8d5248242bcff3a670.py	RandomForestClassifier	RandomForestClassifier(n_estimators = 50)	272	9	272	50	5124346554765287836	model2.fit(X_train, y_train)	273	9	273	37	6131219803066291337
/cb-target/python/c6/b1/7f2182ce34f481c76d98de200f881e7b8ffd1de15e8d5248242bcff3a670.py	DictVectorizer	DictVectorizer()	210	6	210	22	8774888908263008048	vec.fit(traindata[categorical].T.to_dict().values())	211	0	211	52	-6919432123986930427
/cb-target/python/67/5f/e02ab9443afd1298bfd6197b403995bce516bd52589c9136482bc77eea8d.py	DecisionTreeClassifier	tree.DecisionTreeClassifier()	72	6	72	35	-4519621672416660060	clf.fit(relevantinput, trainsample)	73	6	73	41	7441349740659415918
/cb-target/python/67/5f/e02ab9443afd1298bfd6197b403995bce516bd52589c9136482bc77eea8d.py	DecisionTreeClassifier	tree.DecisionTreeClassifier()	120	6	120	35	-8354581396330213571	clf.fit(relevantinput, trainsample)	121	6	121	41	-3656850174958959260
/cb-target/python/06/53/6f78ada2f9b3182574003d979dc0f66402ed1f384affacdfc3a83b633286.py	GradientBoostingClassifier	GradientBoostingClassifier(verbose=0)	374	16	374	53	8591009658501273333	gb_classifier.fit(training_loci[features_list], training_loci['Duplicate'])	375	0	375	75	-597050046687852970
/cb-target/python/06/53/6f78ada2f9b3182574003d979dc0f66402ed1f384affacdfc3a83b633286.py	RandomForestClassifier	RandomForestClassifier(n_estimators = 200, n_jobs=5)	489	16	489	68	-2856740905648920919	rf_classifier.fit(training_loci[features_list], training_loci['Duplicate'])	490	0	490	75	-7436875447910266064
/cb-target/python/06/53/6f78ada2f9b3182574003d979dc0f66402ed1f384affacdfc3a83b633286.py	BaggingClassifier	BaggingClassifier(n_jobs=5, max_samples = .2, n_estimators = 500)	430	17	430	82	7409374625863564521	bag_classifier.fit(training_loci[features_list], training_loci['Duplicate'])	431	0	431	76	-7720651046949179144
/cb-target/python/06/53/6f78ada2f9b3182574003d979dc0f66402ed1f384affacdfc3a83b633286.py	ExtraTreesClassifier	ExtraTreesClassifier(n_jobs=5, n_estimators = 200, bootstrap=True,\n                                     criterion = 'entropy', min_samples_split = 5, max_features=2)	398	16	399	98	-6905800562292749280	et_classifier.fit(training_loci[features_list], training_loci['Duplicate'])	400	0	400	75	-84057290974340413
/cb-target/python/06/53/6f78ada2f9b3182574003d979dc0f66402ed1f384affacdfc3a83b633286.py	AdaBoostClassifier	AdaBoostClassifier(n_estimators=100)	459	17	459	53	6687136306314880425	ada_classifier.fit(training_loci[features_list], training_loci['Duplicate'])	460	0	460	76	8835793871413191957
/cb-target/python/cf/c1/cd18932a462751d1685dd830d3efb1b24d10a39dba82b697932aeffb75c6.py	GMM	GMM(n_components=n, covariance_type='full')	217	8	217	51	-3705756807449037314	GMM(n_components=n, covariance_type='full').fit(xN)	217	8	217	59	-8042668555776376995
/cb-target/python/cf/c1/cd18932a462751d1685dd830d3efb1b24d10a39dba82b697932aeffb75c6.py	GMM	GMM(n_components=n, covariance_type='full')	291	12	291	55	5281955594493217846	GMM(n_components=n, covariance_type='full').fit(xN)	291	12	291	63	2902956406482833065
/cb-target/python/cf/c1/cd18932a462751d1685dd830d3efb1b24d10a39dba82b697932aeffb75c6.py	KernelDensity	KernelDensity()	143	6	143	21	-6952855327700918988	clf.fit(X[['v','acc']])	144	0	144	23	-3460911717447266381
/cb-target/python/f0/f1/5941af5514b30107a3cd7dbf63e3eac16953e855d2d3cd8b51100d851570.py	LogisticRegression	LogisticRegression(random_state= 250)	216	6	216	43	-3084327783118853360	clf.fit(X_train, y_train)	235	15	235	40	9184163084164323522
/cb-target/python/f0/f1/5941af5514b30107a3cd7dbf63e3eac16953e855d2d3cd8b51100d851570.py	GridSearchCV	GridSearchCV(clf,parameters,scoring=scorer, verbose=10)	226	11	226	66	-4262574152135776913	grid_obj.fit(X_train,y_train)	229	11	229	40	-8708449036196479535
/cb-target/python/f0/f1/5941af5514b30107a3cd7dbf63e3eac16953e855d2d3cd8b51100d851570.py	ExtraTreesClassifier	ExtraTreesClassifier(random_state=50)	256	8	256	45	-5212381242545328751	ExtraTreesClassifier(random_state=50).fit(X_train,y_train)	256	8	256	66	-2130130294486151081
/cb-target/python/88/f9/d1294053d34728a8e3b2a08a12806d27d53a225e2fa799fc5c94fad23115.py	GridSearchCV	GridSearchCV(clf_base, grid, cv=cv, n_jobs=-1, scoring='f1_macro')	61	14	61	80	798282107248095184	clf.fit(X_train, y_train)	63	8	63	33	3615879495434257665
/cb-target/python/db/c7/a35fa9225a5f1306bec598cd33acdc61efda8b4b392aea02fdc81396cba0.py	ElasticNetCV	ElasticNetCV()	66	5	66	19	-6513067374407314881	ec.fit(X,y)	68	0	68	11	-5158085686647208925
/cb-target/python/db/c7/a35fa9225a5f1306bec598cd33acdc61efda8b4b392aea02fdc81396cba0.py	SVR	SVR(kernel='poly', C=1e3, degree=3)	79	11	79	46	9074152522560015913	svr_poly.fit(X, y)	80	9	80	27	-2286590879360932792
/cb-target/python/3c/cf/a856a50b8bef19b24378f8126a75e676cb5949ef2fafb856353b126b0801.py	RandomForestClassifier	RandomForestClassifier(n_jobs=-1, n_estimators=1000)	61	6	61	58	380687382198635062	clf.fit(X_train, Y_train)	62	6	62	31	-552988248233737311
/cb-target/python/3c/cf/a856a50b8bef19b24378f8126a75e676cb5949ef2fafb856353b126b0801.py	DecisionTreeClassifier	DecisionTreeClassifier(min_samples_leaf=11)	103	6	103	49	-2974220073454792697	clf.fit(X_train, Y_train)	104	6	104	31	-3417071737217677994
/cb-target/python/3c/cf/a856a50b8bef19b24378f8126a75e676cb5949ef2fafb856353b126b0801.py	DecisionTreeClassifier	DecisionTreeClassifier(max_leaf_nodes=i)	92	10	92	50	7727773037245249845	clf.fit(X_train, Y_train)	93	10	93	35	-834226539376688254
/cb-target/python/a3/cf/59a1bd827e37de4808743eab0f3e071cb6ec7039237e1267990226d0e9ce.py	DecisionTreeClassifier	tree.DecisionTreeClassifier(max_depth=4)	102	6	102	46	8820749489977965893	clf.fit(output, requiredtarget)	106	6	106	37	-6882138032388578674
/cb-target/python/a3/cf/59a1bd827e37de4808743eab0f3e071cb6ec7039237e1267990226d0e9ce.py	LabelEncoder	preprocessing.LabelEncoder()	28	21	28	49	-8468849337581159189	targetLabelEncoder.fit(data['gname'].unique())	29	0	29	46	-4094077328712620924
/cb-target/python/40/3e/ee2ce9bb9c1d891e283b9210451e31ac24345db3b14ea8f1c1c99263351b.py	LogisticRegression	LogisticRegression(C=gs.best_params_['C'], penalty=gs.best_params_['penalty'])	330	9	330	87	-2876409692127566553	logreg.fit(X_train1, y_train1)	331	11	331	41	-1979233116287520962
/cb-target/python/40/3e/ee2ce9bb9c1d891e283b9210451e31ac24345db3b14ea8f1c1c99263351b.py	LogisticRegression	LogisticRegression(solver='liblinear')	116	5	116	43	365244864793271388	lr.fit(X_train, y_train)	121	11	121	35	3696590914885547053
/cb-target/python/40/3e/ee2ce9bb9c1d891e283b9210451e31ac24345db3b14ea8f1c1c99263351b.py	LogisticRegression	LogisticRegression(C=1.5, penalty='l1', solver='liblinear')	148	8	148	67	3168233728845661751	lr_l1.fit(X_train, y_train)	157	14	157	41	-1556717293415160791
/cb-target/python/40/3e/ee2ce9bb9c1d891e283b9210451e31ac24345db3b14ea8f1c1c99263351b.py	LogisticRegression	LogisticRegression(C=1.5, penalty='l1', solver='liblinear')	246	11	246	70	-2400877113794437158	lr_l1_SF.fit(X_train1, y_train1)	247	15	247	47	8876725857588684805
/cb-target/python/40/3e/ee2ce9bb9c1d891e283b9210451e31ac24345db3b14ea8f1c1c99263351b.py	LogisticRegression	LogisticRegression(C=1.5, penalty='l2', solver='liblinear')	262	11	262	70	9169570580658909940	lr_l2_SF.fit(X_train1, y_train1)	263	15	263	47	5975547651890679730
/cb-target/python/40/3e/ee2ce9bb9c1d891e283b9210451e31ac24345db3b14ea8f1c1c99263351b.py	GridSearchCV	GridSearchCV(logreg1, {'penalty': penalties, 'C': C_vals}, verbose=False, cv=15)	299	6	299	86	-8893119138584898261	gs1.fit(X1, y1)	300	0	300	15	-6081524032117571497
/cb-target/python/40/3e/ee2ce9bb9c1d891e283b9210451e31ac24345db3b14ea8f1c1c99263351b.py	GridSearchCV	GridSearchCV(knn, {'n_neighbors': n_neighbors_list, 'weights': weight_list, 'p':p_list}, verbose=False, cv=15, scoring='F1')	386	9	386	133	-7402843870007105912	gs_knn.fit(X_train_iris, y_train_iris)	387	0	387	38	-8232997030229181852
/cb-target/python/40/3e/ee2ce9bb9c1d891e283b9210451e31ac24345db3b14ea8f1c1c99263351b.py	GridSearchCV	GridSearchCV(logreg, {'penalty': penalties, 'C': C_vals}, verbose=False, cv=15)	318	5	318	84	-984131792916567450	gs.fit(X, y)	319	0	319	12	-7677307407503453477
/cb-target/python/40/3e/ee2ce9bb9c1d891e283b9210451e31ac24345db3b14ea8f1c1c99263351b.py	LogisticRegressionCV	LogisticRegressionCV(Cs=20, solver='liblinear', cv=3, penalty='l1', scoring='f1')	206	12	206	93	6097253387128619124	logreg_cv.fit(X_train, y_train)	207	11	207	42	-9001505349589984272
/cb-target/python/40/3e/ee2ce9bb9c1d891e283b9210451e31ac24345db3b14ea8f1c1c99263351b.py	LogisticRegressionCV	LogisticRegressionCV(Cs=20, solver='liblinear', cv=3, penalty='l1', scoring='f1')	283	13	283	94	6207423391882715571	logreg_cv1.fit(X_train1, y_train1)	284	12	284	46	3342992104188456719
/cb-target/python/c6/ee/c411b3c4b1edc9915c0a49ec7c9f46cd6033ebd8d405454933f837fa3a6d.py	LogisticRegression	LogisticRegression(penalty='l2', C=1)	67	8	67	45	4306176489027845476	model.fit(X_train, y_train)	72	0	72	27	-6243547390156394655
/cb-target/python/02/e6/f26a690fe3cf81b5df99618abbb7df9dd4141f734f14b94b3453490aeb90.py	LogisticRegression	LogisticRegression()	79	8	79	28	-5153769311822632236	model.fit(X, y)	81	0	81	15	4593965323219902071
/cb-target/python/02/e6/f26a690fe3cf81b5df99618abbb7df9dd4141f734f14b94b3453490aeb90.py	LogisticRegression	LogisticRegression()	104	8	104	28	-1014183244881229006	model.fit(X, y)	106	0	106	15	4430841929558029443
/cb-target/python/02/e6/f26a690fe3cf81b5df99618abbb7df9dd4141f734f14b94b3453490aeb90.py	LogisticRegression	LogisticRegression(penalty ='l1', C=0.1)	190	19	190	59	2355782614973946847	logistic_model_2.fit(my_xs, y)	196	0	196	30	8983598122013625876
/cb-target/python/02/e6/f26a690fe3cf81b5df99618abbb7df9dd4141f734f14b94b3453490aeb90.py	LogisticRegression	LogisticRegression(penalty='11')	174	19	174	51	2635722706092315216	logistic_model_1.fit(my_xs, y)	179	0	179	30	-6888146459303627793
/cb-target/python/02/e6/f26a690fe3cf81b5df99618abbb7df9dd4141f734f14b94b3453490aeb90.py	GridSearchCV	GridSearchCV(estimator=model_i_am_testing,\n                          param_grid=parameters,\n                          verbose=10,\n                          cv=6)	225	14	228	31	-4892290037674167463	grid_search.fit(my_xs, y)	238	0	238	25	7147039689460326585
/cb-target/python/63/cf/c183783953d45747a155079117e1783a6bc5622cf246b48acd35ec89fb08.py	PCA	PCA(n_components=2)	170	6	170	25	4254116688244413097	PCA(n_components=2).fit(good_data)	170	6	170	40	2365142763097317923
/cb-target/python/63/cf/c183783953d45747a155079117e1783a6bc5622cf246b48acd35ec89fb08.py	PCA	PCA(n_components=6)	152	6	152	25	9158965443457361398	PCA(n_components=6).fit(good_data)	152	6	152	40	-924187841339703127
/cb-target/python/63/cf/c183783953d45747a155079117e1783a6bc5622cf246b48acd35ec89fb08.py	DecisionTreeRegressor	DecisionTreeRegressor(random_state=0)	70	16	70	53	4219558719064113738	regressor.fit(X_train, y_train)	71	4	71	35	-1338458777464691613
/cb-target/python/63/cf/c183783953d45747a155079117e1783a6bc5622cf246b48acd35ec89fb08.py	GaussianMixture	GaussianMixture(n_components=num_clusters)	207	16	207	58	-1633715870440787754	GaussianMixture(n_components=num_clusters).fit(data)	207	16	207	68	-7587940464192102656
/cb-target/python/13/d6/6c5ef3c3740f73bc0933b388821ad73af9951d25b46214a0105888eceee5.py	OneClassSVM	svm.OneClassSVM(gamma=10, nu=0.01)	199	7	199	41	6028931026740923702	svm_.fit(sdata[person_features])	200	0	200	32	-2689824539610880373
/cb-target/python/de/95/e1b445f8bb6c81eb338a2a94cbaefa5a16407012c87237092c016ae3a283.py	PCA	decomposition.PCA(2)	129	6	129	26	-3815442789291785398	decomposition.PCA(2).fit(good_data)	129	6	129	41	7444195447300255648
/cb-target/python/de/95/e1b445f8bb6c81eb338a2a94cbaefa5a16407012c87237092c016ae3a283.py	PCA	decomposition.PCA(n_components=6)	112	6	112	39	4248519745175943465	pca.fit(good_data)	113	0	113	18	-6405509641840918157
/cb-target/python/de/95/e1b445f8bb6c81eb338a2a94cbaefa5a16407012c87237092c016ae3a283.py	DecisionTreeRegressor	tree.DecisionTreeRegressor(random_state=9)	51	12	51	54	7761187731135022720	regressor.fit(X_train,y_train)	52	0	52	30	-2486338203920799762
/cb-target/python/de/95/e1b445f8bb6c81eb338a2a94cbaefa5a16407012c87237092c016ae3a283.py	KMeans	cluster.KMeans(n_clusters)	162	16	162	42	4366005916637584152	clusterer.fit(reduced_data)	163	4	163	31	-5769089212791250411
/cb-target/python/de/95/e1b445f8bb6c81eb338a2a94cbaefa5a16407012c87237092c016ae3a283.py	KMeans	cluster.KMeans(n_clusters)	181	12	181	38	3038030649822011481	clusterer.fit(reduced_data)	182	0	182	27	3650335021581839549
/cb-target/python/1d/ca/48c49e709fe9134e28ba256c9cb7f34398f21fce273597e279767948ef08.py	LogisticRegression	LogisticRegression()	44	17	44	37	-8003906054891263460	"logistic_model.fit(chessDF[[""WhiteCastledMoveNum"",""BlackCastledMoveNum""]], chessDF[""WhiteWin""])"	45	0	45	95	3146252255165708415
/cb-target/python/1d/ca/48c49e709fe9134e28ba256c9cb7f34398f21fce273597e279767948ef08.py	DecisionTreeClassifier	DecisionTreeClassifier(random_state=1)	63	6	63	44	-4907914681586106816	"clf.fit(chessDF[[""WhiteCastledMoveNum"",""BlackCastledMoveNum""]],chessDF[""WhiteWin""])"	64	0	64	83	1105538622022683243
/cb-target/python/84/4f/4d006711ddc6ee79fc840d51abc8ff1d3a7151d202da94861046e7bd8544.py	LogisticRegression	LogisticRegression()	41	9	41	29	-3241535223431629027	logreg.fit(x_train, y_train)	42	0	42	28	2331802959344589523
/cb-target/python/22/54/ff4927750c5bf85cb9ef207ff12724a18a543499e2535677a069bb82953a.py	KNeighborsClassifier	KNeighborsClassifier(n_neighbors=2)	305	6	305	41	-8823511536275415073	knn.fit(X_train_std[:, k5], y_train)	333	0	333	36	-6201377378605281589
/cb-target/python/22/54/ff4927750c5bf85cb9ef207ff12724a18a543499e2535677a069bb82953a.py	KNeighborsClassifier	KNeighborsClassifier(n_neighbors=2)	305	6	305	41	-8823511536275415073	knn.fit(X_train_std, y_train)	329	0	329	29	4251918757167225881
/cb-target/python/22/54/ff4927750c5bf85cb9ef207ff12724a18a543499e2535677a069bb82953a.py	RandomForestClassifier	RandomForestClassifier(n_estimators=10000, random_state=0, n_jobs=-1)	348	9	348	78	1261879888471840976	forest.fit(X_train, y_train)	349	0	349	28	1958996032782454157
/cb-target/python/22/54/ff4927750c5bf85cb9ef207ff12724a18a543499e2535677a069bb82953a.py	LogisticRegression	LogisticRegression(penalty='l1', C=10**c, random_state=0)	210	9	210	66	1601232720701162444	lr.fit(X_train_std, y_train)	211	4	211	32	-3968166602201991523
/cb-target/python/22/54/ff4927750c5bf85cb9ef207ff12724a18a543499e2535677a069bb82953a.py	LogisticRegression	LogisticRegression(C=.1, penalty='l1')	178	5	178	43	8735854011597698974	lr.fit(X_train_std, y_train)	179	0	179	28	-3069548983809614747
/cb-target/python/22/54/ff4927750c5bf85cb9ef207ff12724a18a543499e2535677a069bb82953a.py	Imputer	Imputer(missing_values='NaN', strategy='mean', axis=0)	48	6	48	60	-5585696161830420656	imr.fit(df)	49	6	49	17	-6118953392027079179
/cb-target/python/56/d2/b9de3cc053e55755b7d496b206979613f07e672702e79577efa0eb50b2ff.py	KMeans	KMeans(n_clusters = 5,random_state=58)	150	6	150	44	455184079250473586	clf.fit(reduced)	151	0	151	16	-957980025039516823
/cb-target/python/56/d2/b9de3cc053e55755b7d496b206979613f07e672702e79577efa0eb50b2ff.py	KMeans	KMeans(n_clusters = num,n_init = 30)	135	11	135	47	2250787448029548753	clf0.fit(reduced)	136	4	136	21	-5432103095109287662
/cb-target/python/56/d2/b9de3cc053e55755b7d496b206979613f07e672702e79577efa0eb50b2ff.py	StandardScaler	StandardScaler()	94	9	94	25	-5399280447243434684	scaler.fit(ratingm)	101	0	101	19	-7973882942569057630
/cb-target/python/56/d2/b9de3cc053e55755b7d496b206979613f07e672702e79577efa0eb50b2ff.py	StandardScaler	StandardScaler()	302	10	302	26	5271290075552809273	scaler2.fit(rating123m)	307	0	307	23	4661995420037469563
/cb-target/python/3c/bf/c0122b878644c3968e5abd38e584cc2e63a9739396cb26463d0735557714.py	SVR	svm.SVR()	280	6	280	15	-3075128366616619930	svr.fit(X_train,y_train)	285	0	285	24	-6994948820350052801
/cb-target/python/3c/bf/c0122b878644c3968e5abd38e584cc2e63a9739396cb26463d0735557714.py	ExtraTreesRegressor	ExtraTreesRegressor(n_estimators=100, max_depth=None, min_samples_split=1, random_state=0)	236	8	236	98	6791881969617897456	etreg.fit(XX,y)	260	8	260	23	3638821653047160936
/cb-target/python/ea/ec/dff06018e147e82b44f9a7813e7767a9b2bc9cef2e6cc16a01c79880e5b3.py	RandomForestClassifier	RandomForestClassifier()	148	5	148	29	1680587738135934399	rf.fit(X_train, y_train)	163	0	163	24	-7245230558767422991
/cb-target/python/ea/ec/dff06018e147e82b44f9a7813e7767a9b2bc9cef2e6cc16a01c79880e5b3.py	RandomForestClassifier	RandomForestClassifier()	148	5	148	29	1680587738135934399	rf.fit(X_over, y_over)	151	0	151	22	5786181093731537752
/cb-target/python/ea/ec/dff06018e147e82b44f9a7813e7767a9b2bc9cef2e6cc16a01c79880e5b3.py	LogisticRegression	LogisticRegression()	147	7	147	27	-5305254729983650546	logr.fit(X_over, y_over)	150	0	150	24	-4836290119573241554
/cb-target/python/ea/ec/dff06018e147e82b44f9a7813e7767a9b2bc9cef2e6cc16a01c79880e5b3.py	LogisticRegression	LogisticRegression()	147	7	147	27	-5305254729983650546	logr.fit(X_train, y_train)	162	0	162	26	195817213588722434
/cb-target/python/22/f8/76dc32276cd44dcdf548b28e8398f3617c94a4f5cbd28887bd0b3621c1ee.py	SVR	svm.SVR()	96	10	96	19	650233111623987135	clf.fit(X, Y[name])	97	4	97	23	1731578278552288151
/cb-target/python/22/f8/76dc32276cd44dcdf548b28e8398f3617c94a4f5cbd28887bd0b3621c1ee.py	SVR	"svm.SVR(kernel = ""linear"", C = 1)"	59	6	59	39	4727782685420366914	"clf.fit(X_train, Y_train[""LMG7866""])"	84	0	84	36	-376699903906418273
/cb-target/python/4d/3d/4a4a7a9f5d01438b325ffac00fdd6f39aaf9d6833cb7eff0f708ef9c3a26.py	KMeans	KMeans(n_clusters=10)	529	9	529	30	4009123688194880789	kmeans.fit(reduced_data)	530	0	530	24	-2064424771650130489
/cb-target/python/4d/3d/4a4a7a9f5d01438b325ffac00fdd6f39aaf9d6833cb7eff0f708ef9c3a26.py	SVR	SVR(kernel='rbf', degree=1, gamma='auto', \\n       coef0=1, tol=0.1, C=4.5, epsilon=1,\\n       shrinking=True, cache_size=200, verbose=True, max_iter=-1)	184	3	186	65	-2354840795197328085	lm.fit(X_train,Y_train)	188	0	188	23	2814353363204393124
/cb-target/python/bb/d2/e9a8761cdcc790c712df845f2f170c7e63c3181fb9ed51f4b2a9b08671d4.py	LinearRegression	LinearRegression()	1009	8	1009	26	-7814859277254800174	model.fit(X_train, y_train)	1010	0	1010	27	7153029125410378124
/cb-target/python/bb/d2/e9a8761cdcc790c712df845f2f170c7e63c3181fb9ed51f4b2a9b08671d4.py	RandomForestClassifier	RandomForestClassifier(n_estimators=100, max_leaf_nodes=4)	964	5	964	63	-1550818043042860745	dt.fit(X_train, y_train)	965	0	965	24	9173016496378183754
/cb-target/python/bb/d2/e9a8761cdcc790c712df845f2f170c7e63c3181fb9ed51f4b2a9b08671d4.py	DecisionTreeClassifier	DecisionTreeClassifier(max_depth=i)	889	9	889	44	-6427186450442495774	dt.fit(X_train, y_train)	890	4	890	28	-6737025383868016252
/cb-target/python/bb/d2/e9a8761cdcc790c712df845f2f170c7e63c3181fb9ed51f4b2a9b08671d4.py	DecisionTreeClassifier	DecisionTreeClassifier(max_depth=5)	910	5	910	40	-4492965487913485665	dt.fit(X_train, y_train)	911	0	911	24	2985423256047545438
/cb-target/python/bb/d2/e9a8761cdcc790c712df845f2f170c7e63c3181fb9ed51f4b2a9b08671d4.py	KMeans	KMeans(n_clusters=n_clusters)	643	8	643	37	-2847022668630652849	model.fit(X)	644	9	644	21	-5531825934857330077
/cb-target/python/7f/78/0894c881ed9d023f51f5059211d70bba89401395109360098221b60ed167.py	NearestNeighbors	NearestNeighbors(n_neighbors=1)	104	8	104	39	-5173465843155623643	NearestNeighbors(n_neighbors=1).fit(nn_train[['Total phenols', 'OD280/OD315']])	104	8	104	87	5675870272571661955
/cb-target/python/89/be/637233519b436929be0cc78a63369e124549ebd3c916b3740f637a2df47e.py	SVC	SVC()	149	6	149	11	-1356367098285659632	clf.fit(X_train, y_train)	150	0	150	25	-2429297124745141113
/cb-target/python/89/be/637233519b436929be0cc78a63369e124549ebd3c916b3740f637a2df47e.py	ExtraTreesClassifier	ExtraTreesClassifier(n_estimators=1000)	108	6	108	45	-8682416919050303593	clf.fit(X_train, y_train)	109	6	109	31	-7091206237435486432
/cb-target/python/89/be/637233519b436929be0cc78a63369e124549ebd3c916b3740f637a2df47e.py	LabelEncoder	preprocessing.LabelEncoder()	69	5	69	33	1110925996395509369	le.fit(df_new.UpDown)	71	16	71	37	3954197104356864670
/cb-target/python/89/be/637233519b436929be0cc78a63369e124549ebd3c916b3740f637a2df47e.py	LinearSVC	LinearSVC()	125	6	125	17	-4983766532102456339	clf.fit(X_train, y_train)	126	0	126	25	-6391764116468450000
/cb-target/python/db/f0/4730571aa0a77e5d0f60beaf580145511f53dfb2c55d6780f7f9f4f1a7e9.py	LinearRegression	linear_model.LinearRegression()	54	6	54	37	-3300545733582712966	clf.fit( X , Y )	57	7	57	23	1929707333983394723
/cb-target/python/db/f0/4730571aa0a77e5d0f60beaf580145511f53dfb2c55d6780f7f9f4f1a7e9.py	LinearRegression	linear_model.LinearRegression()	196	14	196	45	-763097403232720935	clf.fit( X , Y )	199	15	199	31	722771636056632870
/cb-target/python/a2/5f/617730b1bb7ffe580c4c228c31d73e966bfa837e57149165047b5546c26c.py	KMeans	KMeans(n_clusters=5,n_init=100)	185	4	185	35	-2663396178052215599	est.fit(mydata)	186	0	186	15	-2351262355849819797
/cb-target/python/a2/5f/617730b1bb7ffe580c4c228c31d73e966bfa837e57149165047b5546c26c.py	KMeans	KMeans(n_clusters=4,n_init=100)	173	4	173	35	-902779522760153844	est.fit(mydata)	174	0	174	15	-4429533826678038869
/cb-target/python/a2/5f/617730b1bb7ffe580c4c228c31d73e966bfa837e57149165047b5546c26c.py	KMeans	KMeans(n_clusters=2,n_init=100)	149	4	149	35	5359832127425641416	est.fit(mydata)	150	0	150	15	818224215805413009
/cb-target/python/a2/5f/617730b1bb7ffe580c4c228c31d73e966bfa837e57149165047b5546c26c.py	KMeans	KMeans(n_clusters=3,n_init=100)	161	4	161	35	6900707489412789863	est.fit(mydata)	162	0	162	15	-1895011127668076164
/cb-target/python/a2/5f/617730b1bb7ffe580c4c228c31d73e966bfa837e57149165047b5546c26c.py	AgglomerativeClustering	AgglomerativeClustering(n_clusters=5)	252	4	252	41	-6305390680346197385	est.fit(mydata)	253	0	253	15	5376705233453632818
/cb-target/python/7c/53/2ebed8698113bf65df87dd56013003a8bc028f216c111fd2277cf0e01d19.py	LogisticRegression	LogisticRegression(C = 0.0000000001, solver = 'lbfgs', class_weight='balanced')	231	6	231	85	-5536758681665477936	alg.fit(train[predictors], train['clicked'])	232	0	232	44	-7235135340118430048
/cb-target/python/7c/53/2ebed8698113bf65df87dd56013003a8bc028f216c111fd2277cf0e01d19.py	LogisticRegression	LogisticRegression(C = 0.0000000001, solver = 'lbfgs')	220	38	220	92	7037333266488799289	alg.fit(train[predictors], train['clicked'])	221	32	221	76	-5047885852109028488
/cb-target/python/7c/53/2ebed8698113bf65df87dd56013003a8bc028f216c111fd2277cf0e01d19.py	GridSearchCV	GridSearchCV(alg, log_params, n_jobs=4, verbose=0)	193	11	193	61	-8160864234193992079	grid_log.fit(train[predictors], train['clicked'])	194	0	194	49	-2734383033516905457
/cb-target/python/9c/a8/2930472e1a26b76044380b136c3ee443e0b1a4dcf1c32b4c0472a3bba4d4.py	RandomForestClassifier	RandomForestClassifier(n_estimators = 100)	78	9	78	51	1890625149043259619	"forest.fit( train_data_features, train[""sentiment""])"	80	9	80	61	-7300481421182572185
/cb-target/python/37/22/9f42f1b6b5f4aaaef5a76616673a70dcbe3e6adae1aab0eec3153b8fd04f.py	RandomForestClassifier	RandomForestClassifier(n_estimators=idx + 1)	95	14	95	58	-8074016150759305135	classifier.fit(X_train,Y_train)	96	14	96	45	7764168433172813681
/cb-target/python/37/22/9f42f1b6b5f4aaaef5a76616673a70dcbe3e6adae1aab0eec3153b8fd04f.py	RandomForestClassifier	RandomForestClassifier(n_estimators=25)	56	11	56	50	4303874670664823766	classifier.fit(X_train,Y_train)	57	11	57	42	-3451439822127112218
/cb-target/python/37/22/9f42f1b6b5f4aaaef5a76616673a70dcbe3e6adae1aab0eec3153b8fd04f.py	ExtraTreesClassifier	ExtraTreesClassifier()	78	8	78	30	-3381255940440079581	model.fit(X_train,Y_train)	79	0	79	26	6863743966965769418
/cb-target/python/b9/12/96474bd6e660984fa1d62e92f61c3f3e44fb81a4ccbba57c340a68ff92ad.py	GradientBoostingClassifier	GradientBoostingClassifier()	303	6	303	34	7012551361032163179	clf.fit(X_train.toarray(), y_train)	304	0	304	35	-4212205973158133460
/cb-target/python/b9/12/96474bd6e660984fa1d62e92f61c3f3e44fb81a4ccbba57c340a68ff92ad.py	GradientBoostingClassifier	GradientBoostingClassifier(n_estimators=c, loss='exponential')	276	10	276	72	-328188045880203070	clf.fit(X, y)	277	4	277	17	2950507963329198963
/cb-target/python/b9/12/96474bd6e660984fa1d62e92f61c3f3e44fb81a4ccbba57c340a68ff92ad.py	GradientBoostingClassifier	GradientBoostingClassifier(loss='exponential')	296	6	296	52	7673872388425494695	clf.fit(X_train.toarray(), y_train)	297	0	297	35	-1332890769965432568
/cb-target/python/b9/12/96474bd6e660984fa1d62e92f61c3f3e44fb81a4ccbba57c340a68ff92ad.py	RandomForestClassifier	RandomForestClassifier()	310	6	310	30	721590743018053108	clf.fit(X_train.toarray(), y_train)	311	0	311	35	4327927558413797604
/cb-target/python/b9/12/96474bd6e660984fa1d62e92f61c3f3e44fb81a4ccbba57c340a68ff92ad.py	RandomForestClassifier	RandomForestClassifier(min_samples_split=2)	314	6	314	49	-3470499158757096421	clf.fit(X_train.toarray(), y_train)	315	0	315	35	-2435577528536007195
/cb-target/python/b9/12/96474bd6e660984fa1d62e92f61c3f3e44fb81a4ccbba57c340a68ff92ad.py	RandomForestClassifier	RandomForestClassifier(min_samples_split=3)	318	6	318	49	-661848295969358592	clf.fit(X_train.toarray(), y_train)	319	0	319	35	-8537613260969164277
/cb-target/python/b9/12/96474bd6e660984fa1d62e92f61c3f3e44fb81a4ccbba57c340a68ff92ad.py	RandomForestClassifier	RandomForestClassifier(min_samples_split=4)	322	6	322	49	8576280174845496215	clf.fit(X_train.toarray(), y_train)	323	0	323	35	-6102993604022632902
/cb-target/python/18/4e/74bb13f5278cc5006ffe07a780b699c899e669123549df0c378be0910b67.py	KMeans	KMeans(n_clusters=num_clusters)	168	9	168	40	2163071588545475783	kmeans.fit(point_guards[['ppg', 'atr']])	169	0	169	40	7606923111551933969
/cb-target/python/40/2a/aa947a36980e9d293a314b27ba2899b6230103e84347394da92e9a43a71b.py	LinearRegression	linear_model.LinearRegression()	322	13	322	44	-9049137174188276360	linear_model.LinearRegression().fit(X_train[3000:4000], Y_train[3000:4000])	322	13	322	88	7432319670863487203
/cb-target/python/40/2a/aa947a36980e9d293a314b27ba2899b6230103e84347394da92e9a43a71b.py	LinearRegression	linear_model.LinearRegression()	540	13	540	44	-3998491396412543041	linear_model.LinearRegression().fit(X_train_for_regr, Y_train)	540	13	540	75	6843912095712830413
/cb-target/python/40/2a/aa947a36980e9d293a314b27ba2899b6230103e84347394da92e9a43a71b.py	RidgeCV	linear_model.RidgeCV(cv=5)	354	14	354	40	-5974360472621642062	Ridge_model.fit(X_train[3000:4000], Y_train[3000:4000])	355	0	355	55	-3424589380786769367
/cb-target/python/40/2a/aa947a36980e9d293a314b27ba2899b6230103e84347394da92e9a43a71b.py	LassoCV	linear_model.LassoCV(cv=5, n_alphas=10, n_jobs=2, max_iter=200000)	340	14	340	80	-5230590626905678271	Lasso_model.fit(X_train[3000:4000], Y_train[3000:4000])	341	0	341	55	664518431321024201
/cb-target/python/44/55/01a2bacec3221361ec017f08c7ae19fc935c804b2ccd6038f047f367ac86.py	GradientBoostingClassifier	GradientBoostingClassifier()	323	7	323	35	1219089663010909893	clf3.fit(X, y)	328	0	328	14	5642700413967707384
/cb-target/python/44/55/01a2bacec3221361ec017f08c7ae19fc935c804b2ccd6038f047f367ac86.py	RandomForestClassifier	RandomForestClassifier()	322	7	322	31	8636523701109026140	clf2.fit(X, y)	327	0	327	14	-2017754297311453786
/cb-target/python/44/55/01a2bacec3221361ec017f08c7ae19fc935c804b2ccd6038f047f367ac86.py	DecisionTreeClassifier	DecisionTreeClassifier()	321	7	321	31	-7443438977877223944	clf1.fit(X, y)	326	0	326	14	-3153429278138801040
/cb-target/python/44/55/01a2bacec3221361ec017f08c7ae19fc935c804b2ccd6038f047f367ac86.py	GridSearchCV	grid_search.GridSearchCV(DecisionTreeClassifier(), parameters, cv=10, n_jobs=-1)	215	9	215	89	-8373400627650328787	"dtgscv.fit(titanic[predictors], titanic[""Survived""])"	216	0	216	52	-7898751696677042884
/cb-target/python/44/55/01a2bacec3221361ec017f08c7ae19fc935c804b2ccd6038f047f367ac86.py	GridSearchCV	grid_search.GridSearchCV(RandomForestClassifier(), parameters, cv=10, n_jobs=-1)	242	11	242	91	-4244278131585631436	"rff_gscv.fit(titanic[predictors], titanic[""Survived""])"	243	0	243	54	-4557203209851237096
/cb-target/python/44/55/01a2bacec3221361ec017f08c7ae19fc935c804b2ccd6038f047f367ac86.py	GridSearchCV	grid_search.GridSearchCV(GradientBoostingClassifier(), parameters, cv=3, n_jobs = -1)	270	11	270	96	-3365552627238831244	"gbc_gscv.fit(titanic[predictors], titanic[""Survived""])"	271	0	271	54	-4424855617496060712
/cb-target/python/44/55/01a2bacec3221361ec017f08c7ae19fc935c804b2ccd6038f047f367ac86.py	SelectKBest	SelectKBest(f_classif, k=5)	119	11	119	38	-7851722469727450664	"selector.fit(titanic[predictors], titanic[""Survived""])"	120	0	120	54	-3345167763302614450
/cb-target/python/01/3c/24198f64fecf8baf2b7f7f1757889776d7efcf7abb610a212248d0c0f839.py	LinearRegression	LinearRegression()	329	9	329	27	5874068967903084851	lr_reg.fit(X_cat_train, y_cat_train)	334	0	334	36	9112816756643850557
/cb-target/python/01/3c/24198f64fecf8baf2b7f7f1757889776d7efcf7abb610a212248d0c0f839.py	GradientBoostingRegressor	GradientBoostingRegressor(n_estimators=10, verbose=2)	545	9	545	62	4962330524153333034	gb_reg.fit(X_cat_train, y_cat_train)	546	0	546	36	4790668076868158375
/cb-target/python/01/3c/24198f64fecf8baf2b7f7f1757889776d7efcf7abb610a212248d0c0f839.py	RandomForestRegressor	RandomForestRegressor(n_estimators=10, verbose=2)	521	9	521	58	-7647866281605477745	rf_reg.fit(X_cat_train, y_cat_train)	522	0	522	36	1925490636496404473
/cb-target/python/01/3c/24198f64fecf8baf2b7f7f1757889776d7efcf7abb610a212248d0c0f839.py	SGDRegressor	SGDRegressor(verbose=2)	367	10	367	33	513795263366733425	sgd_reg.fit(X_cat_train, y_cat_train)	372	0	372	37	-8845556413778023681
/cb-target/python/01/3c/24198f64fecf8baf2b7f7f1757889776d7efcf7abb610a212248d0c0f839.py	RidgeCV	RidgeCV()	404	10	404	19	3246358278872153008	rcv_reg.fit(X_cat_train, y_cat_train)	405	0	405	37	-3871557953740580715
/cb-target/python/01/3c/24198f64fecf8baf2b7f7f1757889776d7efcf7abb610a212248d0c0f839.py	ExtraTreesRegressor	ExtraTreesRegressor(n_estimators=10, verbose=2)	533	9	533	56	803550142522671324	xt_reg.fit(X_cat_train, y_cat_train)	534	0	534	36	8185659498705836609
/cb-target/python/01/3c/24198f64fecf8baf2b7f7f1757889776d7efcf7abb610a212248d0c0f839.py	LinearSVR	LinearSVR(verbose=2)	392	11	392	31	6631375045870310290	lsvr_reg.fit(X_cat_train, y_cat_train)	393	0	393	38	3624723943036532900
/cb-target/python/01/3c/24198f64fecf8baf2b7f7f1757889776d7efcf7abb610a212248d0c0f839.py	LassoLars	LassoLars()	416	9	416	20	4552379062744410861	ll_reg.fit(X_cat_train, y_cat_train)	417	0	417	36	4547596070593793684
/cb-target/python/16/53/46c4da492c233296200b8a6d1e4f57aa181a7d6092344b83cd67ab1dfd09.py	TfidfVectorizer	TfidfVectorizer(ngram_range=(1,2), min_df=2,stop_words=stops,max_features=2000)	49	11	49	90	6909106878700085082	tfv_orig.fit(\n    list(train_df['question1'].values) +\n    list(test_df['question1'].values)+\n    list(train_df['question2'].values) +\n    list(test_df['question2'].values)\n)	55	0	60	1	-2102253058135586887
/cb-target/python/16/53/46c4da492c233296200b8a6d1e4f57aa181a7d6092344b83cd67ab1dfd09.py	TfidfVectorizer	TfidfVectorizer(ngram_range=(1,2), min_df=2,stop_words=stops,max_features=2000)	50	11	50	90	8645531901126088333	tfv_stem.fit(\n    list(train_df['question1_porter'].values) +\n    list(test_df['question1_porter'].values)+\n    list(train_df['question2_porter'].values) +\n    list(test_df['question2_porter'].values)\n)	61	0	66	1	7941427238431909151
/cb-target/python/46/9c/314208305ec5fd189b09b16ae4fe76562a656ec17e70cb21d694b2232060.py	MultinomialNB	MultinomialNB()	92	6	92	21	8726094500545768345	mdl.fit(X_train_dtm, y_train)	93	0	93	29	1541964968186639317
/cb-target/python/94/0e/5fc77c05ebe92add355e9e1a8989ce67cc1108588cc83d26e24c573291ed.py	AgglomerativeClustering	AgglomerativeClustering(n_clusters=k, affinity='euclidean', linkage='ward')	62	14	62	89	-830961612201249208	Hclustering.fit(X)	63	0	63	18	-8403590835062086327
/cb-target/python/94/0e/5fc77c05ebe92add355e9e1a8989ce67cc1108588cc83d26e24c573291ed.py	AgglomerativeClustering	AgglomerativeClustering(n_clusters=k, affinity='euclidean', linkage='average')	78	14	78	92	-192535969264925720	Hclustering.fit(X)	79	0	79	18	2183848112674356951
/cb-target/python/94/0e/5fc77c05ebe92add355e9e1a8989ce67cc1108588cc83d26e24c573291ed.py	AgglomerativeClustering	AgglomerativeClustering(n_clusters=k, affinity='manhattan', linkage='average')	86	14	86	92	4337271115259006575	Hclustering.fit(X)	87	0	87	18	2813046268912705406
/cb-target/python/94/0e/5fc77c05ebe92add355e9e1a8989ce67cc1108588cc83d26e24c573291ed.py	AgglomerativeClustering	AgglomerativeClustering(n_clusters=k, affinity='euclidean', linkage='complete')	70	14	70	93	7505523946012912122	Hclustering.fit(X)	71	0	71	18	2603269676147162504
/cb-target/python/6c/40/6cc725a119f5a503dfcd5982e64c5d3ed537c6682584d6983f3bb0717c41.py	LabelEncoder	LabelEncoder()	768	19	768	33	-2195916366075907851	LabelEncoder().fit(train.patient_state.values)	768	19	768	65	253934162480524808
/cb-target/python/6c/40/6cc725a119f5a503dfcd5982e64c5d3ed537c6682584d6983f3bb0717c41.py	LabelEncoder	LabelEncoder()	769	19	769	33	83848056486924065	LabelEncoder().fit(train.ethinicity.values)	769	19	769	62	3466320463938879593
/cb-target/python/6c/40/6cc725a119f5a503dfcd5982e64c5d3ed537c6682584d6983f3bb0717c41.py	LabelEncoder	LabelEncoder()	770	21	770	35	6667107535375324967	LabelEncoder().fit(train.education_level.values)	770	21	770	69	391420984488610861
/cb-target/python/dd/59/a2cc6def22063bbc648bdc420d25eac057c701f79c9d353edd22668cdc17.py	RandomForestClassifier	RandomForestClassifier(n_estimators=10000,\n                                random_state=0,\n                                n_jobs=-1)	318	9	320	42	-4745577274934109650	forest.fit(X_train, y_train)	322	0	322	28	-4379634859477568096
/cb-target/python/dd/59/a2cc6def22063bbc648bdc420d25eac057c701f79c9d353edd22668cdc17.py	LogisticRegression	LogisticRegression(penalty='l1', C=10**c, random_state=0)	196	9	196	66	-1200491827418732590	lr.fit(X_train_std, y_train)	197	4	197	32	3101957820304773974
/cb-target/python/dd/59/a2cc6def22063bbc648bdc420d25eac057c701f79c9d353edd22668cdc17.py	LogisticRegression	LogisticRegression(penalty='l1', C=0.1)	174	5	174	44	3138337908780413266	lr.fit(X_train_std, y_train)	175	0	175	28	8106032587970208884
/cb-target/python/dd/59/a2cc6def22063bbc648bdc420d25eac057c701f79c9d353edd22668cdc17.py	Imputer	Imputer(missing_values='NaN', strategy='mean', axis=0)	56	6	56	60	-706849938806158672	imr.fit(df)	57	6	57	17	604667662211098060
/cb-target/python/1a/ce/45df1b107f59c1e98b53fc79ceb3e4ce7efa929ade5b98c061147039f9c6.py	AgglomerativeClustering	AgglomerativeClustering(3)	90	6	90	32	-8011568488545863280	clf.fit(X)	91	0	91	10	-324387051585389351
/cb-target/python/1a/ce/45df1b107f59c1e98b53fc79ceb3e4ce7efa929ade5b98c061147039f9c6.py	AgglomerativeClustering	AgglomerativeClustering(n_clusters=13, affinity='cosine', linkage='complete')	47	8	47	85	-5060763749792032685	AgglomerativeClustering(n_clusters=13, affinity='cosine', linkage='complete').fit(termMx)	47	8	47	97	1332671296995622447
/cb-target/python/1a/ce/45df1b107f59c1e98b53fc79ceb3e4ce7efa929ade5b98c061147039f9c6.py	AgglomerativeClustering	AgglomerativeClustering(linkage=linkage,\n                                            connectivity=connectivity,\n                                            n_clusters=n_clusters)	152	20	154	66	244847192497444475	model.fit(X)	156	12	156	24	-5023173336099319366
/cb-target/python/f9/a6/78f4b4fc4f06d70b6ee87065f41c620ee80a54f58f33e7d68675080e09f0.py	GridSearchCV	GridSearchCV(svm.SVC(), param_grid, scoring = f1_scorer, n_jobs = -1, cv = 3)	183	6	183	83	-98880724508536413	clf.fit(X_train,y_train)	184	0	184	24	2703734041046157372
/cb-target/python/57/4d/53e9f7b21cb324d7b0ccf0b3c510835fce99d8ad7e8d3fcebaa71533142f.py	GMM	mixture.GMM(n_components=n_components, covariance_type=cv_type)	137	14	137	77	-5548620553065330333	gmm.fit(seeds_data)	138	8	138	27	-2195239576042156110
/cb-target/python/57/4d/53e9f7b21cb324d7b0ccf0b3c510835fce99d8ad7e8d3fcebaa71533142f.py	GMM	"mixture.GMM(n_components = 3, covariance_type=""tied"")"	370	6	370	59	-3253686173572393705	gmm.fit(fitted_data_pca)	372	0	372	24	-380482220593629702
/cb-target/python/57/4d/53e9f7b21cb324d7b0ccf0b3c510835fce99d8ad7e8d3fcebaa71533142f.py	GMM	"mixture.GMM(n_components = 3, covariance_type=""tied"")"	370	6	370	59	-3253686173572393705	gmm.fit(fitted_data_tb)	414	0	414	23	-208857866756568798
/cb-target/python/57/4d/53e9f7b21cb324d7b0ccf0b3c510835fce99d8ad7e8d3fcebaa71533142f.py	GMM	"mixture.GMM(n_components = 3, covariance_type=""tied"")"	370	6	370	59	-3253686173572393705	gmm.fit(fitted_data_ica)	393	0	393	24	8607201487959244612
/cb-target/python/57/4d/53e9f7b21cb324d7b0ccf0b3c510835fce99d8ad7e8d3fcebaa71533142f.py	GMM	mixture.GMM(n_components=3, covariance_type='tied')	103	6	103	57	-1939517665799829337	gmm.fit(seeds_data)	104	0	104	19	-987898615121968565
/cb-target/python/57/4d/53e9f7b21cb324d7b0ccf0b3c510835fce99d8ad7e8d3fcebaa71533142f.py	PCA	PCA(n_components = 2)	172	6	172	27	7172551538942033153	pca.fit(seeds_data)	173	0	173	19	-1274800199533793308
/cb-target/python/57/4d/53e9f7b21cb324d7b0ccf0b3c510835fce99d8ad7e8d3fcebaa71533142f.py	PCA	PCA(n_components = 7)	181	6	181	27	-1489061914257756001	pca.fit(seeds_data)	182	0	182	19	-5573595180168459301
/cb-target/python/57/4d/53e9f7b21cb324d7b0ccf0b3c510835fce99d8ad7e8d3fcebaa71533142f.py	KMeans	KMeans(n_clusters=3, random_state=1)	64	15	64	51	-5142908354457681054	kmeans_model.fit(seeds_data)	65	0	65	28	7266408604408062925
/cb-target/python/57/4d/53e9f7b21cb324d7b0ccf0b3c510835fce99d8ad7e8d3fcebaa71533142f.py	KMeans	KMeans(n_clusters=3, random_state=1)	64	15	64	51	-5142908354457681054	kmeans_model.fit(fitted_data_ica)	324	0	324	33	-5018433337163451913
/cb-target/python/57/4d/53e9f7b21cb324d7b0ccf0b3c510835fce99d8ad7e8d3fcebaa71533142f.py	KMeans	KMeans(n_clusters=3, random_state=1)	64	15	64	51	-5142908354457681054	kmeans_model.fit(fitted_data_tb)	348	0	348	32	3006325886944583596
/cb-target/python/57/4d/53e9f7b21cb324d7b0ccf0b3c510835fce99d8ad7e8d3fcebaa71533142f.py	KMeans	KMeans(n_clusters=3, random_state=1)	64	15	64	51	-5142908354457681054	kmeans_model.fit(fitted_data_pca)	299	0	299	33	6492490662564773268
/cb-target/python/57/4d/53e9f7b21cb324d7b0ccf0b3c510835fce99d8ad7e8d3fcebaa71533142f.py	KMeans	KMeans(n_clusters=i, random_state=1)	50	19	50	55	1168070009065183575	kmeans_model.fit(seeds_data)	51	4	51	32	-9210162627465484109
/cb-target/python/57/4d/53e9f7b21cb324d7b0ccf0b3c510835fce99d8ad7e8d3fcebaa71533142f.py	ExtraTreesClassifier	ExtraTreesClassifier()	288	6	288	28	-8157920560766850003	clf.fit(seeds_data, seeds_target)	289	6	289	39	-2469799528238897420
/cb-target/python/57/4d/53e9f7b21cb324d7b0ccf0b3c510835fce99d8ad7e8d3fcebaa71533142f.py	FastICA	FastICA(n_components = 3, whiten = True)	206	6	206	46	-4020458987802529584	ica.fit(seeds_data)	207	0	207	19	-2979139364105924578
/cb-target/python/57/4d/53e9f7b21cb324d7b0ccf0b3c510835fce99d8ad7e8d3fcebaa71533142f.py	FastICA	FastICA(n_components = None, whiten = True)	213	6	213	49	365295936960873695	ica.fit(seeds_data)	214	0	214	19	-4655328638849121844
/cb-target/python/a2/6b/c9055d1b17f883fd8a90be610339e7bdf216782e63c33794d9347845d06e.py	HashingVectorizer	HashingVectorizer(n_features=200)	79	5	79	38	-4951948752959520329	HashingVectorizer(n_features=200).fit(X_train['question1'] + X_train['question2'])	79	5	79	87	-1094948740091128319
/cb-target/python/2c/e9/efc73ed08a59238e4f1dd2e88c66e1f1ae6e7df47ba2364154136e1c9cb2.py	GridSearchCV	grid_search.GridSearchCV(estimator = clf, param_grid = param_grid, n_jobs = 1, cv = 2, verbose = 20, scoring=RMSE)	490	8	490	122	7445198831728725535	model.fit(X_train, y_train)	496	0	496	27	6632564997551624538
/cb-target/python/b1/b6/1630ee67a845f2c54b681463860a65c479a1f97ac64fc48153f6d5b8cdeb.py	LogisticRegression	LogisticRegression()	114	11	114	31	1939045596358321668	logmodel.fit(X_train,Y_train)	119	0	119	29	2428955750695295395
/cb-target/python/76/7d/e0ea8616f0fcf1d3b71223d1eb74ce883d3e35f06e6ff1bb082178203b62.py	CountVectorizer	CountVectorizer(min_df=0)	64	13	64	38	-2616102792511560932	vectorizer.fit(text)	67	0	67	20	-7875088333936915401
/cb-target/python/76/7d/e0ea8616f0fcf1d3b71223d1eb74ce883d3e35f06e6ff1bb082178203b62.py	MultinomialNB	MultinomialNB()	116	6	116	21	3591681675591359083	mnb.fit(X_train, y_train)	117	0	117	25	250276898039666852
/cb-target/python/76/7d/e0ea8616f0fcf1d3b71223d1eb74ce883d3e35f06e6ff1bb082178203b62.py	MultinomialNB	MultinomialNB()	353	12	353	27	5562502495589542922	NBM_2.fit(Xtrain, ytrain)	354	4	354	29	-8859135305098265431
/cb-target/python/76/7d/e0ea8616f0fcf1d3b71223d1eb74ce883d3e35f06e6ff1bb082178203b62.py	MultinomialNB	MultinomialNB()	371	12	371	27	477545177588276993	NBM_3.fit(Xtrain, ytrain)	372	4	372	29	1519859485107981314
/cb-target/python/76/7d/e0ea8616f0fcf1d3b71223d1eb74ce883d3e35f06e6ff1bb082178203b62.py	MultinomialNB	MultinomialNB(alpha=alpha)	234	13	234	39	-7565446397346103239	NBthis.fit(Xtrainthis, ytrainthis)	235	4	235	38	2083282669410360147
/cb-target/python/76/7d/e0ea8616f0fcf1d3b71223d1eb74ce883d3e35f06e6ff1bb082178203b62.py	MultinomialNB	MultinomialNB(alpha=best_alpha)	256	6	256	37	1821112235858636447	MultinomialNB(alpha=best_alpha).fit(xtrain, ytrain)	256	6	256	57	-2725514400624593300
/cb-target/python/00/0e/2236ac5d91a5133053ed057fa635b81c8fd719786c678566e350cb60687d.py	RandomForestClassifier	RandomForestClassifier(n_estimators=100, random_state = 1)	108	5	108	63	2800968939975010279	rf.fit(X_train, y_train)	109	0	109	24	-3779101952794079610
/cb-target/python/00/0e/2236ac5d91a5133053ed057fa635b81c8fd719786c678566e350cb60687d.py	RandomForestClassifier	RandomForestClassifier(n_estimators=100, random_state = 1)	108	5	108	63	2800968939975010279	rf.fit(X_train, y_train)	130	12	130	36	6566685078891515336
/cb-target/python/00/0e/2236ac5d91a5133053ed057fa635b81c8fd719786c678566e350cb60687d.py	MultinomialNB	MultinomialNB(alpha = 3)	65	6	65	30	2355715067438874601	nbm.fit(X_train, y_train)	66	0	66	25	2856440693929171045
/cb-target/python/00/0e/2236ac5d91a5133053ed057fa635b81c8fd719786c678566e350cb60687d.py	MultinomialNB	MultinomialNB(alpha = 3)	65	6	65	30	2355715067438874601	nbm.fit(X_train, y_train)	87	13	87	38	-4917505692109880046
/cb-target/python/85/76/939f80dc2efaf8c813de6c6364929382f082b0510d66bcba942c8458febf.py	LinearRegression	LinearRegression()	44	6	44	24	5058308075303040096	alg.fit(train_predictors, train_target)	52	4	52	43	5513897090934254075
/cb-target/python/85/76/939f80dc2efaf8c813de6c6364929382f082b0510d66bcba942c8458febf.py	RandomForestClassifier	RandomForestClassifier(random_state=1, n_estimators=150, min_samples_split=8, min_samples_leaf=4)	241	6	241	103	-1612198284230811266	"alg.fit(training_df[predictors], training_df[""Survived""])"	414	4	414	61	-8983480674046290892
/cb-target/python/85/76/939f80dc2efaf8c813de6c6364929382f082b0510d66bcba942c8458febf.py	RandomForestClassifier	RandomForestClassifier(random_state=1, n_estimators=150, min_samples_split=8, min_samples_leaf=4)	241	6	241	103	-1612198284230811266	alg.fit(titanic[predictors].iloc[train,:], train_target)	269	8	269	64	6382509723456796974
/cb-target/python/85/76/939f80dc2efaf8c813de6c6364929382f082b0510d66bcba942c8458febf.py	SelectKBest	SelectKBest(f_classif, k=5)	227	11	227	38	759376400344615432	"selector.fit(titanic[predictors], titanic[""Survived""])"	228	0	228	54	-4964636696206220162
/cb-target/python/4b/c9/6dbc3088c97aa40250fb0e5c07f6e8bffaf7372a3c59f7705c6994a40166.py	RandomForestClassifier	RandomForestClassifier(n_estimators=10)	234	6	234	45	6051218402708476197	clf.fit(X_train, y_train)	257	15	257	40	8759638305816764816
/cb-target/python/4b/c9/6dbc3088c97aa40250fb0e5c07f6e8bffaf7372a3c59f7705c6994a40166.py	DecisionTreeClassifier	tree.DecisionTreeClassifier()	273	8	273	37	-186337034493154638	model.fit(X_train,y_train)	274	0	274	26	6713549644456284576
/cb-target/python/4b/c9/6dbc3088c97aa40250fb0e5c07f6e8bffaf7372a3c59f7705c6994a40166.py	GridSearchCV	GridSearchCV(clf, parameters, scoring = scorer)	247	11	247	58	-3240506327719766276	grid_obj.fit(X_train,y_train)	250	11	250	40	-6664929310093249789
/cb-target/python/ef/53/e93f4fdf4b58731fb3f1de0d04aea135535fd6c9da16d13371b1173f6250.py	LogisticRegression	linear_model.LogisticRegression()	56	19	56	52	7456805698660586651	binary_log_model.fit(X_train_binary, Y_train)	57	0	57	45	-493826024073899555
/cb-target/python/ef/53/e93f4fdf4b58731fb3f1de0d04aea135535fd6c9da16d13371b1173f6250.py	LogisticRegression	linear_model.LogisticRegression()	63	18	63	51	5359698094279465857	tfidf_log_model.fit(X_train_tfidf, Y_train)	64	0	64	43	-8828776404014032400
/cb-target/python/ef/53/e93f4fdf4b58731fb3f1de0d04aea135535fd6c9da16d13371b1173f6250.py	BernoulliNB	naive_bayes.BernoulliNB()	70	19	70	44	2612663386503397553	binary_bnb_model.fit(X_train_binary, Y_train)	71	0	71	45	-3217862257362113621
/cb-target/python/ef/53/e93f4fdf4b58731fb3f1de0d04aea135535fd6c9da16d13371b1173f6250.py	BernoulliNB	naive_bayes.BernoulliNB()	77	18	77	43	-5288661925820195758	tfidf_bnb_model.fit(X_train_tfidf, Y_train)	78	0	78	43	-3240898166645276617
/cb-target/python/ef/53/e93f4fdf4b58731fb3f1de0d04aea135535fd6c9da16d13371b1173f6250.py	CountVectorizer	CountVectorizer(analyzer='word', binary=True, ngram_range=(1,2), stop_words='english')	29	20	29	106	279788032680343016	binary_vectorizer.fit(X_train)	30	0	30	30	8598906367487595055
/cb-target/python/ef/53/e93f4fdf4b58731fb3f1de0d04aea135535fd6c9da16d13371b1173f6250.py	TfidfVectorizer	TfidfVectorizer(analyzer='word', ngram_range=(1,2), stop_words='english')	37	19	37	92	995675380408675849	tfidf_vectorizer.fit(X_train)	38	0	38	29	4529079911903881577
/cb-target/python/27/a9/5782c3583e987d51e889fbc272246a19113d80b3c847635a5e97d3d6a9f3.py	RandomForestClassifier	RandomForestClassifier()	70	6	70	30	4119900001131262344	rfc.fit(train, df_train['Category'])	71	0	71	36	-8072984284919069485
/cb-target/python/27/a9/5782c3583e987d51e889fbc272246a19113d80b3c847635a5e97d3d6a9f3.py	GridSearchCV	GridSearchCV(xgbc, param_grid, cv=5, n_jobs=1, scoring='neg_log_loss')	100	7	100	77	-285079365452388507	grid.fit(train, df_train['Category'])	106	0	106	37	-8486298289001180765
/cb-target/python/42/3c/ff50315b9fe8525b125461b26676bd092ea2d62c95d253adf606c394088f.py	RandomForestClassifier	RandomForestClassifier(n_estimators = 5)	118	6	118	46	-3112799853926771343	RandomForestClassifier(n_estimators = 5).fit(pred_train,tar_train)	118	6	118	72	-7580523485322257159
/cb-target/python/42/3c/ff50315b9fe8525b125461b26676bd092ea2d62c95d253adf606c394088f.py	RandomForestClassifier	RandomForestClassifier(n_estimators = idx + 1)	168	10	168	56	803826258596481346	RandomForestClassifier(n_estimators = idx + 1).fit(pred_train, tar_train)	168	10	168	83	-5194422806553819613
/cb-target/python/42/3c/ff50315b9fe8525b125461b26676bd092ea2d62c95d253adf606c394088f.py	ExtraTreesClassifier	ExtraTreesClassifier()	151	6	151	28	-6024167105713250083	etc.fit(pred_train,tar_train)	152	0	152	29	1449385774666943638
/cb-target/python/d6/84/8369552577642dc3bd9a0c96b2069e79593e8902e0d06e002d7573493da0.py	GaussianNB	GaussianNB()	33	7	33	19	-8922236789130839653	clf2.fit(X_train, y_train)	34	0	34	26	5341809344564413876
/cb-target/python/d6/84/8369552577642dc3bd9a0c96b2069e79593e8902e0d06e002d7573493da0.py	DecisionTreeClassifier	DecisionTreeClassifier()	29	7	29	31	2535078084610037118	clf1.fit(X_train, y_train)	30	0	30	26	-226732448873101113
/cb-target/python/29/40/e802b7d8d532ec20ff01dcbecb844474d01ff7436baf8decb906b09a5494.py	SVC	svm.SVC()	223	10	223	19	4269625444956332471	glensvm.fit(X_scaled, Y)	254	0	254	24	-2564076714704972359
/cb-target/python/29/40/e802b7d8d532ec20ff01dcbecb844474d01ff7436baf8decb906b09a5494.py	RandomForestClassifier	RandomForestClassifier(n_estimators=800, n_jobs=3)	180	11	180	61	-7206480564757144044	RF_Class.fit(X, Y)	185	0	185	18	-2529540885325930808
/cb-target/python/29/40/e802b7d8d532ec20ff01dcbecb844474d01ff7436baf8decb906b09a5494.py	RandomizedSearchCV	RandomizedSearchCV(glensvm, param_dist, n_jobs=3, verbose=True)	234	13	234	76	-7848612561118193491	gRandSVMcv.fit(X_scaled, Y)	239	0	239	27	-1859584651124050855
/cb-target/python/0b/50/ec2b0070cd7e6a87aa8e7ae36bdd3be6aa9f72ca9a39e99033ee161ab989.py	LogisticRegression	LogisticRegression()	109	17	109	37	-704016070762140209	logistic_model.fit(X_train, y_train)	114	0	114	36	8233183715218294402
/cb-target/python/0b/50/ec2b0070cd7e6a87aa8e7ae36bdd3be6aa9f72ca9a39e99033ee161ab989.py	LogisticRegression	LogisticRegression()	161	17	161	37	-5193524688829252287	logistic_model.fit(X_train, y_train)	163	0	163	36	2541470834851074785
/cb-target/python/67/e7/c2cd5e558d134fce5ab1ca92ce081cf67c9ca7a58053867379a114a6f56d.py	LogisticRegression	LogisticRegression(C=100)	63	5	63	30	5083623088210721497	lr.fit(X_train, Y_train)	84	0	84	24	-774207908671198948
/cb-target/python/67/e7/c2cd5e558d134fce5ab1ca92ce081cf67c9ca7a58053867379a114a6f56d.py	LogisticRegression	LogisticRegression(C=100)	179	5	179	30	-3823965375461795739	lr.fit(X_train, Y_train)	194	0	194	24	-7305970006471786340
/cb-target/python/14/55/9739a3295af6b8c25607e27fd0ad27dda8934208d4df0636eb52deb3f1cc.py	SVC	SVC()	239	6	239	11	534275428576499037	model.fit(train[independent_variable],train[dependent_variable])	241	0	241	64	7040057720735252963
/cb-target/python/14/55/9739a3295af6b8c25607e27fd0ad27dda8934208d4df0636eb52deb3f1cc.py	LabelEncoder	LabelEncoder()	210	3	210	17	6026738545026472955	le.fit(train[var])	213	4	213	22	-5410732520282968750
/cb-target/python/14/55/9739a3295af6b8c25607e27fd0ad27dda8934208d4df0636eb52deb3f1cc.py	LabelEncoder	LabelEncoder()	210	3	210	17	6026738545026472955	le.fit(test[var])	217	4	217	21	2657132879229812928
/cb-target/python/70/c6/43cd9a6cbcf52448131192be30a5de7a88dd5d2422a0a15e1cf2246484f9.py	LinearRegression	LinearRegression(n_jobs=-1)	168	6	168	33	-2842984700295311868	clf.fit(X_train1, y_train1)	170	0	170	27	5655961037139493446
/cb-target/python/15/47/e6ba035e0888cf85397ae9ab61ff8e330301b58f3734a3aedf02831eb6ef.py	Pipeline	Pipeline([('vectorizer', TfidfVectorizer()), ('classifier', clf)])	41	6	41	72	-5688128097276236727	log.fit(x, y)	42	0	42	13	8442654893907319130
/cb-target/python/15/47/e6ba035e0888cf85397ae9ab61ff8e330301b58f3734a3aedf02831eb6ef.py	LogisticRegressionCV	LogisticRegressionCV(n_jobs=-1, max_iter=100, refit=True)	30	6	30	63	3232320183385616054	clf.fit(corpus, classes)	31	0	31	24	880037892278417388
/cb-target/python/db/c8/c76b5898c3ddfdff1823e06c8b2bc709ddba3bdd911997c664ce76c74667.py	OneVsRestClassifier	OneVsRestClassifier(RandomForestClassifier(n_estimators = 20, n_jobs=2))	393	13	393	85	5927843578264530098	classifier.fit(X_train, y_train)	394	10	394	42	-8945379213632959971
/cb-target/python/37/b3/1f452f4ce633a1b9523a2d504dc2a3ba43bd45d241e8b94fa167b0fbda5d.py	LogisticRegression	LogisticRegression(C=1, penalty='l2')	145	8	145	45	-1009377035161180338	model.fit(X_train_scalered, Y_train)	146	0	146	36	6078704250305280399
/cb-target/python/37/b3/1f452f4ce633a1b9523a2d504dc2a3ba43bd45d241e8b94fa167b0fbda5d.py	LogisticRegression	LogisticRegression(C=1, penalty='l2')	221	12	221	49	-8904523275489528755	model.fit(X_train_scalered, Y_part_train)	222	4	222	45	3004081934574374920
/cb-target/python/37/b3/1f452f4ce633a1b9523a2d504dc2a3ba43bd45d241e8b94fa167b0fbda5d.py	GridSearchCV	GridSearchCV(pipeline_4, param_grid=parameters_4, cv=kfolds,scoring = 'accuracy' )	119	19	119	101	-8902995299744007289	lr_grid_search_4.fit(X,Y)	120	0	120	25	8186324077971936657
/cb-target/python/37/b3/1f452f4ce633a1b9523a2d504dc2a3ba43bd45d241e8b94fa167b0fbda5d.py	GridSearchCV	GridSearchCV(LogisticRegression(), param_grid_lr, cv = kfolds, scoring = 'accuracy')	43	17	43	101	-8318370901470483782	lr_grid_search.fit(X, Y)	44	0	44	24	6399103919386469652
/cb-target/python/37/b3/1f452f4ce633a1b9523a2d504dc2a3ba43bd45d241e8b94fa167b0fbda5d.py	GridSearchCV	GridSearchCV(pipeline_3, param_grid = parameters_3, cv = kfolds, scoring = 'accuracy')	101	19	101	105	-315349606102929560	lr_grid_search_3.fit(X, Y)	103	0	103	26	1601753823568771187
/cb-target/python/37/b3/1f452f4ce633a1b9523a2d504dc2a3ba43bd45d241e8b94fa167b0fbda5d.py	GridSearchCV	GridSearchCV(pipeline, param_grid = parameters_2, cv = kfolds, scoring = 'accuracy')	71	19	71	103	447762096468285054	lr_grid_search_2.fit(X, Y)	72	0	72	26	7121801788438620812
/cb-target/python/37/b3/1f452f4ce633a1b9523a2d504dc2a3ba43bd45d241e8b94fa167b0fbda5d.py	StandardScaler	StandardScaler()	141	9	141	25	-9138473950637231165	StandardScaler().fit(X_train)	141	9	141	38	4413153190055326380
/cb-target/python/37/b3/1f452f4ce633a1b9523a2d504dc2a3ba43bd45d241e8b94fa167b0fbda5d.py	StandardScaler	StandardScaler()	217	13	217	29	7789119340245294631	StandardScaler().fit(X_part_train)	217	13	217	47	9049692256530570548
/cb-target/python/57/22/72d54b97d3e3e3c34d740e66c66e7033ea3c8ffc7027cfcc5cbe59a7568d.py	LinearRegression	LinearRegression()	52	12	52	30	5479444192704714105	lm_linear.fit(X_linear, y_linear)	53	8	53	41	-5072911610998881495
/cb-target/python/57/22/72d54b97d3e3e3c34d740e66c66e7033ea3c8ffc7027cfcc5cbe59a7568d.py	LogisticRegression	LogisticRegression()	82	10	82	30	-3952070351416448872	lr_cont.fit(Xn_cont, y_cont)	83	8	83	36	-5959868983908375271
/cb-target/python/57/22/72d54b97d3e3e3c34d740e66c66e7033ea3c8ffc7027cfcc5cbe59a7568d.py	GridSearchCV	GridSearchCV(dctc_ref, dtc_params, n_jobs=-1, cv=5, verbose=1)	295	9	295	71	-8000543540394022767	dtc_gs.fit(X_train_ref, y_train_ref)	300	0	300	36	-2609611996172158749
/cb-target/python/57/22/72d54b97d3e3e3c34d740e66c66e7033ea3c8ffc7027cfcc5cbe59a7568d.py	GridSearchCV	GridSearchCV(dctc, dtc_params, n_jobs=-1, cv=5, verbose=1)	231	9	231	67	-2397048436249781040	dtc_gs.fit(X_train_dec, y_train_dec)	236	0	236	36	-5815234717531216882
/cb-target/python/57/22/72d54b97d3e3e3c34d740e66c66e7033ea3c8ffc7027cfcc5cbe59a7568d.py	PCA	PCA(n_components=6)	353	6	353	25	3434141125335640177	pca.fit(X_linear.values)	354	0	354	24	2090499878192426908
/cb-target/python/75/e8/e8deb90cd25da2cb7ad6c1d31d81f3ab73a576abf0e5438079f08bb3424d.py	KNeighborsClassifier	KNeighborsClassifier()	53	6	53	28	7026142110346769830	knn.fit(af.iloc[:,0:12], np.random.randint(2, size=24323))	54	0	54	58	-59101265410503634
/cb-target/python/18/d5/e92f29381973b22b5e8463fe1db6484f13efc4664f24f8eebcab60fa3bf6.py	KNeighborsClassifier	KNeighborsClassifier(n_neighbors=3)	114	8	114	43	-6345018199821539186	neigh.fit(X_train.head(10000), y_train.head(10000))	115	0	115	51	-6661762387767438808
/cb-target/python/18/d5/e92f29381973b22b5e8463fe1db6484f13efc4664f24f8eebcab60fa3bf6.py	GaussianNB	GaussianNB()	86	6	86	18	-2502900280303740942	gnb.fit(X_train, y_train)	87	0	87	25	-3296623971226524994
/cb-target/python/18/d5/e92f29381973b22b5e8463fe1db6484f13efc4664f24f8eebcab60fa3bf6.py	LogisticRegression	LogisticRegression()	79	9	79	29	4292803984663278323	logreg.fit(X_train, y_train)	80	0	80	28	6263547153562886411
/cb-target/python/79/22/caa8a64d1262f3cdca2a8da8d4c070f1ff7ece7a841681a4c312e1680056.py	RandomForestClassifier	RandomForestClassifier(n_estimators=30)	306	6	306	45	3558834206307496646	clf.fit(X_train, Y_train.values.ravel())	307	0	307	40	2157100540939551448
/cb-target/python/a1/5d/34eeb033b6d18ebd58eea6c86a5096bf82a4713333c24faee5dcf888c793.py	KNeighborsClassifier	KNeighborsClassifier()	172	6	172	28	-6708784057066559597	knn.fit(X_train, y_train)	173	0	173	25	7270123475036590851
/cb-target/python/a1/5d/34eeb033b6d18ebd58eea6c86a5096bf82a4713333c24faee5dcf888c793.py	GaussianNB	GaussianNB()	181	6	181	18	5199537506089743735	gnb.fit(X_train, y_train)	182	0	182	25	2307528356299177749
/cb-target/python/a1/5d/34eeb033b6d18ebd58eea6c86a5096bf82a4713333c24faee5dcf888c793.py	SVC	SVC()	154	6	154	11	-2006957333126037968	svc.fit(X_train, y_train)	155	0	155	25	-5731978354832703557
/cb-target/python/a1/5d/34eeb033b6d18ebd58eea6c86a5096bf82a4713333c24faee5dcf888c793.py	LogisticRegression	LogisticRegression()	145	9	145	29	1725459238599903554	logreg.fit(X_train, y_train)	146	0	146	28	-820951797400437213
/cb-target/python/a1/5d/34eeb033b6d18ebd58eea6c86a5096bf82a4713333c24faee5dcf888c793.py	LinearSVC	LinearSVC()	163	7	163	18	3591951085820518201	lsvc.fit(X_train, y_train)	164	0	164	26	4672134934582747120
/cb-target/python/12/9b/643ad122012cd299e83d17a8c113923b807353123d97ad9ee7825828f33e.py	LinearRegression	linear_model.LinearRegression()	36	7	36	38	-4193802966984318324	regr.fit(train_X, train_y)	37	0	37	26	-2587993104569251644
/cb-target/python/2d/85/8070f814034b65eb8058f93e9bea95d7b9d1883969a92162a8f1a99d9ba0.py	SVC	svm.SVC()	212	17	212	26	-8861967423332052573	svm_classifier.fit(df5_x,df5_y)	265	0	265	31	-9171111780809501960
/cb-target/python/2d/85/8070f814034b65eb8058f93e9bea95d7b9d1883969a92162a8f1a99d9ba0.py	SVC	svm.SVC()	212	17	212	26	-8861967423332052573	svm_classifier.fit(df1_train_x,df1_train_y)	213	0	213	43	-4178009242837504943
/cb-target/python/2d/85/8070f814034b65eb8058f93e9bea95d7b9d1883969a92162a8f1a99d9ba0.py	SVC	svm.SVC()	212	17	212	26	-8861967423332052573	svm_classifier.fit(df3_x,df3_y)	239	0	239	31	-4172517752031819721
/cb-target/python/2d/85/8070f814034b65eb8058f93e9bea95d7b9d1883969a92162a8f1a99d9ba0.py	SVC	svm.SVC()	212	17	212	26	-8861967423332052573	svm_classifier.fit(df4_x,df4_y)	252	0	252	31	-2600593654296294088
/cb-target/python/2d/85/8070f814034b65eb8058f93e9bea95d7b9d1883969a92162a8f1a99d9ba0.py	SVC	svm.SVC()	212	17	212	26	-8861967423332052573	svm_classifier.fit(df2_x,df2_y)	226	0	226	31	5079996773372962565
/cb-target/python/2d/85/8070f814034b65eb8058f93e9bea95d7b9d1883969a92162a8f1a99d9ba0.py	LogisticRegression	LogisticRegression()	119	7	119	27	4634029303582289446	logreg.fit(df5_x, df5_y)	200	0	200	24	-8271539574055131411
/cb-target/python/2d/85/8070f814034b65eb8058f93e9bea95d7b9d1883969a92162a8f1a99d9ba0.py	LogisticRegression	LogisticRegression()	119	7	119	27	4634029303582289446	logreg.fit(df2_x,df2_y)	157	0	157	23	-7677411994218661683
/cb-target/python/2d/85/8070f814034b65eb8058f93e9bea95d7b9d1883969a92162a8f1a99d9ba0.py	LogisticRegression	LogisticRegression()	119	7	119	27	4634029303582289446	logreg.fit(df3_x,df3_y)	174	0	174	23	1604419469609547999
/cb-target/python/2d/85/8070f814034b65eb8058f93e9bea95d7b9d1883969a92162a8f1a99d9ba0.py	LogisticRegression	LogisticRegression()	119	7	119	27	4634029303582289446	logreg.fit(df4_x,df4_y)	187	0	187	23	9120433055241701332
/cb-target/python/2d/85/8070f814034b65eb8058f93e9bea95d7b9d1883969a92162a8f1a99d9ba0.py	LogisticRegression	LogisticRegression()	119	7	119	27	4634029303582289446	logreg.fit(df1_train_x,df1_train_y)	124	0	124	35	7017543028745537695
/cb-target/python/99/51/62fd8ffa8b81a6654717c83e718d9805f5515dc80d3c1cf328b127dcf3c4.py	LinearRegression	LinearRegression()	232	6	232	24	1656153205639173047	LinearRegression().fit(X,y)	232	6	232	33	2683135272545366433
/cb-target/python/63/c6/04d1ba548105b18e6af64aedf9fe4f16652a5230e0e0589b7162c3da1070.py	GridSearchCV	GridSearchCV(pipe, param_grid, cv=5)	119	7	119	43	2161157355878928554	grid.fit(X_train, y_train)	120	0	120	26	9214835132688573396
/cb-target/python/63/c6/04d1ba548105b18e6af64aedf9fe4f16652a5230e0e0589b7162c3da1070.py	GridSearchCV	GridSearchCV(pipe, param_grid, cv=5)	144	7	144	43	-2601460776986420140	grid.fit(X_train, y_train)	145	0	145	26	3477600523412574057
/cb-target/python/63/c6/04d1ba548105b18e6af64aedf9fe4f16652a5230e0e0589b7162c3da1070.py	GridSearchCV	GridSearchCV(pipeline, param_grid=params, cv=3, scoring='f1', verbose=10)	48	7	48	80	2834381044163129571	grid.fit(X_train, labels)	50	0	50	25	-3654458578706236641
/cb-target/python/4b/50/ca1a046c3d111fbf5bc62193fdd2e3d16d42a780f25ac06ea27f361611b7.py	RandomForestClassifier	RandomForestClassifier(n_estimators= 200)	93	6	93	47	2693139641773747211	rfc.fit(X_train, y_train)	98	0	98	25	464464731441537410
/cb-target/python/4b/50/ca1a046c3d111fbf5bc62193fdd2e3d16d42a780f25ac06ea27f361611b7.py	DecisionTreeClassifier	DecisionTreeClassifier()	62	8	62	32	943868383612563013	dtree.fit(X_train, y_train)	67	0	67	27	5487087819332232037
/cb-target/python/7c/5d/3bbb9d89e5eead027042fc7032e3f90d1ae46680f7d7d8d206f6302beb0d.py	GaussianNB	GaussianNB()	119	8	119	20	-8836787008103084285	model.fit(X_train, y_train1)	121	0	121	28	-2359443889819847322
/cb-target/python/7c/5d/3bbb9d89e5eead027042fc7032e3f90d1ae46680f7d7d8d206f6302beb0d.py	RandomForestClassifier	RandomForestClassifier(n_estimators=20)	297	6	297	45	2357495870730039736	clf.fit(X_train, y_train)	309	0	309	25	6263199503585735935
/cb-target/python/7c/5d/3bbb9d89e5eead027042fc7032e3f90d1ae46680f7d7d8d206f6302beb0d.py	LogisticRegression	linear_model.LogisticRegression(C=1e5, penalty='l2',)	217	10	217	63	-1699946359066293808	logreg2.fit(X, y)	218	0	218	17	2683861501022621868
/cb-target/python/7c/5d/3bbb9d89e5eead027042fc7032e3f90d1ae46680f7d7d8d206f6302beb0d.py	LogisticRegression	linear_model.LogisticRegression(C=1e5, penalty='l1',)	181	9	181	62	1742267368662573537	logreg.fit(X, y)	184	0	184	16	2167633252010144239
/cb-target/python/7c/5d/3bbb9d89e5eead027042fc7032e3f90d1ae46680f7d7d8d206f6302beb0d.py	ExtraTreesClassifier	ExtraTreesClassifier(n_estimators=250,\n                              random_state=0)	335	9	336	45	-3317474569412688492	forest.fit(X, y)	340	0	340	16	7197406579578186485
/cb-target/python/75/ab/d967fa922ebc188d81487ed84a891a26afd6fa3b660451ebcff7bf2edf29.py	RandomForestRegressor	RandomForestRegressor(n_estimators=200, random_state=rs**2)	57	10	57	69	7422335520744028636	clf.fit(Xtrain,ytrain)	58	4	58	26	8794166356998489952
/cb-target/python/75/ab/d967fa922ebc188d81487ed84a891a26afd6fa3b660451ebcff7bf2edf29.py	RandomForestRegressor	RandomForestRegressor(n_estimators=200, random_state=rs**2)	145	10	145	69	-9084916223454549516	clf.fit(Xtrain,ytrain)	146	4	146	26	8419426185672003645
/cb-target/python/75/ab/d967fa922ebc188d81487ed84a891a26afd6fa3b660451ebcff7bf2edf29.py	RandomForestRegressor	RandomForestRegressor(n_estimators=200)	77	6	77	45	-5407936264496669697	clf.fit(X_train,y_train)	78	0	78	24	-1874632329613262042
/cb-target/python/75/ab/d967fa922ebc188d81487ed84a891a26afd6fa3b660451ebcff7bf2edf29.py	RandomForestRegressor	RandomForestRegressor(n_estimators=200)	165	6	165	45	-7497678664895596872	clf.fit(X_train,y_train)	166	0	166	24	3624444715502322328
/cb-target/python/30/57/1f47e84ef117866b425666fdd05715d87992ed3e889a41e7fc1c4b7657dd.py	PCA	PCA(n_components=10)	17	6	17	26	-383134252256289235	pca.fit(X)	18	0	18	10	4443839811435016300
/cb-target/python/c8/ee/067f92bf109cc6608783c78accdad979ca9bf5dd779c252b3754680efcf5.py	DecisionTreeClassifier	tree.DecisionTreeClassifier()	64	6	64	35	-2759363649483694941	clf.fit(X_train,y_train)	65	0	65	24	8462860735217827629
/cb-target/python/c8/ee/067f92bf109cc6608783c78accdad979ca9bf5dd779c252b3754680efcf5.py	AdaBoostClassifier	AdaBoostClassifier(DecisionTreeClassifier(max_depth=10),algorithm='SAMME')	139	6	139	80	-8711916849295004005	bdt.fit(train_X, train_Y)	144	0	144	25	2620238092220726186
/cb-target/python/59/6f/e7f5eefa5c587bd839b85e7593490c0665e77fb7745658ba9ea4415b89bc.py	LinearRegression	linear_model.LinearRegression()	278	7	278	38	-4919179791046492331	regr.fit(train_X[header[:-1]], train_y)	279	0	279	39	8630448293797545669
/cb-target/python/ab/a8/696ee29aaf1f9fc297aa608e2752d7261aec0ce8953351fe61e8e8bd0b47.py	LinearRegression	LinearRegression()	73	6	73	24	-7354831957622990375	alg.fit(train_predictors, train_target)	85	4	85	43	-6872389668124232520
/cb-target/python/ab/a8/696ee29aaf1f9fc297aa608e2752d7261aec0ce8953351fe61e8e8bd0b47.py	SVC	SVC(probability=True)	747	7	747	28	-3077381993575967538	"clf4.fit(titanic[predictors], titanic[""Survived""])"	752	0	752	50	-491667978037328927
/cb-target/python/ab/a8/696ee29aaf1f9fc297aa608e2752d7261aec0ce8953351fe61e8e8bd0b47.py	RandomForestClassifier	RandomForestClassifier(random_state=1, n_estimators=150, min_samples_split=8, min_samples_leaf=4)	484	6	484	103	4105756835652807823	alg.fit(titanic[predictors].iloc[train,:], train_target)	509	8	509	64	7193535352012658714
/cb-target/python/ab/a8/696ee29aaf1f9fc297aa608e2752d7261aec0ce8953351fe61e8e8bd0b47.py	RandomForestClassifier	RandomForestClassifier(random_state=1, n_estimators=150, min_samples_split=8, min_samples_leaf=4)	484	6	484	103	4105756835652807823	"alg.fit(titanic[predictors], titanic[""Survived""])"	570	4	570	53	5860291860964265053
/cb-target/python/ab/a8/696ee29aaf1f9fc297aa608e2752d7261aec0ce8953351fe61e8e8bd0b47.py	RandomForestClassifier	RandomForestClassifier(random_state=1, n_estimators=150, min_samples_split=4, min_samples_leaf=2)	265	6	265	103	-5590937545410402447	alg.fit(titanic[predictors].iloc[train,:], train_target)	290	8	290	64	-5268678242013783040
/cb-target/python/ab/a8/696ee29aaf1f9fc297aa608e2752d7261aec0ce8953351fe61e8e8bd0b47.py	RandomForestClassifier	RandomForestClassifier(random_state=1, n_estimators=150, min_samples_split=4, min_samples_leaf=2)	265	6	265	103	-5590937545410402447	alg.fit(titanic[predictors].iloc[train,:], train_target)	443	8	443	64	9126835061192070631
/cb-target/python/ab/a8/696ee29aaf1f9fc297aa608e2752d7261aec0ce8953351fe61e8e8bd0b47.py	RandomForestClassifier	RandomForestClassifier(random_state=1, n_estimators=150, min_samples_split=4, min_samples_leaf=2)	265	6	265	103	-5590937545410402447	"alg.fit(titanic[predictors], titanic[""Survived""])"	350	4	350	53	4756292203804257
/cb-target/python/ab/a8/696ee29aaf1f9fc297aa608e2752d7261aec0ce8953351fe61e8e8bd0b47.py	RandomForestClassifier	RandomForestClassifier(random_state=1, n_estimators=150, min_samples_split=12, min_samples_leaf=2)	618	6	618	104	86931561089372839	alg.fit(titanic[predictors].iloc[train,:], train_target)	912	8	912	64	3887696309368617618
/cb-target/python/ab/a8/696ee29aaf1f9fc297aa608e2752d7261aec0ce8953351fe61e8e8bd0b47.py	RandomForestClassifier	RandomForestClassifier(random_state=1, n_estimators=150, min_samples_split=12, min_samples_leaf=2)	953	6	953	104	4413610399408158202	"alg.fit(titanic[predictors], titanic[""Survived""])"	1210	4	1210	53	-5599732554278515367
/cb-target/python/ab/a8/696ee29aaf1f9fc297aa608e2752d7261aec0ce8953351fe61e8e8bd0b47.py	LogisticRegression	LogisticRegression(random_state=1)	136	6	136	40	4874995439024927017	"alg.fit(titanic[predictors], titanic[""Survived""])"	139	0	139	49	7081635381356797574
/cb-target/python/ab/a8/696ee29aaf1f9fc297aa608e2752d7261aec0ce8953351fe61e8e8bd0b47.py	SelectKBest	SelectKBest(f_classif, k=5)	251	11	251	38	-4534564450986524538	"selector.fit(titanic[predictors], titanic[""Survived""])"	252	0	252	54	-3784648604345306235
/cb-target/python/ab/a8/696ee29aaf1f9fc297aa608e2752d7261aec0ce8953351fe61e8e8bd0b47.py	SelectKBest	SelectKBest(f_classif, k=5)	470	11	470	38	2472812462198503049	"selector.fit(titanic[predictors], titanic[""Survived""])"	471	0	471	54	3948368639516734731
/cb-target/python/ab/a8/696ee29aaf1f9fc297aa608e2752d7261aec0ce8953351fe61e8e8bd0b47.py	SelectKBest	SelectKBest(f_classif, k=5)	604	11	604	38	-6860256099884830674	"selector.fit(titanic[predictors], titanic[""Survived""])"	605	0	605	54	-1968450324126925950
/cb-target/python/ab/a8/696ee29aaf1f9fc297aa608e2752d7261aec0ce8953351fe61e8e8bd0b47.py	SelectKBest	SelectKBest(f_classif, k=5)	939	11	939	38	926955978638264238	"selector.fit(titanic[predictors], titanic[""Survived""])"	940	0	940	54	8140500352466162546
/cb-target/python/40/06/9bb0ccecd99210bac7ff0e3abb870da43a0057af7edd571b0140981b21ce.py	CalibratedClassifierCV	CalibratedClassifierCV(eclf, cv=10)	132	7	132	42	263699658650817145	eclf.fit(X_train, y_train)	133	0	133	26	8454032861548963805
/cb-target/python/67/2d/4c82a3fdc6ff3ccdf6f3eefb35ec71b9b0f0c2c9d36046f2ffc9ff729bde.py	RandomForestClassifier	"RandomForestClassifier(bootstrap=True, class_weight=None, criterion='entropy',\n            max_depth=None, max_features=""log2"", max_leaf_nodes=None,\n            min_samples_leaf=1, min_samples_split=6,\n            min_weight_fraction_leaf=0.0, n_estimators=75, n_jobs=1,\n            oob_score=True, random_state=20, verbose=0, warm_start=False)"	689	5	693	73	-792376357305473976	rf.fit(X_train, y_train)	701	10	701	34	159722823508539243
/cb-target/python/67/2d/4c82a3fdc6ff3ccdf6f3eefb35ec71b9b0f0c2c9d36046f2ffc9ff729bde.py	RandomForestClassifier	"RandomForestClassifier(bootstrap=True, class_weight=None, criterion='entropy',\n            max_depth=None, max_features=""sqrt"", max_leaf_nodes=None,\n            min_samples_leaf=1, min_samples_split=6,\n            min_weight_fraction_leaf=0.0, n_estimators=125, n_jobs=1,\n            oob_score=True, random_state=20, verbose=0, warm_start=False)"	822	6	826	73	4361990458673090938	rf2.fit(X_newtrain, y_newtrain)	834	11	834	42	-2789741656260603586
/cb-target/python/67/2d/4c82a3fdc6ff3ccdf6f3eefb35ec71b9b0f0c2c9d36046f2ffc9ff729bde.py	DecisionTreeClassifier	"DecisionTreeClassifier(class_weight=None, criterion=""entropy"", max_depth=None,\n            max_features=""auto"", max_leaf_nodes=None, min_samples_leaf=1,\n            min_samples_split=5, min_weight_fraction_leaf=0.0,\n            presort=False, random_state=None, splitter=""random"")"	602	5	605	64	-1854282112421121179	dt.fit(X_train, y_train)	614	10	614	34	-4477138205586301258
/cb-target/python/67/2d/4c82a3fdc6ff3ccdf6f3eefb35ec71b9b0f0c2c9d36046f2ffc9ff729bde.py	GridSearchCV	GridSearchCV(estimator=dt, param_grid=dtparam_grid, cv=5)	594	7	594	64	-5319851779543383188	CV_dt.fit(X_train, y_train)	595	0	595	27	4527750398973904518
/cb-target/python/67/2d/4c82a3fdc6ff3ccdf6f3eefb35ec71b9b0f0c2c9d36046f2ffc9ff729bde.py	GridSearchCV	GridSearchCV(estimator=rf, param_grid=rfparam_grid, cv=5)	680	8	680	65	-5246029851910990825	CV_rf.fit(X_train, y_train)	681	0	681	27	-1642985262806593902
/cb-target/python/67/2d/4c82a3fdc6ff3ccdf6f3eefb35ec71b9b0f0c2c9d36046f2ffc9ff729bde.py	GridSearchCV	GridSearchCV(estimator=rf2, param_grid=rf2param_grid, cv=5)	813	9	813	68	648015883395583199	CV_rf2.fit(X_newtrain, y_newtrain)	814	0	814	34	-4238569339277627442
/cb-target/python/67/2d/4c82a3fdc6ff3ccdf6f3eefb35ec71b9b0f0c2c9d36046f2ffc9ff729bde.py	AdaBoostClassifier	AdaBoostClassifier(algorithm='SAMME', base_estimator=None,\n          learning_rate=1.0, n_estimators=5, random_state=20)	920	5	921	61	2314376771969156597	ab.fit(X_train, y_train)	930	10	930	34	-3490157202506021409
/cb-target/python/38/b3/84925717e29fe64fdb96280a63a1e783b533ffb78fb2921ae82e402c77fa.py	OneVsRestClassifier	OneVsRestClassifier(SVC())	84	6	84	32	-6407110994525139014	clf.fit(X_train, y_train)	86	0	86	25	-3589590568265804209
/cb-target/python/cf/3a/9378ff8b6df52b21451c7d096764899ca9553da301e6c8cafbb1121d7fbc.py	RandomForestRegressor	RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=10,\n           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,\n           min_samples_split=2, min_weight_fraction_leaf=0.0,\n           n_estimators=175, n_jobs=1, oob_score=False, random_state=None,\n           verbose=0, warm_start=False)	716	7	720	39	-7007477347767781945	forest.fit(X_train, y_train)	721	0	721	28	2299981442166001783
/cb-target/python/cf/3a/9378ff8b6df52b21451c7d096764899ca9553da301e6c8cafbb1121d7fbc.py	RandomForestRegressor	RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=10,\n           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,\n           min_samples_split=2, min_weight_fraction_leaf=0.0,\n           n_estimators=175, n_jobs=1, oob_score=False, random_state=None,\n           verbose=0, warm_start=False)	909	7	913	39	-3590411823139278917	forest.fit(X_train, y_train)	914	0	914	28	5805896091808871095
/cb-target/python/cf/3a/9378ff8b6df52b21451c7d096764899ca9553da301e6c8cafbb1121d7fbc.py	RandomForestRegressor	RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=10,\n           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,\n           min_samples_split=2, min_weight_fraction_leaf=0.0,\n           n_estimators=175, n_jobs=1, oob_score=False, random_state=None,\n           verbose=0, warm_start=False)	989	7	993	39	-2829073886464489600	forest.fit(X_train, y_train)	994	0	994	28	-8768996137345064099
/cb-target/python/cf/3a/9378ff8b6df52b21451c7d096764899ca9553da301e6c8cafbb1121d7fbc.py	RandomForestRegressor	RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=10,\n           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,\n           min_samples_split=2, min_weight_fraction_leaf=0.0,\n           n_estimators=175, n_jobs=1, oob_score=False, random_state=None,\n           verbose=0, warm_start=False)	1144	7	1148	39	323911348351450122	forest.fit(X_train, y_train)	1149	0	1149	28	-5717389406211126327
/cb-target/python/cf/3a/9378ff8b6df52b21451c7d096764899ca9553da301e6c8cafbb1121d7fbc.py	RandomForestRegressor	RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=10,\n           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,\n           min_samples_split=2, min_weight_fraction_leaf=0.0,\n           n_estimators=175, n_jobs=1, oob_score=False, random_state=None,\n           verbose=0, warm_start=False)	1728	7	1732	39	8106657303047880918	forest.fit(X_train, y_train)	1733	0	1733	28	2876461315773679245
/cb-target/python/cf/3a/9378ff8b6df52b21451c7d096764899ca9553da301e6c8cafbb1121d7fbc.py	RandomForestRegressor	RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=10,\n           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,\n           min_samples_split=2, min_weight_fraction_leaf=0.0,\n           n_estimators=175, n_jobs=1, oob_score=False, random_state=None,\n           verbose=0, warm_start=False)	1883	7	1887	39	-8910942920595894618	forest.fit(X_train, y_train)	1888	0	1888	28	6460581092394610466
/cb-target/python/cf/3a/9378ff8b6df52b21451c7d096764899ca9553da301e6c8cafbb1121d7fbc.py	RandomForestRegressor	RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=10,\n           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,\n           min_samples_split=2, min_weight_fraction_leaf=0.0,\n           n_estimators=175, n_jobs=1, oob_score=False, random_state=None,\n           verbose=0, warm_start=False)	2467	7	2471	39	-6391005779449464200	forest.fit(X_train, y_train)	2472	0	2472	28	7380568031143960136
/cb-target/python/cf/3a/9378ff8b6df52b21451c7d096764899ca9553da301e6c8cafbb1121d7fbc.py	RandomForestRegressor	RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=10,\n           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,\n           min_samples_split=2, min_weight_fraction_leaf=0.0,\n           n_estimators=175, n_jobs=1, oob_score=False, random_state=None,\n           verbose=0, warm_start=False)	2622	7	2626	39	-1587882978201026429	forest.fit(X_train, y_train)	2627	0	2627	28	-8005121778106875384
/cb-target/python/cf/3a/9378ff8b6df52b21451c7d096764899ca9553da301e6c8cafbb1121d7fbc.py	RandomForestRegressor	RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=10,\n           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,\n           min_samples_split=2, min_weight_fraction_leaf=0.0,\n           n_estimators=150, n_jobs=1, oob_score=False, random_state=None,\n           verbose=0, warm_start=False)	780	7	784	39	-311253659925429717	forest.fit(X_train, y_train)	785	0	785	28	2470949066495271281
/cb-target/python/cf/3a/9378ff8b6df52b21451c7d096764899ca9553da301e6c8cafbb1121d7fbc.py	RandomForestRegressor	RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=10,\n           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,\n           min_samples_split=2, min_weight_fraction_leaf=0.0,\n           n_estimators=150, n_jobs=1, oob_score=False, random_state=None,\n           verbose=0, warm_start=False)	877	7	881	39	-3385435541720804239	forest.fit(X_train, y_train)	882	0	882	28	-8767463579206481974
/cb-target/python/cf/3a/9378ff8b6df52b21451c7d096764899ca9553da301e6c8cafbb1121d7fbc.py	RandomForestRegressor	RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=10,\n           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,\n           min_samples_split=2, min_weight_fraction_leaf=0.0,\n           n_estimators=150, n_jobs=1, oob_score=False, random_state=None,\n           verbose=0, warm_start=False)	1040	7	1044	39	-24197846819163007	forest.fit(X_train, y_train)	1045	0	1045	28	7179797999491380011
/cb-target/python/cf/3a/9378ff8b6df52b21451c7d096764899ca9553da301e6c8cafbb1121d7fbc.py	RandomForestRegressor	RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=10,\n           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,\n           min_samples_split=2, min_weight_fraction_leaf=0.0,\n           n_estimators=150, n_jobs=1, oob_score=False, random_state=None,\n           verbose=0, warm_start=False)	1071	7	1075	39	-142455744402005384	forest.fit(X_train, y_train)	1076	0	1076	28	4248657610673828384
/cb-target/python/cf/3a/9378ff8b6df52b21451c7d096764899ca9553da301e6c8cafbb1121d7fbc.py	RandomForestRegressor	RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=10,\n           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,\n           min_samples_split=2, min_weight_fraction_leaf=0.0,\n           n_estimators=150, n_jobs=1, oob_score=False, random_state=None,\n           verbose=0, warm_start=False)	1173	7	1177	39	-3065715481227831119	forest.fit(X_train, y_train)	1178	0	1178	28	-4599400747256767621
/cb-target/python/cf/3a/9378ff8b6df52b21451c7d096764899ca9553da301e6c8cafbb1121d7fbc.py	RandomForestRegressor	RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=10,\n           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,\n           min_samples_split=2, min_weight_fraction_leaf=0.0,\n           n_estimators=150, n_jobs=1, oob_score=False, random_state=None,\n           verbose=0, warm_start=False)	1206	7	1210	39	2358871183958113644	forest.fit(X_train, y_train)	1211	0	1211	28	-5817716052497801490
/cb-target/python/cf/3a/9378ff8b6df52b21451c7d096764899ca9553da301e6c8cafbb1121d7fbc.py	RandomForestRegressor	RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=10,\n           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,\n           min_samples_split=2, min_weight_fraction_leaf=0.0,\n           n_estimators=150, n_jobs=1, oob_score=False, random_state=None,\n           verbose=0, warm_start=False)	1779	7	1783	39	2857239667281616196	forest.fit(X_train, y_train)	1784	0	1784	28	-2069483470884156162
/cb-target/python/cf/3a/9378ff8b6df52b21451c7d096764899ca9553da301e6c8cafbb1121d7fbc.py	RandomForestRegressor	RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=10,\n           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,\n           min_samples_split=2, min_weight_fraction_leaf=0.0,\n           n_estimators=150, n_jobs=1, oob_score=False, random_state=None,\n           verbose=0, warm_start=False)	1810	7	1814	39	5808062029019030066	forest.fit(X_train, y_train)	1815	0	1815	28	6041055770538521126
/cb-target/python/cf/3a/9378ff8b6df52b21451c7d096764899ca9553da301e6c8cafbb1121d7fbc.py	RandomForestRegressor	RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=10,\n           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,\n           min_samples_split=2, min_weight_fraction_leaf=0.0,\n           n_estimators=150, n_jobs=1, oob_score=False, random_state=None,\n           verbose=0, warm_start=False)	1912	7	1916	39	-8881910189136576547	forest.fit(X_train, y_train)	1917	0	1917	28	-5453703409316586676
/cb-target/python/cf/3a/9378ff8b6df52b21451c7d096764899ca9553da301e6c8cafbb1121d7fbc.py	RandomForestRegressor	RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=10,\n           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,\n           min_samples_split=2, min_weight_fraction_leaf=0.0,\n           n_estimators=150, n_jobs=1, oob_score=False, random_state=None,\n           verbose=0, warm_start=False)	1945	7	1949	39	-6208917624388692753	forest.fit(X_train, y_train)	1950	0	1950	28	3801728746816791534
/cb-target/python/cf/3a/9378ff8b6df52b21451c7d096764899ca9553da301e6c8cafbb1121d7fbc.py	RandomForestRegressor	RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=10,\n           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,\n           min_samples_split=2, min_weight_fraction_leaf=0.0,\n           n_estimators=150, n_jobs=1, oob_score=False, random_state=None,\n           verbose=0, warm_start=False)	2518	7	2522	39	2729622722591579258	forest.fit(X_train, y_train)	2523	0	2523	28	3021937952494110915
/cb-target/python/cf/3a/9378ff8b6df52b21451c7d096764899ca9553da301e6c8cafbb1121d7fbc.py	RandomForestRegressor	RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=10,\n           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,\n           min_samples_split=2, min_weight_fraction_leaf=0.0,\n           n_estimators=150, n_jobs=1, oob_score=False, random_state=None,\n           verbose=0, warm_start=False)	2549	7	2553	39	-3804382857979289150	forest.fit(X_train, y_train)	2554	0	2554	28	4336888625673364698
/cb-target/python/cf/3a/9378ff8b6df52b21451c7d096764899ca9553da301e6c8cafbb1121d7fbc.py	RandomForestRegressor	RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=10,\n           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,\n           min_samples_split=2, min_weight_fraction_leaf=0.0,\n           n_estimators=150, n_jobs=1, oob_score=False, random_state=None,\n           verbose=0, warm_start=False)	2651	7	2655	39	-661062264670808787	forest.fit(X_train, y_train)	2656	0	2656	28	4315034265431081425
/cb-target/python/cf/3a/9378ff8b6df52b21451c7d096764899ca9553da301e6c8cafbb1121d7fbc.py	RandomForestRegressor	RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=10,\n           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,\n           min_samples_split=2, min_weight_fraction_leaf=0.0,\n           n_estimators=150, n_jobs=1, oob_score=False, random_state=None,\n           verbose=0, warm_start=False)	2684	7	2688	39	2197881936168680079	forest.fit(X_train, y_train)	2689	0	2689	28	3886497619042614789
/cb-target/python/cf/3a/9378ff8b6df52b21451c7d096764899ca9553da301e6c8cafbb1121d7fbc.py	RandomForestRegressor	RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=10,\n           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,\n           min_samples_split=2, min_weight_fraction_leaf=0.0,\n           n_estimators=200, n_jobs=1, oob_score=False, random_state=None,\n           verbose=0, warm_start=False)	845	7	849	39	-2018042807746530349	forest.fit(X_train, y_train)	850	0	850	28	-5617764715712382280
/cb-target/python/cf/3a/9378ff8b6df52b21451c7d096764899ca9553da301e6c8cafbb1121d7fbc.py	RandomForestRegressor	RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=10,\n           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,\n           min_samples_split=2, min_weight_fraction_leaf=0.0,\n           n_estimators=125, n_jobs=1, oob_score=False, random_state=None,\n           verbose=0, warm_start=False)	748	7	752	39	488078924162282697	forest.fit(X_train, y_train)	753	0	753	28	-2708604215296161091
/cb-target/python/cf/3a/9378ff8b6df52b21451c7d096764899ca9553da301e6c8cafbb1121d7fbc.py	RandomForestRegressor	RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=10,\n           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,\n           min_samples_split=2, min_weight_fraction_leaf=0.0,\n           n_estimators=125, n_jobs=1, oob_score=False, random_state=None,\n           verbose=0, warm_start=False)	941	7	945	39	1126608972832009051	forest.fit(X_train, y_train)	946	0	946	28	-1758107748575030725
/cb-target/python/cf/3a/9378ff8b6df52b21451c7d096764899ca9553da301e6c8cafbb1121d7fbc.py	RandomForestRegressor	RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=10,\n           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,\n           min_samples_split=2, min_weight_fraction_leaf=0.0,\n           n_estimators=125, n_jobs=1, oob_score=False, random_state=None,\n           verbose=0, warm_start=False)	1102	7	1106	39	8945475447943449424	forest.fit(X_train, y_train)	1107	0	1107	28	-5915035428758713567
/cb-target/python/cf/3a/9378ff8b6df52b21451c7d096764899ca9553da301e6c8cafbb1121d7fbc.py	RandomForestRegressor	RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=10,\n           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,\n           min_samples_split=2, min_weight_fraction_leaf=0.0,\n           n_estimators=125, n_jobs=1, oob_score=False, random_state=None,\n           verbose=0, warm_start=False)	1229	7	1233	39	2025575260746676355	forest.fit(X_train, y_train)	1234	0	1234	28	-6189445174257573523
/cb-target/python/cf/3a/9378ff8b6df52b21451c7d096764899ca9553da301e6c8cafbb1121d7fbc.py	RandomForestRegressor	RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=10,\n           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,\n           min_samples_split=2, min_weight_fraction_leaf=0.0,\n           n_estimators=125, n_jobs=1, oob_score=False, random_state=None,\n           verbose=0, warm_start=False)	1841	7	1845	39	4677439560923018795	forest.fit(X_train, y_train)	1846	0	1846	28	6657326339302935414
/cb-target/python/cf/3a/9378ff8b6df52b21451c7d096764899ca9553da301e6c8cafbb1121d7fbc.py	RandomForestRegressor	RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=10,\n           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,\n           min_samples_split=2, min_weight_fraction_leaf=0.0,\n           n_estimators=125, n_jobs=1, oob_score=False, random_state=None,\n           verbose=0, warm_start=False)	1968	7	1972	39	5329378297855742881	forest.fit(X_train, y_train)	1973	0	1973	28	-7581546684287399304
/cb-target/python/cf/3a/9378ff8b6df52b21451c7d096764899ca9553da301e6c8cafbb1121d7fbc.py	RandomForestRegressor	RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=10,\n           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,\n           min_samples_split=2, min_weight_fraction_leaf=0.0,\n           n_estimators=125, n_jobs=1, oob_score=False, random_state=None,\n           verbose=0, warm_start=False)	2580	7	2584	39	-1374555762592423815	forest.fit(X_train, y_train)	2585	0	2585	28	1176369710719064091
/cb-target/python/cf/3a/9378ff8b6df52b21451c7d096764899ca9553da301e6c8cafbb1121d7fbc.py	RandomForestRegressor	RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=10,\n           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,\n           min_samples_split=2, min_weight_fraction_leaf=0.0,\n           n_estimators=125, n_jobs=1, oob_score=False, random_state=None,\n           verbose=0, warm_start=False)	2707	7	2711	39	1570875803945920299	forest.fit(X_train, y_train)	2712	0	2712	28	860612395912708843
/cb-target/python/cf/3a/9378ff8b6df52b21451c7d096764899ca9553da301e6c8cafbb1121d7fbc.py	RandomForestRegressor	RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=7,\n           max_features='auto', max_leaf_nodes=None, min_samples_leaf=1,\n           min_samples_split=2, min_weight_fraction_leaf=0.0,\n           n_estimators=100, n_jobs=1, oob_score=False, random_state=None,\n           verbose=0, warm_start=False)	812	7	816	39	4674324710147406758	forest.fit(X_train, y_train)	817	0	817	28	-998049642448278545
/cb-target/python/cf/3a/9378ff8b6df52b21451c7d096764899ca9553da301e6c8cafbb1121d7fbc.py	GridSearchCV	grid_search.GridSearchCV(regressor, param_grid=parameters,\n                                   scoring=mse_scorer, cv = 10)	695	10	696	63	445630664102681572	reg.fit(X_train, y_train)	700	11	700	36	4229476033287587340
/cb-target/python/b7/e9/6f0ccad95133ccdc77444ecb40d1c0ee14d1ffe327e5c732e69cf7bee26b.py	SVC	svm.SVC(kernel='linear', C=1e3)	77	4	77	35	-8156222358820859706	f.fit(X_train, y_train)	78	0	78	23	-2868318820484994302
/cb-target/python/b7/e9/6f0ccad95133ccdc77444ecb40d1c0ee14d1ffe327e5c732e69cf7bee26b.py	SVC	svm.SVC(kernel='linear', C=1e-3)	89	4	89	36	-7869688907608643800	f.fit(X_train, y_train)	90	0	90	23	-2634813590596909001
/cb-target/python/b7/e9/6f0ccad95133ccdc77444ecb40d1c0ee14d1ffe327e5c732e69cf7bee26b.py	SVC	svm.SVC(kernel='linear', C=1)	64	4	64	33	6161122218081920282	f.fit(X_train, y_train)	65	0	65	23	-5179174831100979942
/cb-target/python/b7/e9/6f0ccad95133ccdc77444ecb40d1c0ee14d1ffe327e5c732e69cf7bee26b.py	LogisticRegression	linear_model.LogisticRegression(tol=0.001, C=1e-3)	129	4	129	54	-3061837434164898447	f.fit(X_train, y_train)	130	0	130	23	2894256516075218635
/cb-target/python/b7/e9/6f0ccad95133ccdc77444ecb40d1c0ee14d1ffe327e5c732e69cf7bee26b.py	LogisticRegression	linear_model.LogisticRegression(tol=0.001, C=1e3)	118	4	118	53	-2355780094580231996	f.fit(X_train, y_train)	119	0	119	23	8936258446968275460
/cb-target/python/b7/e9/6f0ccad95133ccdc77444ecb40d1c0ee14d1ffe327e5c732e69cf7bee26b.py	LogisticRegression	linear_model.LogisticRegression(tol=0.001, C=1)	107	4	107	51	8718973125075009290	f.fit(X_train, y_train)	108	0	108	23	-1669137411218958875
/cb-target/python/45/0f/f86bc47722d762030ddd3918d2202625d97ad6c456462c149e5d5caf424f.py	SpectralCoclustering	SpectralCoclustering(n_clusters=nc, random_state=10000)	441	8	441	63	-1919880252430529239	model.fit(the_map)	442	0	442	18	4532925073564461872
/cb-target/python/45/0f/f86bc47722d762030ddd3918d2202625d97ad6c456462c149e5d5caf424f.py	AffinityPropagation	AffinityPropagation( affinity='precomputed')	399	5	399	49	-8669508899456674779	AffinityPropagation( affinity='precomputed').fit(AP_map)	399	5	399	61	8101818110364269819
/cb-target/python/1e/80/478ca9302c8a21cc3dcdeb6ceeb4481d509099f2f7ae3141ae6a9da47693.py	LinearRegression	LinearRegression()	280	4	280	22	-4386077365185760166	Reg.fit(X_train,Y_train)	281	6	281	30	-8483248634222266018
/cb-target/python/1e/80/478ca9302c8a21cc3dcdeb6ceeb4481d509099f2f7ae3141ae6a9da47693.py	LinearRegression	LinearRegression()	305	4	305	22	1874126384598541841	Reg.fit(Xh_train,Yh_train)	306	6	306	32	-7459970601954803365
/cb-target/python/61/1a/ba838d3f5df9b9065f99f79efb57926f714b2fbf97d80f6e5d32792bb30e.py	RandomForestClassifier	RandomForestClassifier(n_estimators = 100)	74	8	74	50	8349117535763732383	model.fit(X, y)	104	0	104	15	-1084746226130806552
/cb-target/python/61/1a/ba838d3f5df9b9065f99f79efb57926f714b2fbf97d80f6e5d32792bb30e.py	RandomForestClassifier	RandomForestClassifier(n_estimators = 100)	129	8	129	50	2187335223120486676	model.fit(X, y)	136	0	136	15	3688698864482307001
/cb-target/python/61/1a/ba838d3f5df9b9065f99f79efb57926f714b2fbf97d80f6e5d32792bb30e.py	CountVectorizer	CountVectorizer(max_features=2000,\n                             max_df=0.20,\n                             min_df=5,\n                             ngram_range=[1, 2],\n                             stop_words='english',\n                             binary=True)	116	13	121	41	-7856249814784143890	vectorizer.fit(body_text)	124	0	124	25	8546167009624392247
/cb-target/python/61/1a/ba838d3f5df9b9065f99f79efb57926f714b2fbf97d80f6e5d32792bb30e.py	CountVectorizer	CountVectorizer(max_df=0.85,\n                             min_df=5,\n                             ngram_range=[1, 2],\n                             stop_words='english',\n                             binary=True)	25	13	29	41	-7792880190649811130	vectorizer.fit(titles)	32	0	32	22	6377055857061864045
/cb-target/python/61/1a/ba838d3f5df9b9065f99f79efb57926f714b2fbf97d80f6e5d32792bb30e.py	CountVectorizer	CountVectorizer(max_df=0.85,\n                             min_df=5,\n                             ngram_range=[1, 2],\n                             stop_words='english',\n                             binary=True)	25	13	29	41	-7792880190649811130	vectorizer.fit(titles)	55	0	55	22	-2781412815159266131
/cb-target/python/61/1a/ba838d3f5df9b9065f99f79efb57926f714b2fbf97d80f6e5d32792bb30e.py	TfidfVectorizer	TfidfVectorizer(max_features=2000,\n                             max_df=0.20,\n                             min_df=5,\n                             ngram_range=[1, 2],\n                             stop_words='english')	156	13	160	50	8654335107193070725	vectorizer.fit(body_text)	163	0	163	25	-3191088719102500434
/cb-target/python/75/f5/bfef9bcfd901d96f5939ad31d2fead47a6e0e64a38d06feb8fb62b5f3c3e.py	GridSearchCV	GridSearchCV(estimator=clf[c], param_grid={}, n_jobs=1, cv=2, verbose=0, scoring=LL)	200	16	200	100	8815343212829833016	model.fit(train, y_train.values)	201	8	201	40	-8462578197452818146
/cb-target/python/ba/02/ea03ec35281c113fa1ce4e3f3acc4238bd5892f9133bdfcea93eb55d13cd.py	PCA	PCA(n_components=3)	386	6	386	25	4440663158341500466	PCA(n_components=3).fit(X_train)	386	6	386	38	-8361595162046417887
/cb-target/python/cf/e4/f37ba169d41a8384a77b2a9e8cc8c7b4b826ba9061775a8f4dc634f6ffa4.py	GMM	mixture.GMM(n_components=2, random_state=random_state, covariance_type='spherical')	169	12	169	95	6551697566827055289	clusterer.fit(reduced_data)	171	0	171	27	-1044344891154762763
/cb-target/python/cf/e4/f37ba169d41a8384a77b2a9e8cc8c7b4b826ba9061775a8f4dc634f6ffa4.py	PCA	PCA(n_components=2)	143	6	143	25	8000469964569738236	pca.fit(good_data)	144	0	144	18	2214499270035361204
/cb-target/python/cf/e4/f37ba169d41a8384a77b2a9e8cc8c7b4b826ba9061775a8f4dc634f6ffa4.py	PCA	PCA(n_components=6)	124	6	124	25	-4070849061724155934	pca.fit(good_data)	125	0	125	18	-8053458157015040432
/cb-target/python/cf/e4/f37ba169d41a8384a77b2a9e8cc8c7b4b826ba9061775a8f4dc634f6ffa4.py	DecisionTreeRegressor	DecisionTreeRegressor(random_state=random_state)	56	12	56	60	-7408648195598740616	regressor.fit(X_train, y_train)	57	12	57	43	2689149017127331923
/cb-target/python/03/74/01fd530730cb3fa98b53e416b6a9763a7c986d3207f70f0bb793613a9b6d.py	SelectPercentile	SelectPercentile(f_classif, percentile=p)	68	18	68	59	-3655871245672143471	SelectPercentile(f_classif, percentile=p).fit(Xdf_tr, tdf_tr)	68	18	68	79	-6337387019219499562
/cb-target/python/03/74/01fd530730cb3fa98b53e416b6a9763a7c986d3207f70f0bb793613a9b6d.py	SelectPercentile	SelectPercentile(chi2, percentile=p)	67	13	67	49	7711618864285994532	SelectPercentile(chi2, percentile=p).fit(X_bin, tdf_tr)	67	13	67	68	7108079987885495692
/cb-target/python/f7/ec/a20d7cf3ca1a86172c90ab1b265f7f160f97c50b4bc8aa0799c606f7405f.py	LinearRegression	LinearRegression()	36	8	36	26	-1827852423906964456	model.fit(X, y)	37	0	37	15	1079527698031095896
/cb-target/python/3d/1d/505763cc88a0c02e3641936ff5357eee046e50feefa28192b78ac5c788ac.py	RandomForestRegressor	RandomForestRegressor(n_estimators=100, oob_score=True, random_state=42)	94	8	94	80	-4026860483903510648	model.fit(X_train, y_train)	95	0	95	27	5406675829973337121
/cb-target/python/3d/1d/505763cc88a0c02e3641936ff5357eee046e50feefa28192b78ac5c788ac.py	RandomForestRegressor	RandomForestRegressor(trees, oob_score=True, n_jobs=-1, random_state=42)	121	12	121	84	5864129007187747393	model.fit(X_train, y_train)	122	4	122	31	7059224107726350790
/cb-target/python/3d/1d/505763cc88a0c02e3641936ff5357eee046e50feefa28192b78ac5c788ac.py	RandomForestRegressor	RandomForestRegressor(1000, oob_score=True, n_jobs=-1, random_state=42)	111	8	111	79	1690169241661495156	model.fit(X_train, y_train)	112	0	112	27	-4911808479295048101
/cb-target/python/3d/1d/505763cc88a0c02e3641936ff5357eee046e50feefa28192b78ac5c788ac.py	RandomForestRegressor	RandomForestRegressor(1000, oob_score=True, n_jobs=1, random_state=42)	104	8	104	78	-6111087139639069330	model.fit(X_train, y_train)	105	0	105	27	-2952037438676544062
/cb-target/python/3d/1d/505763cc88a0c02e3641936ff5357eee046e50feefa28192b78ac5c788ac.py	RandomForestRegressor	"RandomForestRegressor(n_estimators=100,\n                              oob_score=True,\n                              n_jobs=-1,\n                              random_state=42,\n                              max_features=""auto"",\n                              min_samples_leaf=4)"	174	8	179	49	-8433614662052448580	model.fit(X_train, y_train)	180	0	180	27	-8897690284956914208
/cb-target/python/3d/1d/505763cc88a0c02e3641936ff5357eee046e50feefa28192b78ac5c788ac.py	RandomForestRegressor	"RandomForestRegressor(n_estimators=100,\n                                  oob_score=True,\n                                  n_jobs=-1,\n                                  random_state=42,\n                                  max_features=""auto"",\n                                  min_samples_leaf=min_samples)"	155	12	160	63	-5349868350489231713	model.fit(X_train, y_train)	161	4	161	31	5633489908987080665
/cb-target/python/3d/1d/505763cc88a0c02e3641936ff5357eee046e50feefa28192b78ac5c788ac.py	RandomForestRegressor	RandomForestRegressor(n_estimators=100, oob_score=True, n_jobs=-1, random_state=42, max_features=max_features)	138	12	138	122	-804256684303214252	model.fit(X_train, y_train)	139	4	139	31	757694875180904183
/cb-target/python/6f/95/162eebb4690cddddbc3d2c5c26f8e89d368425fd64ab3c7969e7e6c85264.py	LinearRegression	linear_model.LinearRegression()	64	12	64	43	4776804493867019222	WinsModel.fit(features, moneyball.W)	75	0	75	36	1458940399160424281
/cb-target/python/6f/95/162eebb4690cddddbc3d2c5c26f8e89d368425fd64ab3c7969e7e6c85264.py	LinearRegression	linear_model.LinearRegression()	95	10	95	41	-6682401612694465090	RSmodel.fit(features, moneyball.RS)	98	0	98	35	6494178631944764583
/cb-target/python/6f/95/162eebb4690cddddbc3d2c5c26f8e89d368425fd64ab3c7969e7e6c85264.py	LinearRegression	linear_model.LinearRegression()	118	11	118	42	8892482949938480027	RSmodel2.fit(features, moneyball.RS)	121	0	121	36	300192421767433191
/cb-target/python/6f/95/162eebb4690cddddbc3d2c5c26f8e89d368425fd64ab3c7969e7e6c85264.py	LinearRegression	linear_model.LinearRegression()	171	10	171	41	2448608675309635149	RAmodel.fit(features, moneyball.RA)	174	0	174	35	6571205828142157050
/cb-target/python/41/f2/f5f2b80e75669420e14229f417279bdc0c22ed1bd2159af9ab2b951cf50f.py	LinearRegression	LinearRegression()	107	5	107	23	6973640002236736533	lr.fit(x,y)	110	0	110	11	-8734566337423794404
/cb-target/python/41/f2/f5f2b80e75669420e14229f417279bdc0c22ed1bd2159af9ab2b951cf50f.py	Imputer	"Imputer(strategy=""mean"")"	64	4	64	28	3634218157025223516	imp.fit(newfiPh)	65	0	65	16	-9020696245039520151
/cb-target/python/41/f2/f5f2b80e75669420e14229f417279bdc0c22ed1bd2159af9ab2b951cf50f.py	StandardScaler	StandardScaler()	79	7	79	23	-5308301301366619074	scaler.fit(train.loc[:,'H':])	80	0	80	29	-5254190918661877185
/cb-target/python/ae/a3/6d121c848019633e04b077d1391d06dbcc69defed0eb8d1d5a7201a977e2.py	LogisticRegression	LogisticRegression(random_state=77)	73	9	73	44	7313522697743598088	logreg.fit(X_train, Y_train)	74	0	74	28	-6854289720126009485
/cb-target/python/6c/c5/ae55f97a4bf5b0014f075b52e6f22518472b45a791c948e8ac38eff1862c.py	PCA	PCA(n_components=2)	137	6	137	25	-920996188588524980	PCA(n_components=2).fit(good_data)	137	6	137	40	-3962920608651182677
/cb-target/python/6c/c5/ae55f97a4bf5b0014f075b52e6f22518472b45a791c948e8ac38eff1862c.py	PCA	PCA(n_components=len(good_data.columns))	119	6	119	46	8022768454165833643	PCA(n_components=len(good_data.columns)).fit(good_data)	119	6	119	61	1161787223830801011
/cb-target/python/6c/c5/ae55f97a4bf5b0014f075b52e6f22518472b45a791c948e8ac38eff1862c.py	DecisionTreeRegressor	DecisionTreeRegressor()	54	12	54	35	-2833531081109027273	regressor.fit(X_train,y_train)	55	6	55	36	1183183174478150385
/cb-target/python/c3/db/3c3d5517f61c0031a6e3bf11d81d2ca4e3fc55ca11a1ea12b51591430477.py	StandardScaler	StandardScaler()	69	5	69	21	48474304926722597	sc.fit(X_train_small)	70	0	70	21	-716540802075074068
/cb-target/python/c3/db/3c3d5517f61c0031a6e3bf11d81d2ca4e3fc55ca11a1ea12b51591430477.py	SVR	SVR()	77	6	77	11	2544489303052376114	reg.fit(X_train_std,y_train_small)	78	0	78	34	-981507884970769166
/cb-target/python/2e/a9/eda2fc19eb57286d1dda525acb20d2e3bd0c516f135705543a08edd93524.py	DecisionTreeClassifier	DecisionTreeClassifier(random_state=0, max_depth=3)	116	7	116	58	-6876988809101410924	clf3.fit(X_train, y_train)	119	0	119	26	3226209646389474353
/cb-target/python/2e/a9/eda2fc19eb57286d1dda525acb20d2e3bd0c516f135705543a08edd93524.py	DecisionTreeClassifier	DecisionTreeClassifier(random_state=0, max_depth = None)	146	6	146	62	723739091870743042	clf.fit(X_train, y_train)	149	0	149	25	1973138822708851491
/cb-target/python/2e/a9/eda2fc19eb57286d1dda525acb20d2e3bd0c516f135705543a08edd93524.py	DecisionTreeClassifier	DecisionTreeClassifier(random_state=0, max_depth=1)	83	7	83	58	8763706552333313770	clf1.fit(X_train, y_train)	86	0	86	26	7739401290330458627
/cb-target/python/1d/4d/76204b4caf246bd62da556dbc6773b2fbf90ccfa16abb8ebe3bcc1b7f51a.py	ElasticNetCV	ElasticNetCV(l1_ratio = [.001, .01, .1, .5], cv = 5, normalize = True)	194	7	194	77	-6191330646642051573	enet.fit(cvec_dat, df_text_train.default_flag)	207	0	207	46	2265217649755969318
/cb-target/python/1d/4d/76204b4caf246bd62da556dbc6773b2fbf90ccfa16abb8ebe3bcc1b7f51a.py	ElasticNetCV	ElasticNetCV(l1_ratio = [.001, .01, .1, .5], cv = 5, normalize = True)	194	7	194	77	-6191330646642051573	enet.fit(tfidf_data, df_text_train.default_flag)	218	0	218	48	9211769561705503756
/cb-target/python/81/af/3ff8b60cb6d3373a36e7d6d9ee9102e8b9b8d912a733b6961b4f2ac19541.py	LinearRegression	linear_model.LinearRegression()	226	9	226	40	-8598421491225349976	linear_model.LinearRegression().fit(X_train.iloc[train_index], y_train.iloc[train_index])	226	9	226	98	-4554927986496042359
/cb-target/python/81/af/3ff8b60cb6d3373a36e7d6d9ee9102e8b9b8d912a733b6961b4f2ac19541.py	LinearRegression	linear_model.LinearRegression()	242	5	242	36	7956203920130050905	linear_model.LinearRegression().fit(X_train, y_train)	242	5	242	58	-4954774764101727361
/cb-target/python/81/af/3ff8b60cb6d3373a36e7d6d9ee9102e8b9b8d912a733b6961b4f2ac19541.py	LinearRegression	linear_model.LinearRegression()	251	5	251	36	-7418922093930986031	linear_model.LinearRegression().fit(X_train, y_train)	251	5	251	58	4317959098055714187
/cb-target/python/81/af/3ff8b60cb6d3373a36e7d6d9ee9102e8b9b8d912a733b6961b4f2ac19541.py	Ridge	linear_model.Ridge()	263	5	263	25	8385876554605209891	linear_model.Ridge().fit(X_train, y_train)	263	5	263	47	-1150390743294548715
/cb-target/python/81/af/3ff8b60cb6d3373a36e7d6d9ee9102e8b9b8d912a733b6961b4f2ac19541.py	Ridge	linear_model.Ridge(alpha=a)	274	9	274	36	-3877943454109313932	lm.fit(X_train, y_train)	275	4	275	28	-4781742669847738352
/cb-target/python/81/af/3ff8b60cb6d3373a36e7d6d9ee9102e8b9b8d912a733b6961b4f2ac19541.py	Lasso	linear_model.Lasso()	257	5	257	25	-189740800908308519	linear_model.Lasso().fit(X_train, y_train)	257	5	257	47	3719585601364461037
/cb-target/python/81/af/3ff8b60cb6d3373a36e7d6d9ee9102e8b9b8d912a733b6961b4f2ac19541.py	GridSearchCV	grid_search.GridSearchCV(\n    estimator=linear_model.Ridge(),\n    param_grid={'alpha': alphas},\n    scoring='mean_squared_error')	288	5	291	33	2777270993482593427	gs.fit(X_train, y_train)	292	0	292	24	-5220897943824287024
/cb-target/python/78/da/a0f6d9c8b86322d8caa12beab509bd18a1ebb9debe079bc1020f383b10b3.py	KNeighborsClassifier	KNeighborsClassifier(nbrs)	184	9	184	35	-2806423999731016247	clf.fit(Xtrain, ytrain)	185	8	185	31	653065838124239716
/cb-target/python/78/da/a0f6d9c8b86322d8caa12beab509bd18a1ebb9debe079bc1020f383b10b3.py	KNeighborsClassifier	KNeighborsClassifier(10)	229	9	229	33	5362488583892371501	clfknn.fit(Xmatrix_train, Yresp_train)	230	0	230	38	4745017897097522082
/cb-target/python/78/da/a0f6d9c8b86322d8caa12beab509bd18a1ebb9debe079bc1020f383b10b3.py	LinearSVC	"LinearSVC(loss=""hinge"")"	158	7	158	30	-6286393363592861960	clfsvm.fit(Xmatrix_train, Yresp_train)	159	0	159	38	-3727817887519499774
/cb-target/python/25/4e/da183e2e0261a916df69db5d640143dae513fc88f2a2b2b7a976df06bf33.py	KMeans	KMeans(n_clusters=4)	65	9	65	29	-5696625433573784477	KMeans(n_clusters=4).fit(np.matrix(zip(f1,f2)))	65	9	65	56	-7956086880740377815
/cb-target/python/25/4e/da183e2e0261a916df69db5d640143dae513fc88f2a2b2b7a976df06bf33.py	KMeans	KMeans(n_clusters=2)	40	9	40	29	6309719075114854251	KMeans(n_clusters=2).fit(X)	40	9	40	36	3645936124979393840
/cb-target/python/36/f2/6756b0de9c2e20f51ff657061d594f7d16a44433d9ebbae57236b3a60b40.py	GaussianNB	GaussianNB()	87	6	87	18	3476823581939404408	gnb.fit(train_data[0:,1:],train_data[0:,0])	88	0	88	43	3510946717611976336
/cb-target/python/36/f2/6756b0de9c2e20f51ff657061d594f7d16a44433d9ebbae57236b3a60b40.py	RandomForestClassifier	RandomForestClassifier(n_estimators = 100)	95	8	95	50	-3951823893716868746	model.fit(train_data[0:,1:2],train_data[0:,0])	96	8	96	54	1711373262200505976
/cb-target/python/aa/42/7636c471fc86a478c9fa188ddc97f89b306f4e2f8631e75d29dd47e6cf85.py	LinearRegression	lm.LinearRegression()	232	6	232	27	3709392495066083664	clf.fit(X_, vector)	233	0	233	19	-6910123411095321987
/cb-target/python/aa/42/7636c471fc86a478c9fa188ddc97f89b306f4e2f8631e75d29dd47e6cf85.py	RandomForestRegressor	RandomForestRegressor(max_depth=max_depth, random_state=2)	286	10	286	68	-8424577883618753492	regr_rf.fit(X_train, y_train)	287	0	287	29	1175085369462626283
/cb-target/python/aa/42/7636c471fc86a478c9fa188ddc97f89b306f4e2f8631e75d29dd47e6cf85.py	RandomForestClassifier	RandomForestClassifier(n_jobs=2)	506	6	506	38	-1488642517146793607	clf.fit(train[features_clf], train['ANOM'])	510	0	510	43	-4311764876914525002
/cb-target/python/aa/42/7636c471fc86a478c9fa188ddc97f89b306f4e2f8631e75d29dd47e6cf85.py	RandomForestClassifier	RandomForestClassifier(n_jobs=2)	506	6	506	38	-1488642517146793607	clf.fit(train[features_clf], train['ANOM'])	515	11	515	54	-6563030961123838739
/cb-target/python/aa/42/7636c471fc86a478c9fa188ddc97f89b306f4e2f8631e75d29dd47e6cf85.py	RandomForestClassifier	RandomForestClassifier(n_jobs=2)	506	6	506	38	-1488642517146793607	clf.fit(train[cols], train.color_as_int)	606	4	606	44	6985125048278701161
/cb-target/python/aa/42/7636c471fc86a478c9fa188ddc97f89b306f4e2f8631e75d29dd47e6cf85.py	DBSCAN	DBSCAN(eps=0.2, min_samples=5)	162	5	162	35	-4803029872904139644	DBSCAN(eps=0.2, min_samples=5).fit(df_normalized)	162	5	162	54	-102032111871038863
/cb-target/python/aa/42/7636c471fc86a478c9fa188ddc97f89b306f4e2f8631e75d29dd47e6cf85.py	KMeans	KMeans(n_clusters=4, random_state=1)	99	15	99	51	3465860738986427857	kmeans_model.fit(df_normalized)	105	0	105	31	-5621418948479793409
/cb-target/python/aa/42/7636c471fc86a478c9fa188ddc97f89b306f4e2f8631e75d29dd47e6cf85.py	MultiOutputRegressor	MultiOutputRegressor(RandomForestRegressor(max_depth=max_depth, random_state=0))	284	15	284	95	-4230284728033779854	regr_multirf.fit(X_train, y_train)	285	0	285	34	7962773181670893944
/cb-target/python/50/c1/7028de3166d4bdb3914e5988d94370dc9b85e588fbedca51e06a11af8ef1.py	LinearRegression	LinearRegression()	71	20	71	38	7717369998460144402	linear_regression.fit(X, y)	72	0	72	27	2440420294674604199
/cb-target/python/50/c1/7028de3166d4bdb3914e5988d94370dc9b85e588fbedca51e06a11af8ef1.py	Ridge	Ridge()	96	8	96	15	-5342243698132553757	ridge.fit(X, y)	97	0	97	15	1903678004259737474
/cb-target/python/50/c1/7028de3166d4bdb3914e5988d94370dc9b85e588fbedca51e06a11af8ef1.py	Ridge	Ridge(alpha[1])	117	12	117	27	-6772641419744910089	ridge.fit(X, y)	118	4	118	19	-1928784660802377226
/cb-target/python/50/c1/7028de3166d4bdb3914e5988d94370dc9b85e588fbedca51e06a11af8ef1.py	Lasso	Lasso()	86	8	86	15	8912855700383476660	lasso.fit(X, y)	87	0	87	15	7905838576772886475
/cb-target/python/50/c1/7028de3166d4bdb3914e5988d94370dc9b85e588fbedca51e06a11af8ef1.py	Lasso	Lasso(alpha[1])	112	12	112	27	-7988996841800967013	lasso.fit(X, y)	113	4	113	19	1408338601168112559
/cb-target/python/50/c1/7028de3166d4bdb3914e5988d94370dc9b85e588fbedca51e06a11af8ef1.py	LassoCV	LassoCV(alphas=alphas)	154	10	154	32	-1789950186695602104	lassocv.fit(X, y)	155	0	155	17	9083418995574460684
/cb-target/python/31/c3/9101be903c56d18c999985904a260c28e8eb5ef25cb7f9c86afb62cbf86c.py	LinearRegression	linear_model.LinearRegression()	26	7	26	38	-1110872934903527508	regr.fit(mileage, price)	27	0	27	24	-6883761102620818353
/cb-target/python/31/c3/9101be903c56d18c999985904a260c28e8eb5ef25cb7f9c86afb62cbf86c.py	Pipeline	Pipeline([('poly', PolynomialFeatures(degree=3)),\n                  ('linear', LinearRegression())])	53	11	54	50	4336072002651771817	regr_pol.fit(mileage, price)	55	0	55	28	-8699531181599763944
/cb-target/python/31/c3/9101be903c56d18c999985904a260c28e8eb5ef25cb7f9c86afb62cbf86c.py	Pipeline	Pipeline([('poly', PolynomialFeatures(degree=3)),\n                  ('linear', LinearRegression())])	53	11	54	50	4336072002651771817	regr_pol.fit(np.array(df[x]), output)	86	8	86	45	-6566128907183352426
/cb-target/python/31/c3/9101be903c56d18c999985904a260c28e8eb5ef25cb7f9c86afb62cbf86c.py	Pipeline	Pipeline([('poly', PolynomialFeatures(degree=3)),\n                  ('linear', LinearRegression())])	53	11	54	50	4336072002651771817	regr_pol.fit(np.array(df[[x]]), df.Price)	136	8	136	49	-6410884085285593301
/cb-target/python/68/67/7de4c9cca6e90bcdfb0a6cf1175e6f74e6ea8e55f18a6afd9dbcefe24d26.py	LinearRegression	LinearRegression()	107	9	107	27	-7527554255745195106	linreg.fit(X, y)	109	0	109	16	-4599671133605957440
/cb-target/python/68/67/7de4c9cca6e90bcdfb0a6cf1175e6f74e6ea8e55f18a6afd9dbcefe24d26.py	LinearRegression	LinearRegression()	132	13	132	31	-14249724343738960	linreg.fit(X_train, y_train)	133	4	133	32	-52202389995882705
/cb-target/python/df/56/a7cd286b400a2e494811abd2d4bf273f87850025f20c95e499d2a584dde8.py	SVC	svm.SVC(C=1, kernel=kernel)	89	6	89	33	-5638436800976650073	svc.fit(data[['x1', 'x2']], data['y'])	90	0	90	38	-7992803769134370720
/cb-target/python/df/56/a7cd286b400a2e494811abd2d4bf273f87850025f20c95e499d2a584dde8.py	SVC	svm.SVC(C=C_range[i], kernel='rbf', gamma=gamma_range[j])	133	16	133	73	-373816707915254253	model.fit(data_train[['x1', 'x2']], data_train['y'])	134	8	134	60	5750690818983032682
/cb-target/python/df/56/a7cd286b400a2e494811abd2d4bf273f87850025f20c95e499d2a584dde8.py	SVC	svm.SVC(C=10, kernel='rbf', gamma=30)	156	13	156	50	417138778623433807	best_model.fit(data_val[['x1', 'x2']], data_val['y'])	157	0	157	53	296304100382757982
/cb-target/python/df/56/a7cd286b400a2e494811abd2d4bf273f87850025f20c95e499d2a584dde8.py	LinearSVC	svm.LinearSVC(C=0.1)	304	6	304	26	-1152307382234473637	svc.fit(x, y)	305	0	305	13	-4351510502911520197
/cb-target/python/df/56/a7cd286b400a2e494811abd2d4bf273f87850025f20c95e499d2a584dde8.py	LinearSVC	svm.LinearSVC(C=1, loss='hinge', max_iter=1000)	32	6	32	53	7727845958541836361	svc.fit(data[['x1', 'x2']], data['y'])	34	0	34	38	7321739465114426576
/cb-target/python/ff/e8/9307faeeda94e6acf417846301bbae99455aed4276b172c6a1e3cddafea8.py	CountVectorizer	CountVectorizer(min_df=0)	64	13	64	38	6096937077796989459	vectorizer.fit(text)	67	0	67	20	-4640675443069096401
/cb-target/python/ff/e8/9307faeeda94e6acf417846301bbae99455aed4276b172c6a1e3cddafea8.py	MultinomialNB	MultinomialNB()	107	6	107	21	-6907644883945199846	MultinomialNB().fit(xtrain, ytrain)	107	6	107	41	6915422453003156400
/cb-target/python/ff/e8/9307faeeda94e6acf417846301bbae99455aed4276b172c6a1e3cddafea8.py	MultinomialNB	MultinomialNB(alpha=best_alpha)	194	6	194	37	-5755593049457145965	MultinomialNB(alpha=best_alpha).fit(xtrain, ytrain)	194	6	194	57	-1980429851652080773
/cb-target/python/31/56/79523e1bc22995fc2849bf73d3eff9f3aae3f3a06c58dc461f5705e63f0e.py	RandomForestRegressor	RandomForestRegressor(n_estimators=numberTrees)	437	6	437	53	-5588246838045989567	clf.fit(features_train,target_train)	438	0	438	36	8325400085547799362
/cb-target/python/31/56/79523e1bc22995fc2849bf73d3eff9f3aae3f3a06c58dc461f5705e63f0e.py	RandomForestClassifier	RandomForestClassifier(n_estimators = 500, min_samples_split = 2,\n                                n_jobs = -1, verbose = 1)	604	9	605	57	-6385775006824553444	rf.fit(xTrain, yTrain)	606	4	606	26	5169360494869066325
/cb-target/python/31/56/79523e1bc22995fc2849bf73d3eff9f3aae3f3a06c58dc461f5705e63f0e.py	RandomForestClassifier	RandomForestClassifier(n_estimators = 500, min_samples_split = 2, n_jobs = -1, verbose = 1)	585	5	585	96	812981510548280461	rf.fit(xTrain, yTrain)	586	0	586	22	6948617585417464026
/cb-target/python/31/56/79523e1bc22995fc2849bf73d3eff9f3aae3f3a06c58dc461f5705e63f0e.py	RandomForestClassifier	RandomForestClassifier(n_estimators=100, max_depth=None,\nmin_samples_split=1, random_state=0)	253	6	254	36	3404702632204913628	clf.fit(features_train,target_train)	255	0	255	36	659582282809522257
/cb-target/python/31/56/79523e1bc22995fc2849bf73d3eff9f3aae3f3a06c58dc461f5705e63f0e.py	RandomForestClassifier	RandomForestClassifier(n_estimators=10, n_jobs=-1,\n                                    warm_start=True, random_state=1000)	456	13	457	71	6019542709162451453	growing_rf.fit(features_train, target_train)	459	4	459	48	-1120655473298344047
/cb-target/python/31/56/79523e1bc22995fc2849bf73d3eff9f3aae3f3a06c58dc461f5705e63f0e.py	RandomForestClassifier	RandomForestClassifier(warm_start=True, oob_score=True)	402	9	402	64	9090611554200165077	forest.fit(features_train, target_train)	406	4	406	44	512441945592306670
/cb-target/python/31/56/79523e1bc22995fc2849bf73d3eff9f3aae3f3a06c58dc461f5705e63f0e.py	GridSearchCV	GridSearchCV(gb, params, cv=5, scoring='roc_auc', n_jobs=4)	423	5	423	64	914729432975298229	gs.fit(features_array, target)	424	0	424	30	6962556259378124342
/cb-target/python/31/56/79523e1bc22995fc2849bf73d3eff9f3aae3f3a06c58dc461f5705e63f0e.py	ExtraTreesClassifier	ExtraTreesClassifier(n_estimators=10, max_depth=None,\nmin_samples_split=1, random_state=0)	393	15	394	36	-6348024778529508594	extra_forest.fit(features_train, target_train)	470	0	470	46	-6728976066311933243
/cb-target/python/31/56/79523e1bc22995fc2849bf73d3eff9f3aae3f3a06c58dc461f5705e63f0e.py	RFECV	RFECV(estimator=rf, step=1, cv=2, scoring='roc_auc', verbose=2)	574	8	574	71	2274558377888311760	rfecv.fit(x, y)	575	9	575	24	949943591423110772
/cb-target/python/76/c2/abb46f7faa0b1ac59109dc75074a152aa8769ba54ed8db92721b6855bcc9.py	LogisticRegression	LogisticRegression()	291	9	291	29	8081840144760397133	logreg.fit(X_train, Y_train)	292	0	292	28	7236543429229316433
/cb-target/python/76/c2/abb46f7faa0b1ac59109dc75074a152aa8769ba54ed8db92721b6855bcc9.py	LogisticRegression	LogisticRegression(penalty = 'l2', C =1)	399	11	399	51	-4953374521126036760	model_l2.fit(X_train,Y_train)	400	0	400	29	4923085992012862231
/cb-target/python/76/c2/abb46f7faa0b1ac59109dc75074a152aa8769ba54ed8db92721b6855bcc9.py	LogisticRegression	LogisticRegression(penalty = 'l1', C=1)	385	11	385	50	6710968904628292662	model_l1.fit(X_train,Y_train)	386	0	386	29	-1964461464368727152
/cb-target/python/82/38/f64bbbef69eb340327335d30d59ed1852962dac5a053d71a06cda6c1fd05.py	KNeighborsClassifier	KNeighborsClassifier(nbrs)	142	9	142	35	-3155067407081433205	clf.fit(Xtrain, ytrain)	143	8	143	31	6847952480973854029
/cb-target/python/82/38/f64bbbef69eb340327335d30d59ed1852962dac5a053d71a06cda6c1fd05.py	GridSearchCV	"GridSearchCV(clfl2, param_grid=parameters, cv=5, scoring=""accuracy"")"	108	11	108	79	-2927462985092635209	fitmodel.fit(Xlr, ylr)	109	0	109	22	4203136293169384239
/cb-target/python/82/38/f64bbbef69eb340327335d30d59ed1852962dac5a053d71a06cda6c1fd05.py	GridSearchCV	GridSearchCV(clf, param_grid=parameters, cv=n_folds)	196	9	196	61	6558501397371178153	gs.fit(Xtrain, ytrain)	197	4	197	26	-8448444379694605576
/cb-target/python/44/66/21943d755885a2d941b130fae1dbf73b50a9011519c0d5f4549ecb276660.py	LogisticRegression	LogisticRegression()	60	9	60	29	-2621818548506819131	logreg.fit(X_train, y_train)	61	0	61	28	3477733292910866028
/cb-target/python/44/66/21943d755885a2d941b130fae1dbf73b50a9011519c0d5f4549ecb276660.py	LogisticRegression	LogisticRegression()	60	9	60	29	-2621818548506819131	logreg.fit(X_train, y_train)	67	13	67	41	-3235597788931342138
/cb-target/python/44/66/21943d755885a2d941b130fae1dbf73b50a9011519c0d5f4549ecb276660.py	LogisticRegression	LogisticRegression()	191	13	191	33	-6433866452505485971	logreg_hab.fit(Xhab_train, yhab_train)	192	0	192	38	-6435416611834942221
/cb-target/python/44/66/21943d755885a2d941b130fae1dbf73b50a9011519c0d5f4549ecb276660.py	LogisticRegression	LogisticRegression()	191	13	191	33	-6433866452505485971	logreg_hab.fit(Xhab_train, yhab_train)	194	13	194	51	9137347264817669620
/cb-target/python/44/66/21943d755885a2d941b130fae1dbf73b50a9011519c0d5f4549ecb276660.py	LogisticRegression	LogisticRegression(multi_class='multinomial', solver='newton-cg')	150	12	150	77	-4932829230085344861	logreg_mv.fit(Xmv_train, ymv_train)	151	0	151	35	-4320188045057561395
/cb-target/python/44/66/21943d755885a2d941b130fae1dbf73b50a9011519c0d5f4549ecb276660.py	LogisticRegression	LogisticRegression(multi_class='multinomial', solver='newton-cg')	150	12	150	77	-4932829230085344861	logreg_mv.fit(Xmv_train, ymv_train)	157	12	157	47	-5273011512384251996
/cb-target/python/40/47/a6c8b7d514bf292fdffb4d58e734a3749a6bbb0d040017cdf2dcd938fcf7.py	RandomForestClassifier	RandomForestClassifier(n_estimators = 20, max_features = 15, min_samples_leaf = 25, n_jobs = -1)	191	6	191	102	-961839273352786143	clf.fit(X_train, y_train)	192	0	192	25	-289027014308683035
/cb-target/python/40/47/a6c8b7d514bf292fdffb4d58e734a3749a6bbb0d040017cdf2dcd938fcf7.py	RandomForestClassifier	RandomForestClassifier(warm_start=True)	137	6	137	45	8311329343956802278	clf.fit(X_train, y_train)	142	4	142	29	3988092172001871786
/cb-target/python/40/47/a6c8b7d514bf292fdffb4d58e734a3749a6bbb0d040017cdf2dcd938fcf7.py	GridSearchCV	GridSearchCV(clf, param_grid, cv = 5)	170	14	170	51	8383046090828344564	grid_search.fit(X_train_sample, y_train_sample)	177	0	177	47	8899570263041182866
/cb-target/python/40/47/a6c8b7d514bf292fdffb4d58e734a3749a6bbb0d040017cdf2dcd938fcf7.py	PCA	PCA(n_components=2)	85	6	85	25	6763898727060489833	pca.fit(train)	86	0	86	14	718275737963064239
/cb-target/python/d6/ff/52ad3d5e1c648089c9f19b034ef6679a1740b3b97c5345973fa82f2f88ad.py	Lasso	linear_model.Lasso(alpha=5e2, normalize=True)	42	12	42	57	-7234789705258595867	model_all.fit(sales[all_features], sales['price'])	43	0	43	50	-2043607862530346486
/cb-target/python/d6/ff/52ad3d5e1c648089c9f19b034ef6679a1740b3b97c5345973fa82f2f88ad.py	Lasso	linear_model.Lasso(alpha=elm, normalize=True)	87	12	87	57	-2943581780772937899	model.fit(training[all_features], training['price'])	88	4	88	56	7314982992882132347
/cb-target/python/d6/ff/52ad3d5e1c648089c9f19b034ef6679a1740b3b97c5345973fa82f2f88ad.py	Lasso	linear_model.Lasso(alpha=elm, normalize=True)	127	12	127	57	465274245172715670	model.fit(training[all_features], training['price'])	128	4	128	56	1728869615187745742
/cb-target/python/d6/ff/52ad3d5e1c648089c9f19b034ef6679a1740b3b97c5345973fa82f2f88ad.py	Lasso	linear_model.Lasso(alpha=elm, normalize=True)	154	12	154	57	-781593155810794088	model.fit(training[all_features], training['price'])	155	4	155	56	8842223300045407448
/cb-target/python/d6/ff/52ad3d5e1c648089c9f19b034ef6679a1740b3b97c5345973fa82f2f88ad.py	Lasso	linear_model.Lasso(alpha = 153.892506602, normalize=True)	170	15	170	72	-2029759022765288923	model_lowest.fit(training[all_features], training['price'])	171	0	171	59	-3176353677371672622
/cb-target/python/d6/ff/52ad3d5e1c648089c9f19b034ef6679a1740b3b97c5345973fa82f2f88ad.py	Lasso	linear_model.Lasso(alpha=10.0, normalize=True)	98	8	98	54	6388837461140056815	model.fit(testing[all_features], testing['price'])	99	0	99	50	-8935742814339921050
/cb-target/python/57/7a/f66fb85263392c55921426f03c1ce3766419eba8950f11ebac9cea9512b8.py	GridSearchCV	GridSearchCV(estimator, param_grid=parameters, scoring=scoring)	325	12	325	75	8567002524851614883	model.fit(X_train, y_train)	326	4	326	31	-4132700156547704937
/cb-target/python/57/7a/f66fb85263392c55921426f03c1ce3766419eba8950f11ebac9cea9512b8.py	VotingClassifier	VotingClassifier(estimators=[('xgb1', clf_xgb1), ('lg1', clf_lg1), ('svc', clf_svc),\n                                      ('rfc1', clf_rfc1),('rfc2', clf_rfc2), ('knn', clf_knn)],\n                          voting='hard', weights=[4,1,1,1,1,2])	572	9	574	63	4466567095264851239	clf_vc.fit(X_train, y_train)	575	9	575	37	4672919707393987887
/cb-target/python/af/aa/d918ae5a4a988aab669fb7628e37c681c8ba5294f8f1fc75d9f58c609933.py	Ridge	Ridge(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=None,\n      normalize=False, random_state=None, solver='auto', tol=0.001)	212	8	213	67	9215519229838968279	model.fit(X_train,y_train)	223	0	223	26	-3075242768170589995
/cb-target/python/53/19/a5ce7e615d3dbea7ca16cdf77e960c13215593f10aed886418f28f85096f.py	DecisionTreeClassifier	DecisionTreeClassifier(random_state=241)	136	6	136	46	3285013878126195247	clf.fit(x_train, y_train)	141	0	141	25	532560439732446972
/cb-target/python/4a/0f/3c66540d3ef4b9e4fe3ecee390add0e54f820c51127cdce6db9c39a848b8.py	LogisticRegression	linear_model.LogisticRegression(C=1.0)	188	9	188	47	309308260742936710	logreg.fit(X[:,1:3], y.flatten())	189	0	189	33	-3478820190630334488
/cb-target/python/fa/15/2c50ff24f7875ee9860c43d3a21e2d5aae946a8efa7f90d9246030265a13.py	RandomForestClassifier	sk.RandomForestClassifier(n_estimators=500, oob_score=True)	31	6	31	65	8677549414405126170	rfc.fit(train_data, train_truth)	34	8	34	40	5017992933019314781
/cb-target/python/72/1c/db8d1a726d07963ab923ab31400cf2ca2a8d01796c2b6585410d5f4b86f0.py	PCA	PCA(n_components=10)	13	6	13	26	-8009205036423167641	pca.fit(close_prices)	14	0	14	21	-7171743286952950723
/cb-target/python/c2/33/b6e880b33446836ad46318deb7093295f4368f217acf8ed1e68799476ff5.py	Ridge	linear_model.Ridge(fit_intercept=True,alpha=1)	198	6	198	52	-5044266168464466543	Ridge.fit(X_train,y_train)	200	0	200	26	6589512317317440459
/cb-target/python/c2/33/b6e880b33446836ad46318deb7093295f4368f217acf8ed1e68799476ff5.py	Ridge	linear_model.Ridge(fit_intercept=True,alpha=1)	633	6	633	52	2731419131658113535	Ridge.fit(X_train,y_train)	640	0	640	26	383255716982780318
/cb-target/python/c2/33/b6e880b33446836ad46318deb7093295f4368f217acf8ed1e68799476ff5.py	Ridge	linear_model.Ridge(fit_intercept=True,alpha=lambda_r_optimal)	296	6	296	67	-300922609551059201	Ridge.fit(X_train,y_train)	298	0	298	26	-2949837348427301281
/cb-target/python/c2/33/b6e880b33446836ad46318deb7093295f4368f217acf8ed1e68799476ff5.py	Ridge	linear_model.Ridge(fit_intercept=True,alpha=lambda_r_optimal)	401	10	401	71	5983637056767225633	Ridge.fit(X_train[:,0:j+1],y_train)	402	4	402	39	1542268866141632733
/cb-target/python/c2/33/b6e880b33446836ad46318deb7093295f4368f217acf8ed1e68799476ff5.py	Ridge	linear_model.Ridge(fit_intercept=True,alpha=lambda_r_optimal)	689	6	689	67	-3059656296554480410	Ridge.fit(X_train,y_train)	696	0	696	26	1965608426243885539
/cb-target/python/c2/33/b6e880b33446836ad46318deb7093295f4368f217acf8ed1e68799476ff5.py	Ridge	linear_model.Ridge(fit_intercept=True,alpha=lambda_r_optimal)	754	10	754	71	6654934204055501350	Ridge.fit(X,y)	756	4	756	18	5448189445375615312
/cb-target/python/c2/33/b6e880b33446836ad46318deb7093295f4368f217acf8ed1e68799476ff5.py	Ridge	linear_model.Ridge(fit_intercept=True, alpha=a)	245	15	245	62	2722030494012969892	RM.fit(X_train0,y_train0)	250	8	250	33	-6048211351489714172
/cb-target/python/c2/33/b6e880b33446836ad46318deb7093295f4368f217acf8ed1e68799476ff5.py	Lasso	linear_model.Lasso(fit_intercept=True,alpha=lambda_l_optimal)	331	6	331	67	5066124791873918631	Lasso.fit(X_train,y_train)	333	0	333	26	-3718820795742208998
/cb-target/python/c2/33/b6e880b33446836ad46318deb7093295f4368f217acf8ed1e68799476ff5.py	Lasso	linear_model.Lasso(fit_intercept=True,alpha=lambda_l_optimal)	690	6	690	67	-2693346481177769788	Lasso.fit(X_train,y_train)	697	0	697	26	-5771015280702320945
/cb-target/python/c2/33/b6e880b33446836ad46318deb7093295f4368f217acf8ed1e68799476ff5.py	Lasso	linear_model.Lasso(fit_intercept=True,alpha=lambda_l_optimal)	755	10	755	71	846380728086342795	Lasso.fit(X,y)	757	4	757	18	-1825156286332203441
/cb-target/python/c2/33/b6e880b33446836ad46318deb7093295f4368f217acf8ed1e68799476ff5.py	Lasso	linear_model.Lasso(fit_intercept=True, alpha=a)	248	15	248	62	-767468513840898138	RM.fit(X_train0,y_train0)	250	8	250	33	-6048211351489714172
/cb-target/python/c2/33/b6e880b33446836ad46318deb7093295f4368f217acf8ed1e68799476ff5.py	Lasso	linear_model.Lasso(fit_intercept=True, alpha=lambda_l_optimal)	422	10	422	72	1858612083616417578	Lasso.fit(X_train[:,0:j+1],y_train)	423	4	423	39	1478531148173835911
/cb-target/python/c2/33/b6e880b33446836ad46318deb7093295f4368f217acf8ed1e68799476ff5.py	Lasso	linear_model.Lasso(fit_intercept=True,alpha=1)	634	6	634	52	6892426769401946456	Lasso.fit(X_train,y_train)	641	0	641	26	-3442578697484352196
/cb-target/python/2b/70/0d442f7b9eb6f472f8c92e0317a7d0edd9957a423950f801a82fc6b89f3a.py	DecisionTreeClassifier	"DecisionTreeClassifier(criterion=""entropy"")"	59	6	59	49	5624352901280045835	clf.fit(X_train, y_train)	60	6	60	31	4684321371897776896
/cb-target/python/d3/f9/42e9aa2dcf477a313ba2db7706bdbc6430affd37d1750367d728292be17e.py	SVC	svm.SVC(kernel='rbf', C=1e3, gamma=0.001, cache_size=6000, max_iter=100)	104	14	104	86	6799397697437048048	clf.fit(X, y)	110	4	110	17	5598370770883491169
/cb-target/python/d3/f9/42e9aa2dcf477a313ba2db7706bdbc6430affd37d1750367d728292be17e.py	DecisionTreeClassifier	DecisionTreeClassifier(min_samples_split=100, min_samples_leaf=100, max_depth=4, max_leaf_nodes=15)	101	14	101	113	3653630376891956794	clf.fit(X, y)	110	4	110	17	5598370770883491169
/cb-target/python/d3/f9/42e9aa2dcf477a313ba2db7706bdbc6430affd37d1750367d728292be17e.py	MLPClassifier	MLPClassifier(solver='lbfgs', alpha=1e-5, hidden_layer_sizes=(6), random_state=1)	106	14	106	95	-6518180077956572406	clf.fit(X, y)	110	4	110	17	5598370770883491169
/cb-target/python/d2/9c/2866a2d02423249a770a362cee1ee50a6accf30b0efb99ced0c4d40c1abe.py	LinearRegression	LinearRegression()	29	5	29	23	2125834654544021633	lr.fit(wine_mag_train, wine_abv_train)	30	0	30	38	6571624242825146548
/cb-target/python/d2/9c/2866a2d02423249a770a362cee1ee50a6accf30b0efb99ced0c4d40c1abe.py	KNeighborsClassifier	KNeighborsClassifier()	65	6	65	28	-5184720750176919735	knn.fit(wine_data_train, wine_labels_train)	66	0	66	43	3772331099317358375
/cb-target/python/a5/20/63309f0cbcc5ae4df7858d0a0b9035706ee852a9e2d45590648369eecd84.py	LabelEncoder	LabelEncoder()	86	15	86	29	-8157877234021316340	LabelEncoder().fit(phone.phone_brand)	86	15	86	52	-6944467252403264822
/cb-target/python/1e/4f/6355aaa6b9434397b2731e46dd2a02613d8f324592148a1dbf046a88c0b0.py	MLPRegressor	MLPRegressor(solver='lbfgs', alpha=1e-5, hidden_layer_sizes=(5, 2), random_state=1)	75	6	75	89	-1843506377960742721	clf.fit(X, y)	77	0	77	13	-1087156545639171661
/cb-target/python/ff/93/77adc6f246b8b8677a7a9f34d17fec749c4cbbd2b3808783afef448251df.py	LinearRegression	LinearRegression()	132	13	132	31	-9173769632549435412	lm.fit(x,y)	133	15	133	26	-5334783700891522876
/cb-target/python/ff/93/77adc6f246b8b8677a7a9f34d17fec749c4cbbd2b3808783afef448251df.py	LinearRegression	LinearRegression()	200	13	200	31	-1540892356383898275	lm.fit(reg_xtrain, reg_ytrain)	201	18	201	48	2078051264255343661
/cb-target/python/6f/8a/3f27ca5326929c6460a60c0de0e2e2ce3633d78b5d4aab26d8147da8cf2e.py	GridSearchCV	GridSearchCV(clf, parameters, scoring=f1_scorer)	200	11	200	59	-8323527010826396640	grid_obj.fit(X_train, y_train)	203	11	203	41	3695580944706640242
/cb-target/python/57/f5/39e3211f5ab2b7fd8d9009242ebb836f490faf4b3837a7c6e32ccb30f8d4.py	CountVectorizer	CountVectorizer(min_df=0)	59	13	59	38	-3853330604496128425	vectorizer.fit(text)	62	0	62	20	-4887753066563296164
/cb-target/python/57/f5/39e3211f5ab2b7fd8d9009242ebb836f490faf4b3837a7c6e32ccb30f8d4.py	MultinomialNB	MultinomialNB()	101	6	101	21	-2211374466660624982	clf.fit(X_train,y_train)	102	0	102	24	-6715584938975096456
/cb-target/python/57/f5/39e3211f5ab2b7fd8d9009242ebb836f490faf4b3837a7c6e32ccb30f8d4.py	MultinomialNB	MultinomialNB(alpha=best_alpha)	181	6	181	37	564793561751072150	MultinomialNB(alpha=best_alpha).fit(xtrain, ytrain)	181	6	181	57	-620538087797545288
/cb-target/python/64/08/8b406975036325732d2da24a4aa9f3f09a1110591069fe19c5b80bb65d85.py	Ridge	Ridge(fit_intercept=True,solver='svd')	42	8	42	46	-2302207218549350886	model.fit(Xtrain, ytrain)	45	1	45	26	5856686746363994714
/cb-target/python/64/08/8b406975036325732d2da24a4aa9f3f09a1110591069fe19c5b80bb65d85.py	Ridge	Ridge(fit_intercept=True)	69	8	69	33	-1726364070105818897	model.fit(Xtrain, ytrain)	74	1	74	26	-8649803946765951118
/cb-target/python/64/08/8b406975036325732d2da24a4aa9f3f09a1110591069fe19c5b80bb65d85.py	Ridge	Ridge(fit_intercept=True)	156	8	156	33	-1919852634747375987	model.fit(Xm,ym)	170	2	170	18	-8376147423252261442
/cb-target/python/64/08/8b406975036325732d2da24a4aa9f3f09a1110591069fe19c5b80bb65d85.py	Ridge	Ridge(fit_intercept=True)	156	8	156	33	-1919852634747375987	model.fit(Xm[train], ym[train])	161	21	161	52	-5626577553536015774
/cb-target/python/64/08/8b406975036325732d2da24a4aa9f3f09a1110591069fe19c5b80bb65d85.py	Lasso	Lasso(fit_intercept=True)	99	8	99	33	8987719101232214696	model.fit(Xtrain, ytrain)	102	1	102	26	2413164448508938611
/cb-target/python/64/08/8b406975036325732d2da24a4aa9f3f09a1110591069fe19c5b80bb65d85.py	Lasso	Lasso(fit_intercept=True)	125	8	125	33	-6010237006964164685	model.fit(Xtrain, ytrain)	130	1	130	26	4289643034994288423
/cb-target/python/64/08/8b406975036325732d2da24a4aa9f3f09a1110591069fe19c5b80bb65d85.py	Lasso	Lasso(fit_intercept=True)	175	8	175	33	1023831506997320589	model.fit(Xm,ym)	189	2	189	18	4971969735608350585
/cb-target/python/64/08/8b406975036325732d2da24a4aa9f3f09a1110591069fe19c5b80bb65d85.py	Lasso	Lasso(fit_intercept=True)	175	8	175	33	1023831506997320589	model.fit(Xm[train],ym[train])	180	21	180	51	-5654619502052752424
/cb-target/python/8a/59/323ad125d812443de96c95663914878de1168c3c16e431757d2606c936b3.py	MultinomialNB	naive_bayes.MultinomialNB()	71	6	71	33	2917518760928546348	clf.fit(X_train, y_train)	72	0	72	25	3645655235189918453
/cb-target/python/a4/f0/e5c97f0da41d88b964c6cf6ad20c66f468aa7bcaefb0d674f74b9d130b5d.py	LinearRegression	LinearRegression()	40	8	40	26	9137525581814071409	model.fit(X, y)	41	0	41	15	-8527922817931369166
/cb-target/python/4f/ec/ed8bce8d6bd623ea79c349eca2cf3101a51916eaf7841fd9b12ec2b3cf2c.py	GaussianNB	GaussianNB()	96	6	96	18	8077995865879004067	clf.fit(X_train,y_train)	97	0	97	24	4571385031356568827
/cb-target/python/4f/ec/ed8bce8d6bd623ea79c349eca2cf3101a51916eaf7841fd9b12ec2b3cf2c.py	SVC	SVC(gamma=0.1,C=1,kernel='rbf')	123	6	123	37	3433437860610027174	clf.fit(X_train,y_train)	124	0	124	24	-7178241197406808783
/cb-target/python/4f/ec/ed8bce8d6bd623ea79c349eca2cf3101a51916eaf7841fd9b12ec2b3cf2c.py	LogisticRegression	LogisticRegression()	87	6	87	26	-624419200345558018	clf.fit(X_train,y_train)	88	0	88	24	707864310525809340
/cb-target/python/4f/ec/ed8bce8d6bd623ea79c349eca2cf3101a51916eaf7841fd9b12ec2b3cf2c.py	DecisionTreeClassifier	tree.DecisionTreeClassifier()	114	6	114	35	8661026382523056282	clf.fit(X_train,y_train)	115	0	115	24	558583335430213014
/cb-target/python/4f/ec/ed8bce8d6bd623ea79c349eca2cf3101a51916eaf7841fd9b12ec2b3cf2c.py	MLPClassifier	MLPClassifier(hidden_layer_sizes=(500,500))	105	6	105	49	-2116681503431626585	clf.fit(X_train,y_train)	106	0	106	24	-648480971528796417
/cb-target/python/3c/7f/d2db98f6595c640126af0ccf6781f2773201de0346ef2fc1cdefe2639aae.py	RandomForestClassifier	RandomForestClassifier(n_estimators=50, random_state=4111, n_jobs=-1)	35	6	35	75	2470282864477200371	rfc.fit(X_train,y_train)	36	0	36	24	5140750952363681766
/cb-target/python/ca/d0/b0bd281d442522aa49157a8cef2aad0d971d57a9c032e06bc3984498d26e.py	KNeighborsClassifier	KNeighborsClassifier(n_neighbors=6)	420	6	420	41	-7692229368486450325	KNN.fit(X_split1,y_split1)	421	0	421	26	3573948122991528352
/cb-target/python/ca/d0/b0bd281d442522aa49157a8cef2aad0d971d57a9c032e06bc3984498d26e.py	GaussianNB	GaussianNB()	318	6	318	18	-2434331322186512587	GNB.fit(X_split1,y_split1)	319	0	319	26	-4828998454361613317
/cb-target/python/ca/d0/b0bd281d442522aa49157a8cef2aad0d971d57a9c032e06bc3984498d26e.py	SVC	SVC()	437	5	437	10	3759211069926376233	SV.fit(X_split1,y_split1)	438	0	438	25	-5400175607063625825
/cb-target/python/ca/d0/b0bd281d442522aa49157a8cef2aad0d971d57a9c032e06bc3984498d26e.py	GradientBoostingClassifier	GradientBoostingClassifier(learning_rate=0.05)	267	6	267	52	-5064189181832888324	GBC.fit(X_split1,y_split1)	268	0	268	26	-8895780982988070932
/cb-target/python/ca/d0/b0bd281d442522aa49157a8cef2aad0d971d57a9c032e06bc3984498d26e.py	RandomForestClassifier	RandomForestClassifier (n_estimators=50,criterion='entropy',min_samples_split=285)	228	5	228	87	-3808282950889317660	RF.fit(X_split1,y_split1)	229	0	229	25	1412154075880788930
/cb-target/python/ca/d0/b0bd281d442522aa49157a8cef2aad0d971d57a9c032e06bc3984498d26e.py	LogisticRegression	LogisticRegression(penalty='l1')	352	5	352	37	-7717889078520100721	LR.fit(X_split1,y_split1)	353	0	353	25	-4402136020311969451
/cb-target/python/ca/d0/b0bd281d442522aa49157a8cef2aad0d971d57a9c032e06bc3984498d26e.py	DecisionTreeClassifier	DecisionTreeClassifier(criterion='entropy', max_depth=1)	284	6	284	62	-8056047885889203659	DTC.fit(X_split1,y_split1)	285	0	285	26	-8424493242739564250
/cb-target/python/ca/d0/b0bd281d442522aa49157a8cef2aad0d971d57a9c032e06bc3984498d26e.py	Pipeline	"Pipeline([(""polynomial_features"", polynomial_features),\n                                 (""classifier"", clf)])"	79	19	80	54	-2945089872058688258	pipeline.fit(X_train, y_train)	108	12	108	42	2089511978364726203
/cb-target/python/ca/d0/b0bd281d442522aa49157a8cef2aad0d971d57a9c032e06bc3984498d26e.py	BaggingClassifier	BaggingClassifier(max_samples =300)	369	6	369	41	-2714210673321373120	BCF.fit(X_split1,y_split1)	370	0	370	26	1213160406941696906
/cb-target/python/ca/d0/b0bd281d442522aa49157a8cef2aad0d971d57a9c032e06bc3984498d26e.py	MultinomialNB	MultinomialNB(alpha = 0.1)	403	6	403	32	-5840667042368041875	MNB.fit(X_split1,y_split1)	404	0	404	26	-3691935542268174326
/cb-target/python/ca/d0/b0bd281d442522aa49157a8cef2aad0d971d57a9c032e06bc3984498d26e.py	ExtraTreesClassifier	ExtraTreesClassifier(n_estimators = 100, max_depth =8, min_samples_split=15,)	335	6	335	83	3341476539274694029	ETC.fit(X_split1,y_split1)	336	0	336	26	-729345672962409036
/cb-target/python/ca/d0/b0bd281d442522aa49157a8cef2aad0d971d57a9c032e06bc3984498d26e.py	LabelEncoder	preprocessing.LabelEncoder()	184	9	184	37	1508742267906371990	le.fit(encoder_set)	188	4	188	23	-4581585223631434176
/cb-target/python/ca/d0/b0bd281d442522aa49157a8cef2aad0d971d57a9c032e06bc3984498d26e.py	AdaBoostClassifier	AdaBoostClassifier()	301	6	301	26	-813156826436914271	ABC.fit(X_split1,y_split1)	302	0	302	26	6560325388597170954
/cb-target/python/ca/d0/b0bd281d442522aa49157a8cef2aad0d971d57a9c032e06bc3984498d26e.py	SGDClassifier	SGDClassifier(penalty='l1')	386	6	386	33	-7395188263931069342	SGD.fit(X_split1,y_split1)	387	0	387	26	8495847881114003939
/cb-target/python/9a/6c/523492f99b6d72232541cc052cec4deff48f8ed7c078676404bb991757b4.py	GradientBoostingRegressor	GradientBoostingRegressor()	478	10	478	37	6004251787837502103	reg.fit(X_array,Y_array)	512	8	512	32	77813479128948288
/cb-target/python/9a/6c/523492f99b6d72232541cc052cec4deff48f8ed7c078676404bb991757b4.py	RandomForestRegressor	RandomForestRegressor( n_estimators=10)	186	6	186	45	-8924907775972297906	reg.fit(X_array,Y_array)	222	4	222	28	-6752948745534974313
/cb-target/python/9a/6c/523492f99b6d72232541cc052cec4deff48f8ed7c078676404bb991757b4.py	LabelEncoder	preprocessing.LabelEncoder()	43	5	43	33	4508831260925599287	le.fit(list_assignment2)	44	0	44	24	-540913952172196269
/cb-target/python/e4/a5/10026c97722d20c535679a9daef9bee3fed1f5bb84b25059d4ffad7f4d40.py	SVC	svm.SVC(random_state=10)	274	6	274	30	-5387917319713040600	clf.fit(X_train, y_train)	292	15	292	40	-6386916344880381215
/cb-target/python/e4/a5/10026c97722d20c535679a9daef9bee3fed1f5bb84b25059d4ffad7f4d40.py	RandomForestClassifier	RandomForestClassifier(n_estimators=10)	311	8	311	47	-8976231767128559903	model.fit(X_train, y_train)	314	8	314	35	-5635324726914727445
/cb-target/python/e4/a5/10026c97722d20c535679a9daef9bee3fed1f5bb84b25059d4ffad7f4d40.py	GridSearchCV	grid_search.GridSearchCV(clf, parameters)	283	11	283	52	-4626405387952833857	grid_obj.fit(X_train,y_train)	286	11	286	40	1215284432723646406
/cb-target/python/c5/cb/b76b327ae33887f3b97929584517a5dc9470e4be48b90dd89dc0b9718514.py	SVC	svm.SVC()	178	5	178	14	-3368631899476978813	clf.fit(train_data_x, train_data_y)	179	0	179	35	-7914900645748720919
/cb-target/python/be/87/9be83d497ac075b6e618de32c4603be5d89abc5f5492a94341301ddad21a.py	DecisionTreeRegressor	tree.DecisionTreeRegressor()	132	4	132	32	5224169165945800837	clf.fit(X3,Y3)	133	4	133	18	-2775528164908526598
/cb-target/python/be/87/9be83d497ac075b6e618de32c4603be5d89abc5f5492a94341301ddad21a.py	DecisionTreeRegressor	tree.DecisionTreeRegressor()	164	5	164	33	9159651402626339093	clf1.fit(X5,Y5)	165	5	165	20	2095394893385171328
/cb-target/python/bd/08/d09119ce81262c85fc710e3242b1bc9d2bad24b3d4832272b62a846cca30.py	KNeighborsClassifier	KNeighborsClassifier()	223	6	223	28	-9087091772076581608	clf.fit(X_train, y_train)	241	15	241	40	-7749848724118399355
/cb-target/python/bd/08/d09119ce81262c85fc710e3242b1bc9d2bad24b3d4832272b62a846cca30.py	GridSearchCV	GridSearchCV(clf, parameters, scoring=scorer)	232	11	232	56	7428346915376689010	grid_obj.fit(X_train, y_train)	235	11	235	41	2040913970824041023
/cb-target/python/05/ae/8d73097baf42d080ae6dafe53a37f54d12184b64f66cab05cf8fc7ddeb4b.py	KNeighborsClassifier	KNeighborsClassifier(n_neighbors=k)	189	10	189	45	-8706435696379576072	knn.fit(X, y)	192	4	192	17	-7179773104301018109
/cb-target/python/05/ae/8d73097baf42d080ae6dafe53a37f54d12184b64f66cab05cf8fc7ddeb4b.py	KNeighborsClassifier	KNeighborsClassifier(n_neighbors=k)	189	10	189	45	-8706435696379576072	knn.fit(X_train, y_train)	198	4	198	29	-5488763764853091947
/cb-target/python/05/ae/8d73097baf42d080ae6dafe53a37f54d12184b64f66cab05cf8fc7ddeb4b.py	KNeighborsClassifier	KNeighborsClassifier(n_neighbors=14)	251	6	251	42	-6453653624791705844	knn.fit(X, y)	254	0	254	13	-2876415245673276455
/cb-target/python/05/ae/8d73097baf42d080ae6dafe53a37f54d12184b64f66cab05cf8fc7ddeb4b.py	KNeighborsClassifier	KNeighborsClassifier(n_neighbors=1)	58	6	58	41	1858251464492607111	knn.fit(X, y)	59	0	59	13	-5451202162118249696
/cb-target/python/05/ae/8d73097baf42d080ae6dafe53a37f54d12184b64f66cab05cf8fc7ddeb4b.py	KNeighborsClassifier	KNeighborsClassifier(n_neighbors=1)	147	6	147	41	-5401065366670122385	knn.fit(X_train, y_train)	148	0	148	25	5641783976049059866
/cb-target/python/05/ae/8d73097baf42d080ae6dafe53a37f54d12184b64f66cab05cf8fc7ddeb4b.py	KNeighborsClassifier	KNeighborsClassifier(n_neighbors=50)	34	6	34	42	6782345834052593987	knn.fit(X, y)	37	0	37	13	1941579937098985599
/cb-target/python/05/ae/8d73097baf42d080ae6dafe53a37f54d12184b64f66cab05cf8fc7ddeb4b.py	KNeighborsClassifier	KNeighborsClassifier(n_neighbors=50)	160	6	160	42	3764575991384036907	knn.fit(X_train, y_train)	161	0	161	25	-9113454415989923813
/cb-target/python/05/ae/8d73097baf42d080ae6dafe53a37f54d12184b64f66cab05cf8fc7ddeb4b.py	KNeighborsClassifier	KNeighborsClassifier(n_neighbors=50)	264	6	264	42	2931641927676114118	knn.fit(X_train, y_train)	265	0	265	25	-3445058829600626459
/cb-target/python/52/ac/e2da9d40cc75692d56d75d28e41aee6570dfe6c2e7c68e77daf3b420ebab.py	GridSearchCV	GridSearchCV(estimator=clf, param_grid=parameters, scoring=f1_scorer, cv=10,\n                        n_jobs=-1, pre_dispatch='2*n_jobs')	218	11	219	59	-8933061075421040148	grid_obj.fit(X_train, y_train)	222	11	222	41	8982415686425041934
/cb-target/python/52/ac/e2da9d40cc75692d56d75d28e41aee6570dfe6c2e7c68e77daf3b420ebab.py	GridSearchCV	GridSearchCV(estimator=abc, param_grid=param_grid, scoring=f1_scorer, cv=10,\n                            n_jobs=-1, pre_dispatch='2*n_jobs')	246	15	247	63	1192996679126788753	grid_obj_ada.fit(X_train, y_train)	249	15	249	49	-8544087442070153296
/cb-target/python/38/09/4574e67d08d02efd4225ad8a517f660dba8be8b9f06a249075b7b74213e3.py	PCA	PCA(n_components=2)	133	6	133	25	-3628333140786427012	pca.fit(good_data)	134	11	134	29	7268727546677648703
/cb-target/python/38/09/4574e67d08d02efd4225ad8a517f660dba8be8b9f06a249075b7b74213e3.py	PCA	PCA(n_components=6)	113	6	113	25	7256596338336798484	pca.fit(good_data)	114	11	114	29	4323898453021213667
/cb-target/python/38/09/4574e67d08d02efd4225ad8a517f660dba8be8b9f06a249075b7b74213e3.py	DecisionTreeRegressor	DecisionTreeRegressor(random_state=0)	52	12	52	49	8336218965167602938	regressor.fit(X_train, y_train)	54	0	54	31	-3749681783011574588
/cb-target/python/38/09/4574e67d08d02efd4225ad8a517f660dba8be8b9f06a249075b7b74213e3.py	KMeans	KMeans(n_clusters=2)	163	12	163	32	-6430198960398125883	KMeans(n_clusters=2).fit(reduced_data)	163	12	163	50	-3367200757960228441
/cb-target/python/9b/fa/68f0aaeab1bfa205cbca8380ce5154a31428dc89ac4a441518557ee96a8a.py	KNeighborsClassifier	KNeighborsClassifier(n_neighbors=23)	170	6	170	42	-5727128835199330594	KNeighborsClassifier(n_neighbors=23).fit(X_train, y_train)	170	6	170	64	-2194313033887477634
/cb-target/python/9b/fa/68f0aaeab1bfa205cbca8380ce5154a31428dc89ac4a441518557ee96a8a.py	KNeighborsClassifier	KNeighborsClassifier(n_neighbors=n)	105	10	105	45	4890095663053736127	knn.fit(X_train, y_train)	106	4	106	29	-5845845277777200330
/cb-target/python/9b/fa/68f0aaeab1bfa205cbca8380ce5154a31428dc89ac4a441518557ee96a8a.py	GaussianNB	GaussianNB()	171	6	171	18	7096559206201926355	GaussianNB().fit(X_train, y_train)	171	6	171	40	-3741385944146584690
/cb-target/python/9b/fa/68f0aaeab1bfa205cbca8380ce5154a31428dc89ac4a441518557ee96a8a.py	RandomForestClassifier	RandomForestClassifier(n_estimators = 5)	173	13	173	53	2672757392511840692	RandomForestClassifier(n_estimators = 5).fit(X_train, y_train)	173	13	173	75	-3501822967569409166
/cb-target/python/9b/fa/68f0aaeab1bfa205cbca8380ce5154a31428dc89ac4a441518557ee96a8a.py	RandomForestClassifier	RandomForestClassifier(n_estimators = 500, max_features = max_features )	85	4	85	76	2267193744639265381	rf.fit(X_train, y_train)	86	0	86	24	-4287352258167693572
/cb-target/python/9b/fa/68f0aaeab1bfa205cbca8380ce5154a31428dc89ac4a441518557ee96a8a.py	LogisticRegression	LogisticRegression()	114	10	114	30	-6099813769455120826	log_reg.fit(X_train,y_train)	115	0	115	28	1036568242066217206
/cb-target/python/9b/fa/68f0aaeab1bfa205cbca8380ce5154a31428dc89ac4a441518557ee96a8a.py	LogisticRegression	LogisticRegression()	175	9	175	29	-7330660873084513400	LogisticRegression().fit(X_train, y_train)	175	9	175	51	6128071374905833581
/cb-target/python/9b/fa/68f0aaeab1bfa205cbca8380ce5154a31428dc89ac4a441518557ee96a8a.py	DecisionTreeClassifier	DecisionTreeClassifier()	174	10	174	34	-918978767014035087	DecisionTreeClassifier().fit(X_train, y_train)	174	10	174	56	-8383121783517391075
/cb-target/python/31/fe/b50a990e10d027d82fa514b7012270317ede86fd0269c35f53c8fc387b17.py	GradientBoostingClassifier	GradientBoostingClassifier(n_estimators = 5)	936	14	936	58	7264426684707531311	clf.fit(CV_train_X, CV_train_Y)	942	8	942	39	5585736552155311479
/cb-target/python/31/fe/b50a990e10d027d82fa514b7012270317ede86fd0269c35f53c8fc387b17.py	RandomForestClassifier	RandomForestClassifier(n_estimators=100, min_samples_split=15, n_jobs=30)	1002	6	1002	79	8835757788054505971	clf.fit(train_X, train_Y)	1008	0	1008	25	-4558884549161813198
/cb-target/python/95/ea/87f5825d15f6c0ca619f6c42370aace9eeaaeba87c225ad9f3bee3c91900.py	BernoulliNB	naive_bayes.BernoulliNB()	80	6	80	31	4198597686264821156	clf.fit(X_train, y_train)	87	0	87	25	-5992458383278180681
/cb-target/python/95/ea/87f5825d15f6c0ca619f6c42370aace9eeaaeba87c225ad9f3bee3c91900.py	DummyClassifier	DummyClassifier(strategy='most_frequent')	116	12	116	53	3519323667992876868	dummy_clf.fit(X_train, y_train)	119	0	119	31	-681097812760590056
/cb-target/python/a4/f4/b84d5ffb40eebb82dfe4580cbbfa40e9ec0a211491906f0b38b0e0e42e95.py	RandomForestRegressor	RandomForestRegressor(n_estimators=100)	153	6	153	45	7916190527070653682	rfc.fit(x_train, y_train)	154	0	154	25	-996006046864776393
/cb-target/python/a4/f4/b84d5ffb40eebb82dfe4580cbbfa40e9ec0a211491906f0b38b0e0e42e95.py	RandomForestRegressor	RandomForestRegressor(n_estimators=20)	66	14	66	52	-4739530648937654042	rfr.fit(x, y)	67	8	67	21	2804789689453638793
/cb-target/python/a4/f4/b84d5ffb40eebb82dfe4580cbbfa40e9ec0a211491906f0b38b0e0e42e95.py	RandomForestRegressor	RandomForestRegressor(n_estimators=1000)	79	14	79	54	-4628893778482532920	rfr.fit(x, y)	80	8	80	21	2177296537379663512
/cb-target/python/a4/f4/b84d5ffb40eebb82dfe4580cbbfa40e9ec0a211491906f0b38b0e0e42e95.py	LogisticRegression	LogisticRegression(penalty='l2')	144	5	144	37	-2108737365395718714	lr.fit(x_train, y_train)	145	0	145	24	6161093072449064618
/cb-target/python/ce/d7/693977904b30240b6cebe57c3bb9331ba7639b2ddafff69bbcd11262615d.py	KNeighborsClassifier	KNeighborsClassifier(n_neighbors=3)	719	8	719	43	1074896305754516363	neigh.fit(X_, y)	720	0	720	16	-3189648643499827693
/cb-target/python/ce/d7/693977904b30240b6cebe57c3bb9331ba7639b2ddafff69bbcd11262615d.py	KNeighborsClassifier	neighbors.KNeighborsClassifier(n_neighbors, weights)	627	10	627	62	-6123703511179958537	clf.fit(X_train, y_train)	628	4	628	29	-3038161249980552768
/cb-target/python/ce/d7/693977904b30240b6cebe57c3bb9331ba7639b2ddafff69bbcd11262615d.py	KNeighborsClassifier	neighbors.KNeighborsClassifier(n_neighbors=3)	576	14	576	59	-1219590755461524319	KNN_smarket.fit(X_train2004, y_train2004)	577	0	577	41	-3225340361361032118
/cb-target/python/ce/d7/693977904b30240b6cebe57c3bb9331ba7639b2ddafff69bbcd11262615d.py	KNeighborsClassifier	neighbors.KNeighborsClassifier(n_neighbors=5)	589	12	589	57	8198775049888264370	KNN_gspc3.fit(X_gspc3_train, y_gspc3_train)	590	0	590	43	-2859858813160951359
/cb-target/python/ce/d7/693977904b30240b6cebe57c3bb9331ba7639b2ddafff69bbcd11262615d.py	KNeighborsClassifier	neighbors.KNeighborsClassifier(n_neighbors=5)	602	12	602	57	-15346978323777687	KNN_gspc4.fit(X_gspc4_train, y_gspc4_train)	603	0	603	43	955495478479193974
/cb-target/python/ce/d7/693977904b30240b6cebe57c3bb9331ba7639b2ddafff69bbcd11262615d.py	LogisticRegression	skl_lm.LogisticRegression()	277	6	277	33	-6889882981463881816	clf.fit(X_test, y_test)	278	0	278	23	-4822768880517073109
/cb-target/python/ce/d7/693977904b30240b6cebe57c3bb9331ba7639b2ddafff69bbcd11262615d.py	LogisticRegression	skl_lm.LogisticRegression()	367	14	367	41	-6197678716693804813	reg_smarket.fit(X_smarket, y_smarket)	368	0	368	37	-219094358564263032
/cb-target/python/ce/d7/693977904b30240b6cebe57c3bb9331ba7639b2ddafff69bbcd11262615d.py	LogisticRegression	skl_lm.LogisticRegression()	389	14	389	41	-9218652806837574066	reg_smarket.fit(X_train2004, y_train2004)	390	0	390	41	-6354935094494933595
/cb-target/python/ce/d7/693977904b30240b6cebe57c3bb9331ba7639b2ddafff69bbcd11262615d.py	LogisticRegression	skl_lm.LogisticRegression()	435	14	435	41	3686204337334183531	regit_gspc3.fit(X_gspc3, y_gspc3)	436	0	436	33	6312571094877394776
/cb-target/python/ce/d7/693977904b30240b6cebe57c3bb9331ba7639b2ddafff69bbcd11262615d.py	LogisticRegression	skl_lm.LogisticRegression()	493	14	493	41	9172566030082398131	regit_gspc4.fit(X_gspc4_train, y_gspc4_train)	494	0	494	45	3678546562046115542
/cb-target/python/ce/d7/693977904b30240b6cebe57c3bb9331ba7639b2ddafff69bbcd11262615d.py	LogisticRegression	skl_lm.LogisticRegression()	670	22	670	49	-7355659441508694988	log_sl_learn_weekly.fit(X, y)	674	0	674	29	422168851058555015
/cb-target/python/ce/d7/693977904b30240b6cebe57c3bb9331ba7639b2ddafff69bbcd11262615d.py	LogisticRegression	skl_lm.LogisticRegression()	685	22	685	49	8536722207750200394	log_sl_learn_weekly.fit(X, y)	689	0	689	29	7614959314826588800
/cb-target/python/ce/d7/693977904b30240b6cebe57c3bb9331ba7639b2ddafff69bbcd11262615d.py	LogisticRegression	skl_lm.LogisticRegression()	685	22	685	49	8536722207750200394	log_sl_learn_weekly.fit(X_train, y_train)	705	0	705	41	-352100813710173567
/cb-target/python/ce/d7/693977904b30240b6cebe57c3bb9331ba7639b2ddafff69bbcd11262615d.py	QuadraticDiscriminantAnalysis	QuadraticDiscriminantAnalysis()	532	14	532	45	6395800290479970597	QDA_smarket.fit(X_train2004, y_train2004)	534	0	534	41	7750924080563373406
/cb-target/python/ce/d7/693977904b30240b6cebe57c3bb9331ba7639b2ddafff69bbcd11262615d.py	QuadraticDiscriminantAnalysis	QuadraticDiscriminantAnalysis()	551	12	551	43	-868751887760940716	QDA_gspc3.fit(X_gspc3_train, y_gspc3_train)	552	0	552	43	7624135641242310585
/cb-target/python/ce/d7/693977904b30240b6cebe57c3bb9331ba7639b2ddafff69bbcd11262615d.py	QuadraticDiscriminantAnalysis	QuadraticDiscriminantAnalysis()	564	12	564	43	-1752117572374042666	QDA_gspc4.fit(X_gspc4_train, y_gspc4_train)	565	0	565	43	-8266259144503725378
/cb-target/python/ce/d7/693977904b30240b6cebe57c3bb9331ba7639b2ddafff69bbcd11262615d.py	LinearDiscriminantAnalysis	LinearDiscriminantAnalysis(solver='svd')	302	6	302	46	-7862152060343361281	lda.fit(X_train, y_train)	303	9	303	34	-2952141121615484663
/cb-target/python/ce/d7/693977904b30240b6cebe57c3bb9331ba7639b2ddafff69bbcd11262615d.py	LinearDiscriminantAnalysis	LinearDiscriminantAnalysis()	519	14	519	42	1521867679446450667	LDA_smarket.fit(X_train2004, y_train2004)	520	0	520	41	-2579457249481575656
/cb-target/python/88/6e/c86a6ca2e3f9390e4991152ce5aec04b887e1011dfc9ba19925f8e84fb33.py	LinearRegression	linear_model.LinearRegression()	108	8	108	39	2775299378294765091	model.fit(X, y)	109	10	109	25	2792121155268130706
/cb-target/python/88/6e/c86a6ca2e3f9390e4991152ce5aec04b887e1011dfc9ba19925f8e84fb33.py	LinearRegression	linear_model.LinearRegression()	129	9	129	40	3310832673817936576	linear_model.LinearRegression().fit(X.iloc[train_index], y.iloc[train_index])	129	9	129	86	175690342074048840
/cb-target/python/88/6e/c86a6ca2e3f9390e4991152ce5aec04b887e1011dfc9ba19925f8e84fb33.py	LinearRegression	linear_model.LinearRegression()	150	8	150	39	-5555362477926253278	model.fit(X, y)	151	10	151	25	-5740971038105466192
/cb-target/python/88/6e/c86a6ca2e3f9390e4991152ce5aec04b887e1011dfc9ba19925f8e84fb33.py	LinearRegression	linear_model.LinearRegression()	167	8	167	39	5627287288623083759	model.fit(X, y)	168	10	168	25	-2670394814086541438
/cb-target/python/88/6e/c86a6ca2e3f9390e4991152ce5aec04b887e1011dfc9ba19925f8e84fb33.py	LinearRegression	linear_model.LinearRegression()	188	9	188	40	-4069813511781120677	linear_model.LinearRegression().fit(X.iloc[train_index], y.iloc[train_index])	188	9	188	86	-6123935380342532566
/cb-target/python/88/6e/c86a6ca2e3f9390e4991152ce5aec04b887e1011dfc9ba19925f8e84fb33.py	LinearRegression	linear_model.LinearRegression()	216	8	216	39	2768991645972162294	model.fit(X, y)	217	10	217	25	-6617102807850587429
/cb-target/python/88/6e/c86a6ca2e3f9390e4991152ce5aec04b887e1011dfc9ba19925f8e84fb33.py	RandomForestClassifier	RandomForestClassifier(n_estimators = 1000,\n                           class_weight='balanced')	495	5	496	51	4970638113090596240	rf.fit(X, y)	507	0	507	12	-781760707920019276
/cb-target/python/88/6e/c86a6ca2e3f9390e4991152ce5aec04b887e1011dfc9ba19925f8e84fb33.py	RandomForestClassifier	RandomForestClassifier(n_estimators = 1000,\n                           class_weight='balanced')	528	5	529	51	61746190376953133	rf.fit(X, y)	540	0	540	12	4144524131454958257
/cb-target/python/88/6e/c86a6ca2e3f9390e4991152ce5aec04b887e1011dfc9ba19925f8e84fb33.py	RandomForestClassifier	RandomForestClassifier(n_estimators = 1000,\n                           class_weight='balanced')	561	5	562	51	8175395629880885215	rf.fit(X, y)	573	0	573	12	-3821877611846851911
/cb-target/python/88/6e/c86a6ca2e3f9390e4991152ce5aec04b887e1011dfc9ba19925f8e84fb33.py	RandomForestClassifier	RandomForestClassifier(n_estimators = 1000,\n                           class_weight='balanced')	589	5	590	51	-4065446340637362355	rf.fit(X, y)	601	0	601	12	-1893676058048846927
/cb-target/python/88/6e/c86a6ca2e3f9390e4991152ce5aec04b887e1011dfc9ba19925f8e84fb33.py	RandomForestClassifier	RandomForestClassifier(n_estimators = 1000,\n                           class_weight='balanced')	619	5	620	51	-2463735217005620731	rf.fit(X, y)	631	0	631	12	-7055766597608571190
/cb-target/python/88/6e/c86a6ca2e3f9390e4991152ce5aec04b887e1011dfc9ba19925f8e84fb33.py	RandomForestClassifier	RandomForestClassifier(n_estimators = 1000,\n                           class_weight='balanced')	649	5	650	51	3617858806735871169	rf.fit(X, y)	661	0	661	12	-4371036788619087398
/cb-target/python/88/6e/c86a6ca2e3f9390e4991152ce5aec04b887e1011dfc9ba19925f8e84fb33.py	RandomForestClassifier	RandomForestClassifier(n_estimators = 1000,\n                           class_weight='balanced')	681	5	682	51	2755644865466807871	rf.fit(X, y)	693	0	693	12	6245331971327688863
/cb-target/python/88/6e/c86a6ca2e3f9390e4991152ce5aec04b887e1011dfc9ba19925f8e84fb33.py	RandomForestClassifier	RandomForestClassifier(n_estimators = 1000,\n                           class_weight='balanced')	714	5	715	51	7962682590022554696	rf.fit(X, y)	726	0	726	12	2473373222795842971
/cb-target/python/88/6e/c86a6ca2e3f9390e4991152ce5aec04b887e1011dfc9ba19925f8e84fb33.py	LogisticRegression	LogisticRegression()	957	5	957	25	-6820061748223337653	lr.fit(X_train_pca, y_train)	960	0	960	28	2917615204498898953
/cb-target/python/88/6e/c86a6ca2e3f9390e4991152ce5aec04b887e1011dfc9ba19925f8e84fb33.py	DecisionTreeClassifier	DecisionTreeClassifier(criterion='entropy',\n                           random_state=4)	234	5	235	42	434310857664183053	dt.fit(X, y)	236	0	236	12	444773724566380122
/cb-target/python/88/6e/c86a6ca2e3f9390e4991152ce5aec04b887e1011dfc9ba19925f8e84fb33.py	DecisionTreeClassifier	DecisionTreeClassifier(criterion='entropy',\n                           random_state=4)	274	5	275	42	-942259960166512287	dt.fit(X, y)	276	0	276	12	8032385785035272117
/cb-target/python/88/6e/c86a6ca2e3f9390e4991152ce5aec04b887e1011dfc9ba19925f8e84fb33.py	DecisionTreeClassifier	DecisionTreeClassifier(criterion='entropy',\n                           random_state=4)	303	5	304	42	-8009126806169712078	dt.fit(X, y)	305	0	305	12	-3049104824796141976
/cb-target/python/88/6e/c86a6ca2e3f9390e4991152ce5aec04b887e1011dfc9ba19925f8e84fb33.py	DecisionTreeClassifier	DecisionTreeClassifier(criterion='entropy',\n                           random_state=4)	339	5	340	42	482500459329754878	dt.fit(X, y)	341	0	341	12	-842219608706580777
/cb-target/python/88/6e/c86a6ca2e3f9390e4991152ce5aec04b887e1011dfc9ba19925f8e84fb33.py	DecisionTreeClassifier	DecisionTreeClassifier(criterion='entropy',\n                           random_state=4)	381	5	382	42	-7951760634949008905	dt.fit(X, y)	383	0	383	12	-6772936289275648717
/cb-target/python/88/6e/c86a6ca2e3f9390e4991152ce5aec04b887e1011dfc9ba19925f8e84fb33.py	DecisionTreeClassifier	DecisionTreeClassifier(criterion='entropy',\n                           random_state=4)	423	5	424	42	-1851688541590102559	dt.fit(X, y)	425	0	425	12	7506156033861159140
/cb-target/python/88/6e/c86a6ca2e3f9390e4991152ce5aec04b887e1011dfc9ba19925f8e84fb33.py	DecisionTreeClassifier	DecisionTreeClassifier(criterion='entropy',\n                           random_state=4)	466	5	467	42	-8347735691175600501	dt.fit(X, y)	468	0	468	12	3957137026030859392
/cb-target/python/88/6e/c86a6ca2e3f9390e4991152ce5aec04b887e1011dfc9ba19925f8e84fb33.py	KMeans	KMeans(n_clusters=4)	774	12	774	32	1688666703136804323	estimator.fit(X)	784	0	784	16	6720802520508674329
/cb-target/python/88/6e/c86a6ca2e3f9390e4991152ce5aec04b887e1011dfc9ba19925f8e84fb33.py	KMeans	KMeans(n_clusters=3)	752	12	752	32	-8084925102308004083	estimator.fit(X)	754	0	754	16	-6993464339949886015
/cb-target/python/88/6e/c86a6ca2e3f9390e4991152ce5aec04b887e1011dfc9ba19925f8e84fb33.py	KMeans	KMeans(n_clusters=3)	797	12	797	32	-2953959732956621191	estimator.fit(X)	801	0	801	16	6697434724336316297
/cb-target/python/3d/af/70ec101d5a9cd961b7265d0988c415a793a1778829b9a2fda98c56a7ccd1.py	LatentDirichletAllocation	LatentDirichletAllocation(n_topics=n_topics, max_iter=5, learning_method='online',\n                                learning_offset=50., random_state=0)	435	10	436	68	5624433414663863079	lda_mdl.fit(ct_vect_prep)	440	0	440	25	4448279645531447166
/cb-target/python/37/49/13cd07feb4e829a7f6ad55575dbc0771b9256fc891028ec4bb0b9f84670f.py	RandomForestClassifier	RandomForestClassifier(n_estimators=10, max_depth=None,\\n                             min_samples_split=2, random_state=0)	214	6	215	65	901408115904841005	clf.fit(X_train,y_train)	218	0	218	24	8292304884882537454
/cb-target/python/37/49/13cd07feb4e829a7f6ad55575dbc0771b9256fc891028ec4bb0b9f84670f.py	RFE	RFE(clf, n_features_to_select=n_feat, step=step)	263	11	263	59	1398841374898390647	selector.fit(X_train, y_train)	266	11	266	41	1462052259919142769
/cb-target/python/37/49/13cd07feb4e829a7f6ad55575dbc0771b9256fc891028ec4bb0b9f84670f.py	RFE	RFE(clf, n_features_to_select=n_feat, step=step)	369	11	369	59	-7120609151420126085	selector.fit(X_train, y_train)	372	11	372	41	7879556180444805094
/cb-target/python/37/49/13cd07feb4e829a7f6ad55575dbc0771b9256fc891028ec4bb0b9f84670f.py	RFECV	RFECV(clf, step=step, cv=5, n_jobs=-1,\n              scoring='accuracy')	315	11	316	33	5568577456241056263	selector.fit(X_train, y_train)	319	11	319	41	-2686805327244422152
/cb-target/python/bf/9c/8063a31f34f98fe3503934c61ae7f4c7b4f8f68c9da1b155867c253852f0.py	GradientBoostingClassifier	GradientBoostingClassifier()	265	8	265	36	-7228798114213430884	GradientBoostingClassifier().fit(X_train, y_train)	265	8	265	58	3947763779498020036
/cb-target/python/bf/9c/8063a31f34f98fe3503934c61ae7f4c7b4f8f68c9da1b155867c253852f0.py	GradientBoostingClassifier	GradientBoostingClassifier(random_state=3)	225	6	225	48	8842553054112572445	clf.fit(X_train, y_train)	243	15	243	40	5365909220398080633
/cb-target/python/bf/9c/8063a31f34f98fe3503934c61ae7f4c7b4f8f68c9da1b155867c253852f0.py	GridSearchCV	GridSearchCV(clf, param_grid=parameters, scoring=scorer)	234	11	234	67	-397866421850733897	grid_obj.fit(X_train, y_train)	237	11	237	41	-6669172395364366940
/cb-target/python/f9/06/f0ce4e0189713f3afc5a8db249eda4cf651be0e89d77426b36935b4bded5.py	GradientBoostingClassifier	GradientBoostingClassifier(random_state=0)	238	6	238	48	7881063832599672297	clf.fit(X_train, y_train)	267	15	267	40	5783956374394562109
/cb-target/python/f9/06/f0ce4e0189713f3afc5a8db249eda4cf651be0e89d77426b36935b4bded5.py	GridSearchCV	GridSearchCV(clf, parameters, scoring=scorer, cv=len(parameters), n_jobs=-1)	255	11	255	87	8851017333044757515	grid_obj.fit(X_train, y_train)	259	11	259	41	-5663005625647162214
/cb-target/python/4a/72/662577bc7d1bf5392c21c8c67914144093b73981605d0e6588860ba91de5.py	PCA	PCA(n_components=40)	106	6	106	26	2898746224878990978	pca.fit(X)	107	0	107	10	8473496548538660986
/cb-target/python/4a/72/662577bc7d1bf5392c21c8c67914144093b73981605d0e6588860ba91de5.py	LabelEncoder	LabelEncoder()	67	8	67	22	9047656645350251790	lbl_enc.fit(X_train['CSA'])	68	0	68	27	1583381029920471271
/cb-target/python/4a/72/662577bc7d1bf5392c21c8c67914144093b73981605d0e6588860ba91de5.py	LabelEncoder	LabelEncoder()	67	8	67	22	9047656645350251790	lbl_enc.fit(X_test['CSA'])	71	0	71	26	7227656584055127133
/cb-target/python/82/96/65a7d180b41049d72c3a0521110f0791a014a0dd819628c8ae149b49ac5d.py	LogisticRegression	LogisticRegression()	83	8	83	28	7490834649469923751	model.fit(X_train, y_train)	84	0	84	27	-8812804335678633986
/cb-target/python/3f/54/6413d86fc39c0e42574dc82d4115a98e360989e551a0e58d1af77cf8dda5.py	SVC	SVC(C=10.0, cache_size=200, class_weight='balanced', coef0=0.0,\n    decision_function_shape=None, degree=3, gamma='auto', kernel='rbf',\n    max_iter=-1, probability=False, random_state=None, shrinking=True,\n    tol=0.001, verbose=False)	111	6	114	29	-3898368374255125010	svm.fit(X_train, y_train)	115	0	115	25	2638578372136392222
/cb-target/python/3f/54/6413d86fc39c0e42574dc82d4115a98e360989e551a0e58d1af77cf8dda5.py	SVC	SVC(C=100.0, cache_size=200, class_weight='balanced', coef0=0.0,\n    decision_function_shape=None, degree=3, gamma='auto', kernel='rbf',\n    max_iter=-1, probability=False, random_state=seed, shrinking=True,\n    tol=0.001, verbose=False)	152	6	155	29	6948570990890485252	svm.fit(X_train, y_train, sample_weight = sw)	159	0	159	45	-9085912388372636563
/cb-target/python/3f/54/6413d86fc39c0e42574dc82d4115a98e360989e551a0e58d1af77cf8dda5.py	SGDClassifier	SGDClassifier(loss = 'epsilon_insensitive',penalty = 'l1',alpha = 0.001,l1_ratio = 0.15,fit_intercept = True,\n                        n_iter = 3, shuffle = True, verbose = 0, epsilon = 0.1, n_jobs = 1, random_state = seed,\n                        learning_rate = 'optimal', eta0=0.001, power_t = 0.5, class_weight = 'balanced', warm_start = False,\n                        average= False)	187	10	190	39	-2200892717860798612	sgd_clf.fit(X_train, y_train, sample_weight = sw)	192	0	192	49	6105814652926298980
/cb-target/python/3f/54/6413d86fc39c0e42574dc82d4115a98e360989e551a0e58d1af77cf8dda5.py	Perceptron	Perceptron(penalty = 'l1',alpha = 0.001,fit_intercept = True, n_iter = 1, shuffle = True, verbose = 0,\n                   eta0 = 0.1, n_jobs = 1, random_state = 0, class_weight = 'balanced', warm_start = False)	287	11	288	107	-8422152859458962100	cv_p_clf.fit(CV_train, y_CVtrain, sample_weight = sw)	300	8	300	61	8905196007960616435
/cb-target/python/3f/54/6413d86fc39c0e42574dc82d4115a98e360989e551a0e58d1af77cf8dda5.py	Perceptron	Perceptron(penalty = 'l2',alpha = 0.001,fit_intercept = True, n_iter = 5, shuffle = True, verbose = 0,\n                   eta0 = 0.1, n_jobs = 1, random_state = seed, class_weight = 'balanced', warm_start = False)	209	8	210	110	7620698638782802974	p_clf.fit(X_train, y_train, sample_weight = sw)	213	0	213	47	4969231805921771524
/cb-target/python/3f/54/6413d86fc39c0e42574dc82d4115a98e360989e551a0e58d1af77cf8dda5.py	PassiveAggressiveClassifier	PassiveAggressiveClassifier(C = 15.0, fit_intercept = True, n_iter = 5, shuffle = True, verbose = 0,\n                                     loss = 'hinge', random_state = seed, warm_start = False, class_weight = 'balanced')	234	10	235	120	-4968661943301175917	pac_clf.fit(X_train, y_train)	237	0	237	29	5394885611819871794
/cb-target/python/d7/be/7ae003794543118fb214ffa4bb34cd3d27a5a60774e28b83a2b775e931ba.py	Ridge	Ridge(alpha=5)	135	13	135	27	-5526799585737897398	Ridge(alpha=5).fit(train,np.log(target))	135	13	135	53	-5221004553555988167
/cb-target/python/c5/d6/a21601a9145ff84196f12975a9f700f25feb95fe8a137e6a66df19f3e211.py	Ridge	linear_model.Ridge(normalize=True)	89	5	89	39	3836268104393803267	lr.fit(X_train, y_train)	94	0	94	24	-5441327850709679499
/cb-target/python/c5/d6/a21601a9145ff84196f12975a9f700f25feb95fe8a137e6a66df19f3e211.py	LabelEncoder	LabelEncoder()	29	5	29	19	-5935883681888640441	le.fit(df['UniqueCarrier'].head(10))	31	0	31	36	-5038485579305579809
/cb-target/python/46/b2/feb2a559407251340af64b7fa51323a2f5a13c1717b83290dd8e27c9537b.py	PCA	PCA(n_components = 2)	199	6	199	27	-4231889739559013099	pca.fit(good_data)	200	0	200	18	2442818715649448538
/cb-target/python/46/b2/feb2a559407251340af64b7fa51323a2f5a13c1717b83290dd8e27c9537b.py	PCA	PCA(n_components = 6)	179	6	179	27	-4939257933017334858	pca.fit(good_data)	180	0	180	18	-5216154528341651187
/cb-target/python/46/b2/feb2a559407251340af64b7fa51323a2f5a13c1717b83290dd8e27c9537b.py	DecisionTreeRegressor	DecisionTreeRegressor(random_state=505)	113	12	113	51	3749971149748670327	DecisionTreeRegressor(random_state=505).fit(X_train,y_train)	113	12	113	72	509004355201553036
/cb-target/python/46/b2/feb2a559407251340af64b7fa51323a2f5a13c1717b83290dd8e27c9537b.py	GaussianMixture	GaussianMixture(n_components=2, covariance_type='full')	228	12	228	67	2577165096816992876	GaussianMixture(n_components=2, covariance_type='full').fit(reduced_data)	228	12	228	85	-540956013779446007
/cb-target/python/50/34/bdf925d89c70a4079c9eea1b6915d65597046ec513d14e768a1d44c87835.py	LogisticRegression	linear_model.LogisticRegression(C=1e5,solver='lbfgs',fit_intercept=False)	101	12	101	85	2015553086094415497	sk_logreg.fit(XX,y)	102	0	102	19	-4764993115550313847
/cb-target/python/10/0b/01987b92cd5553f241823d1c9b41d9e9492c6818dbceb03cecc8b89b1105.py	BaggingClassifier	BaggingClassifier(best_model, random_state=1)	319	10	319	55	-1754742617389579299	bagging.fit(X,Y)	320	0	320	16	-6353984825947499190
/cb-target/python/10/0b/01987b92cd5553f241823d1c9b41d9e9492c6818dbceb03cecc8b89b1105.py	RandomizedSearchCV	RandomizedSearchCV(model,\n                        param_distributions=param_dist,\n                        n_iter=50)	292	16	294	34	-5495824591999448964	random_search.fit(X_train, Y_train)	296	0	296	35	5448256939355478140
/cb-target/python/0d/79/017a17dccf4da365950c53cd24f2ba80204c73e23f58b757b9cd178a8a20.py	LogisticRegression	LogisticRegression()	57	18	57	38	-6370461998966007737	sentiment_model.fit(train_matrix, train_data['sentiment'])	58	0	58	58	4176425919321496119
/cb-target/python/3c/99/505f61aa2fea495193d30eff9618a752ee402e3471d8aa865a65d983cff7.py	LogisticRegression	LogisticRegression(penalty='l2', C=1)	148	8	148	45	-4274798522663794501	model.fit(X_train, y_train)	153	0	153	27	4126466016887031470
/cb-target/python/ff/82/7f2e8fbdeb3a86273565ab46f47ead6637c63777366cb44dbd520891433e.py	GridSearchCV	grid_search.GridSearchCV(ensemble.GradientBoostingClassifier(n_estimators = 100, random_state = 2014),\n                                   param_grid, cv = 10, scoring = scorer_mae, n_jobs = -1)	164	10	165	90	5263682134516664684	gbm_clf.fit(score, stars)	168	0	168	25	-8786992847211191765
/cb-target/python/7d/b7/c31c5e9317877e66996af026dd1c078f3a93eb43e6dd230dc149ee126555.py	SVC	svm.SVC(probability=True, C=0.01)	228	8	228	41	-7697051798192246595	svm.SVC(probability=True, C=0.01).fit(XX1,YY1)	228	8	228	54	2391726006174319072
/cb-target/python/7d/b7/c31c5e9317877e66996af026dd1c078f3a93eb43e6dd230dc149ee126555.py	SVC	svm.SVC(kernel='linear', C=C)	199	16	199	45	-12764518163872226	svm.SVC(kernel='linear', C=C).fit(XX1[train,],YY1[train])	199	16	199	73	-2543213058708704749
/cb-target/python/7d/b7/c31c5e9317877e66996af026dd1c078f3a93eb43e6dd230dc149ee126555.py	RandomForestClassifier	RandomForestClassifier(n_jobs=8,n_estimators=500)	292	6	292	55	-7941118468633886363	clf.fit(X_train_perm, Y_train_perm)	293	0	293	35	5831320124892914309
/cb-target/python/7d/b7/c31c5e9317877e66996af026dd1c078f3a93eb43e6dd230dc149ee126555.py	Imputer	Imputer(missing_values='NaN', strategy='mean', axis=0)	51	6	51	60	1308110655032589040	imp.fit(X_features)	52	0	52	19	-1747307857903985527
/cb-target/python/7d/b7/c31c5e9317877e66996af026dd1c078f3a93eb43e6dd230dc149ee126555.py	LDA	LDA()	256	6	256	11	1845265474963608940	clf.fit(X_train_perm, Y_train_perm)	257	0	257	35	-5334207121241952922
/cb-target/python/81/31/1d7a969e9bec147fc4d27fb0b6cb3fd5d1a7e4a629aa91f844843485b9c8.py	RandomForestClassifier	RandomForestClassifier(n_jobs=2)	243	5	243	37	4329184727124405167	rf.fit(messages_tfidf,df_train['age_group'])	244	14	244	58	-3265983566383978441
/cb-target/python/81/31/1d7a969e9bec147fc4d27fb0b6cb3fd5d1a7e4a629aa91f844843485b9c8.py	CountVectorizer	"CountVectorizer(tokenizer=nltk.word_tokenize,token_pattern=""[a-zA-Z]{2,15}"",stop_words=""english"")"	78	22	78	119	-8421937039432725681	bow_transformer.fit(df)	79	4	79	27	539671130537232244
/cb-target/python/81/31/1d7a969e9bec147fc4d27fb0b6cb3fd5d1a7e4a629aa91f844843485b9c8.py	CountVectorizer	"CountVectorizer(tokenizer=nltk.word_tokenize,token_pattern=""[a-zA-Z]{2,15}"",stop_words=""english""\n                                 )"	93	18	94	34	-4918329648761107688	"CountVectorizer(tokenizer=nltk.word_tokenize,token_pattern=""[a-zA-Z]{2,15}"",stop_words=""english""\n                                 ).fit(df_train['tweet'])"	93	18	94	57	6443576900556347135
/cb-target/python/81/31/1d7a969e9bec147fc4d27fb0b6cb3fd5d1a7e4a629aa91f844843485b9c8.py	CountVectorizer	"CountVectorizer(tokenizer=nltk.word_tokenize,token_pattern=""[a-zA-Z]{2,15}"",stop_words=""english""\n                                 )"	342	18	343	34	6486890599132020021	"CountVectorizer(tokenizer=nltk.word_tokenize,token_pattern=""[a-zA-Z]{2,15}"",stop_words=""english""\n                                 ).fit(df_train2['tweet'])"	342	18	343	58	-1406129546734746485
/cb-target/python/81/31/1d7a969e9bec147fc4d27fb0b6cb3fd5d1a7e4a629aa91f844843485b9c8.py	MultinomialNB	MultinomialNB()	88	16	88	31	-1370122880504698430	MultinomialNB().fit(vectorize(df_train['tweet']), df_train['age_group'])	88	16	88	88	-6075967783862194371
/cb-target/python/81/31/1d7a969e9bec147fc4d27fb0b6cb3fd5d1a7e4a629aa91f844843485b9c8.py	MultinomialNB	MultinomialNB()	337	18	337	33	3397465328235393727	MultinomialNB().fit(vectorize(df_train2['tweet']), df_train2['age_group'])	337	18	337	92	-2388256127082794745
/cb-target/python/81/31/1d7a969e9bec147fc4d27fb0b6cb3fd5d1a7e4a629aa91f844843485b9c8.py	TfidfTransformer	TfidfTransformer()	81	24	81	42	-5010664425848539769	TfidfTransformer().fit(messages_bow)	81	24	81	60	-6135212052279332280
/cb-target/python/81/31/1d7a969e9bec147fc4d27fb0b6cb3fd5d1a7e4a629aa91f844843485b9c8.py	TfidfTransformer	TfidfTransformer()	119	20	119	38	-5401164669659671606	TfidfTransformer().fit(messages_bow)	119	20	119	56	2999976841946648877
/cb-target/python/7c/16/984d3e696c6e87cf14f62df30423d819a6acbb53742889adc3ecd3feabad.py	SVC	svm.SVC(kernel='rbf', gamma=0.8, C=1.0)	95	10	95	49	653348243606038964	rbf_svm.fit(train_std, train_labels)	108	0	108	36	7441467270883888519
/cb-target/python/7c/16/984d3e696c6e87cf14f62df30423d819a6acbb53742889adc3ecd3feabad.py	RandomForestClassifier	RandomForestClassifier(n_jobs=-1,\n                                n_estimators=200,\n                                oob_score=True,\n                                max_features=None)	99	10	102	50	775447892247512758	rforest.fit(train_std, train_labels)	110	0	110	36	-5928591392928168807
/cb-target/python/7c/16/984d3e696c6e87cf14f62df30423d819a6acbb53742889adc3ecd3feabad.py	LogisticRegression	LogisticRegression(solver='sag',\n                          max_iter=100,\n                          multi_class='ovr')	96	7	98	44	-7183349897549589883	logr.fit(train_std, train_labels)	109	0	109	33	4624285385593044346
/cb-target/python/7c/16/984d3e696c6e87cf14f62df30423d819a6acbb53742889adc3ecd3feabad.py	KMeans	KMeans(n_clusters = j)	31	10	31	32	1438614517662136257	est.fit(df_std)	32	4	32	19	-1331282729995338310
/cb-target/python/7c/16/984d3e696c6e87cf14f62df30423d819a6acbb53742889adc3ecd3feabad.py	StandardScaler	preprocessing.StandardScaler()	19	12	19	42	-6974418582241955009	preprocessing.StandardScaler().fit(carb_df[['Carbon', 'Infrared']])	19	12	19	79	-2317605354657779222
/cb-target/python/7c/16/984d3e696c6e87cf14f62df30423d819a6acbb53742889adc3ecd3feabad.py	LinearSVC	svm.LinearSVC(C=1.0)	94	10	94	30	-3207222734621467808	lin_svm.fit(train_std, train_labels)	107	0	107	36	7626903642116809427
/cb-target/python/0f/3a/65a7bbe06cc1d9ae38b7de39efec7c36bc06ab9d7a5fcd7c30dbc8a76a4b.py	LogisticRegression	LogisticRegression()	313	6	313	26	2234599834116472146	clf.fit(train,y.reshape(1,y.shape[0])[0])	318	0	318	41	-1016172736095944489
/cb-target/python/5f/bf/1a04353e59a14ef5fb933e924c79cefdb276930fe598783667a822b592ec.py	DecisionTreeClassifier	DecisionTreeClassifier()	12	6	12	30	-1204312797644373385	clf.fit(X, y)	13	0	13	13	-2807566706395619108
/cb-target/python/5f/bf/1a04353e59a14ef5fb933e924c79cefdb276930fe598783667a822b592ec.py	DecisionTreeClassifier	DecisionTreeClassifier()	36	6	36	30	-6673951924362893301	clf.fit (X, y)	37	0	37	14	3859827331806909188
/cb-target/python/34/97/632c23229763b9f86ec0c0ae1dd113cf3ece0951a0600c2ac01c75ec0d89.py	make_pipeline	make_pipeline(PolynomialFeatures(degree), Ridge())	84	12	84	62	8802940644297721333	model.fit(X_train, y_train)	85	4	85	31	-8840449379617937751
/cb-target/python/df/37/d94a4d8444598d35740310a08e98f3c43ce2aea3c18b24976dec7493fa0c.py	MultinomialNB	MultinomialNB()	375	6	375	21	-6715381663296308795	clf.fit(X_train_std, y_train)	376	0	376	29	4642345842230516933
/cb-target/python/df/37/d94a4d8444598d35740310a08e98f3c43ce2aea3c18b24976dec7493fa0c.py	MultinomialNB	MultinomialNB()	375	6	375	21	-6715381663296308795	clf.fit(X_train_std, y_train)	377	9	377	38	5475671320949888491
/cb-target/python/df/37/d94a4d8444598d35740310a08e98f3c43ce2aea3c18b24976dec7493fa0c.py	StandardScaler	StandardScaler(with_mean=False)	304	5	304	36	6531277579000202240	sc.fit(X_train)	305	0	305	15	2361169281799324544
/cb-target/python/df/37/d94a4d8444598d35740310a08e98f3c43ce2aea3c18b24976dec7493fa0c.py	SGDClassifier	linear_model.SGDClassifier()	338	6	338	34	-4403250473218921810	clf.fit(X_train_std, y_train)	339	0	339	29	2981011147595134114
/cb-target/python/df/37/d94a4d8444598d35740310a08e98f3c43ce2aea3c18b24976dec7493fa0c.py	SGDClassifier	linear_model.SGDClassifier()	338	6	338	34	-4403250473218921810	clf.fit(X_train_std, y_train)	340	9	340	38	-3212373747254909372
/cb-target/python/df/37/d94a4d8444598d35740310a08e98f3c43ce2aea3c18b24976dec7493fa0c.py	SGDClassifier	linear_model.SGDClassifier(loss='perceptron')	393	6	393	51	-726824772052240191	clf.fit(X_train_std, y_train)	394	0	394	29	-1450572702558124964
/cb-target/python/df/37/d94a4d8444598d35740310a08e98f3c43ce2aea3c18b24976dec7493fa0c.py	SGDClassifier	linear_model.SGDClassifier(loss='perceptron')	393	6	393	51	-726824772052240191	clf.fit(X_train_std, y_train)	395	9	395	38	5225717512987267227
/cb-target/python/df/37/d94a4d8444598d35740310a08e98f3c43ce2aea3c18b24976dec7493fa0c.py	SGDClassifier	linear_model.SGDClassifier(loss='log', n_iter=50, alpha=0.00001)	357	6	357	70	8788252376885591193	clf.fit(X_train_std, y_train)	358	0	358	29	-3502306513963998966
/cb-target/python/df/37/d94a4d8444598d35740310a08e98f3c43ce2aea3c18b24976dec7493fa0c.py	SGDClassifier	linear_model.SGDClassifier(loss='log', n_iter=50, alpha=0.00001)	357	6	357	70	8788252376885591193	clf.fit(X_train_std, y_train)	359	9	359	38	-9135886395111839094
/cb-target/python/d6/92/6dd624fd5be2bcf6c44fd5f5b37426a7bfc0f4fc0bfdd98252af248db6b8.py	KernelDensity	KernelDensity(kernel=kernel, bandwidth=0.25)	359	21	359	65	-1561595082093421166	kernel_density.fit(sample)	360	4	360	30	8621503055656745029
/cb-target/python/d6/92/6dd624fd5be2bcf6c44fd5f5b37426a7bfc0f4fc0bfdd98252af248db6b8.py	KernelDensity	KernelDensity(kernel='gaussian', bandwidth=bandwidth)	346	21	346	74	507780239100225256	kernel_density.fit(sample)	347	4	347	30	2321887950170002879
/cb-target/python/d6/92/6dd624fd5be2bcf6c44fd5f5b37426a7bfc0f4fc0bfdd98252af248db6b8.py	KernelDensity	KernelDensity(bandwidth=100000)	398	17	398	48	627408425291856117	kernel_density.fit(sample[:, np.newaxis])	399	0	399	41	-2137657455496597184
/cb-target/python/62/66/3936d2c2a489c6c55bc5f69d9504fe0caecd4480fd71b288ea4845029b51.py	LinearRegression	LinearRegression()	182	7	182	25	-6018294071554669499	clf1.fit(X_train, y_train)	183	0	183	26	6562941886639947012
/cb-target/python/62/66/3936d2c2a489c6c55bc5f69d9504fe0caecd4480fd71b288ea4845029b51.py	LogisticRegression	LogisticRegression(C=reg, penalty=penalty)	318	10	318	52	-2914940051267234974	clf.fit(X_train, y_train)	319	4	319	29	-6070514101399348098
/cb-target/python/62/66/3936d2c2a489c6c55bc5f69d9504fe0caecd4480fd71b288ea4845029b51.py	LogisticRegression	LogisticRegression(C=reg)	276	7	276	32	3452954638250036909	clf4.fit(temps.reshape(-1,1), pfail)	277	0	277	36	90941786291700692
/cb-target/python/62/66/3936d2c2a489c6c55bc5f69d9504fe0caecd4480fd71b288ea4845029b51.py	GridSearchCV	GridSearchCV(clf, param_grid=parameters, cv=n_folds)	327	9	327	61	8597998659910027616	gs.fit(X_train, y_train)	328	4	328	28	1685396521216538572
/cb-target/python/7f/9e/651d084a2b11278ace3e9ac6395ad9dbf9c8a657c20b1c4ba9f3dce7b461.py	LinearRegression	linear_model.LinearRegression()	114	5	114	36	8160215430016766157	lm.fit(X, y)	135	8	135	20	-8980661584678120555
/cb-target/python/7f/9e/651d084a2b11278ace3e9ac6395ad9dbf9c8a657c20b1c4ba9f3dce7b461.py	LinearRegression	linear_model.LinearRegression()	114	5	114	36	8160215430016766157	lm.fit(X, y)	203	8	203	20	7256897874323476123
/cb-target/python/7f/9e/651d084a2b11278ace3e9ac6395ad9dbf9c8a657c20b1c4ba9f3dce7b461.py	LinearRegression	linear_model.LinearRegression()	387	5	387	36	-1341954699821446807	lm.fit(X, y)	406	8	406	20	6376512647285518935
/cb-target/python/7f/9e/651d084a2b11278ace3e9ac6395ad9dbf9c8a657c20b1c4ba9f3dce7b461.py	LinearRegression	linear_model.LinearRegression()	446	5	446	36	-7057781142510092689	lm.fit(X, y)	463	8	463	20	-4780683257295551477
/cb-target/python/8d/05/1835b955508db8ea78674b97b62aadedad402cc8debefb1de85ecb85051b.py	RandomForestClassifier	RandomForestClassifier(n_estimators=50, min_samples_leaf=8, min_samples_split=3, \\n                                 class_weight={0:1, 1:8}, \\n                                 max_features=20, random_state=0, max_depth=40)	49	6	51	79	759500891256837318	rfc.fit(X_train, y_train)	52	6	52	31	9077021151218582377
/cb-target/python/8d/05/1835b955508db8ea78674b97b62aadedad402cc8debefb1de85ecb85051b.py	LogisticRegression	LogisticRegression(class_weight={0:1, 1:3}, random_state=1001)	267	5	267	67	1156751649026154731	lr.fit(pd.DataFrame(X_train, columns = features), y_train)	268	0	268	58	-4023076505799938446
/cb-target/python/9d/79/ef62a893d2a7f1912e87c23cabbf0d10352af96eb16cfd07e4be1d2385f4.py	LinearRegression	linear_model.LinearRegression()	74	14	74	45	-8238427259240753506	clf.fit(X, y)	79	8	79	21	9191392190574363914
/cb-target/python/3f/20/6e472a633a635cc4a6613b44640972d32014d3e4958c1d2a9dda8fa91381.py	RandomForestRegressor	ensemble.RandomForestRegressor(n_estimators=tree_count, max_depth=8, random_state=11)	43	12	43	97	8999394435326406804	model.fit(x_train, y_train)	44	4	44	31	5602124138829766134
/cb-target/python/53/31/9f07f436d0654a3566e09200dba628e5e4dbae243cea6013375b76b7762c.py	LogisticRegression	LogisticRegression()	97	6	97	26	-4936266877331480404	LogisticRegression().fit(xtrain, ytrain)	97	6	97	46	-3047947493302288902
/cb-target/python/53/31/9f07f436d0654a3566e09200dba628e5e4dbae243cea6013375b76b7762c.py	BernoulliNB	BernoulliNB()	89	6	89	19	-2336020672103063240	BernoulliNB().fit(xtrain, ytrain)	89	6	89	39	-4948177100514980205
/cb-target/python/53/31/9f07f436d0654a3566e09200dba628e5e4dbae243cea6013375b76b7762c.py	CountVectorizer	CountVectorizer(ngram_range=(1,2))	31	13	31	47	-7247715434106094677	vectorizer.fit(critics.quote)	52	20	52	49	188302036791414988
/cb-target/python/53/31/9f07f436d0654a3566e09200dba628e5e4dbae243cea6013375b76b7762c.py	MultinomialNB	MultinomialNB()	81	6	81	21	-2548641541232153846	MultinomialNB().fit(xtrain, ytrain)	81	6	81	41	4966690093681767328
/cb-target/python/98/c1/1718244dbc59aa7d10ab2bc50e6a309541a59a204c212e599f8b8546fee4.py	GridSearchCV	GridSearchCV(clf, parameters, scoring = f1_scorer)	208	11	208	61	1670484565370504927	grid_obj.fit(X_train, y_train)	211	11	211	41	1485280216352761921
/cb-target/python/29/ae/a66b6012dd1ad5c68c8dfa0622660d0a379de8ff5dd13cbae2de629c79f0.py	LinearRegression	LinearRegression()	83	6	83	24	-8558766911840831557	clf.fit(X_train, y_train)	84	0	84	25	8304614004427492521
/cb-target/python/f2/ad/9dcc7452a2b707d34c031d74780848a71917f5d2611edfb845d0aa691a66.py	KNeighborsRegressor	KNeighborsRegressor(n_neighbors=1)	29	17	29	51	8286465345648773625	income_imputer.fit(train_w_monthly_income[cols], train_w_monthly_income.monthly_income)	51	0	51	87	6309392435661747510
/cb-target/python/6b/dc/a01c60e56cc7eb497269fbe9685fddf5db8222d250d71a05c8c86567bbdf.py	MultinomialNB	MultinomialNB()	64	5	64	20	2382875261730695774	nb.fit(X_train_dtm,y_train)	65	0	65	27	8769570058015133938
/cb-target/python/6b/dc/a01c60e56cc7eb497269fbe9685fddf5db8222d250d71a05c8c86567bbdf.py	MultinomialNB	MultinomialNB()	64	5	64	20	2382875261730695774	nb.fit(X_train_dtm,y_train)	211	0	211	27	-7083745513080042950
/cb-target/python/cd/0a/66f21b478c69801056f43c6e7dfdadbefeaba4b887c8dfd86857c7b925d8.py	KNeighborsClassifier	KNeighborsClassifier(n_neighbors = 3)	347	6	347	43	-7369737836728835875	knn.fit(X_train, Y_train)	349	0	349	25	2866787351442658101
/cb-target/python/cd/0a/66f21b478c69801056f43c6e7dfdadbefeaba4b887c8dfd86857c7b925d8.py	GaussianNB	GaussianNB()	360	11	360	23	5111126769120645743	gaussian.fit(X_train, Y_train)	362	0	362	30	-8467019452239411471
/cb-target/python/cd/0a/66f21b478c69801056f43c6e7dfdadbefeaba4b887c8dfd86857c7b925d8.py	SVC	SVC()	321	6	321	11	-1675860787581768336	svc.fit(X_train, Y_train)	323	0	323	25	902753561828411000
/cb-target/python/cd/0a/66f21b478c69801056f43c6e7dfdadbefeaba4b887c8dfd86857c7b925d8.py	RandomForestClassifier	RandomForestClassifier(n_estimators=100)	334	16	334	56	-3437850291509562288	random_forest.fit(X_train, Y_train)	336	0	336	35	3707798932278305615
/cb-target/python/cd/0a/66f21b478c69801056f43c6e7dfdadbefeaba4b887c8dfd86857c7b925d8.py	LogisticRegression	LogisticRegression()	308	9	308	29	4024203304472369694	logreg.fit(X_train, Y_train)	310	0	310	28	-356317404880345007
/cb-target/python/98/24/0301928e3024c1fd274582c641d4d68a6ca15c30e33ba0bdc487fe5b932a.py	LogisticRegression	LogisticRegression()	64	6	64	26	-1706618635516745343	clf.fit(df.compare.values.reshape(-1, 1), df.is_duplicate.values)	65	0	65	65	-208490975456008583
/cb-target/python/58/55/0d9d89978703316310b9c6cfabdd180a75933dbf988cc6b2a54a4bd16f2c.py	SVC	SVC(C = 1.4)	280	10	280	22	3685529343672313175	svc.fit(scale(X_train_cv), y_train_cv)	281	4	281	42	-3949397065345258436
/cb-target/python/58/55/0d9d89978703316310b9c6cfabdd180a75933dbf988cc6b2a54a4bd16f2c.py	RandomForestClassifier	RandomForestClassifier(n_estimators = 100)	250	20	250	62	6405369494275585007	random_forest.fit(scale(X_train_cv), y_train_cv)	251	4	251	52	8350961229070567498
/cb-target/python/58/55/0d9d89978703316310b9c6cfabdd180a75933dbf988cc6b2a54a4bd16f2c.py	LogisticRegression	LogisticRegression()	123	26	123	46	5277056445064647883	logistic_regression.fit(scale(X_train_cv), y_train_cv)	124	4	124	58	4162449075046674301
/cb-target/python/58/55/0d9d89978703316310b9c6cfabdd180a75933dbf988cc6b2a54a4bd16f2c.py	LogisticRegression	LogisticRegression()	146	22	146	42	-313052723194518984	logistic_regression.fit(X_train, y_train)	147	0	147	41	3837263733116499805
/cb-target/python/58/55/0d9d89978703316310b9c6cfabdd180a75933dbf988cc6b2a54a4bd16f2c.py	LogisticRegression	LogisticRegression()	222	26	222	46	-3301803394437548523	logistic_regression.fit(scale(X_train_cv), y_train_cv)	223	4	223	58	-2206862850170235678
/cb-target/python/58/55/0d9d89978703316310b9c6cfabdd180a75933dbf988cc6b2a54a4bd16f2c.py	GridSearchCV	"GridSearchCV(cls, parameters, cv=5, n_jobs=8, scoring=""accuracy"")"	307	5	307	70	-4888527095392760840	gs.fit(X_train, y_train)	308	0	308	24	5315735543630942221
/cb-target/python/7b/7b/fbc271a360893f39d5782bc18ee64d791e86db71b97c08ee676c8615a4ac.py	NearestNeighbors	NearestNeighbors(20, 0.4)	259	8	259	33	-221093500253806029	neigh.fit(topic_feature_norm)	260	0	260	29	3928612141423802114
/cb-target/python/7b/7b/fbc271a360893f39d5782bc18ee64d791e86db71b97c08ee676c8615a4ac.py	KMeans	KMeans(n_clusters=n_clusters, random_state=0)	190	9	190	54	6402866164232170787	KMeans(n_clusters=n_clusters, random_state=0).fit(topic_feature)	190	9	190	73	-3270451024318973171
/cb-target/python/7b/7b/fbc271a360893f39d5782bc18ee64d791e86db71b97c08ee676c8615a4ac.py	KMeans	KMeans(n_clusters=n_clusters, random_state=0)	217	14	217	59	1781504951209843344	KMeans(n_clusters=n_clusters, random_state=0).fit(topic_feature_norm)	217	14	217	83	8052860774932919719
/cb-target/python/7b/7b/fbc271a360893f39d5782bc18ee64d791e86db71b97c08ee676c8615a4ac.py	AgglomerativeClustering	AgglomerativeClustering(n_clusters=15, linkage='ward')	238	5	238	59	8737301453405186	agg.fit(topic_feature_norm)	239	0	239	27	1825435526100128292
/cb-target/python/7b/7b/fbc271a360893f39d5782bc18ee64d791e86db71b97c08ee676c8615a4ac.py	NMF	NMF(n_components=15, random_state=1,\n          alpha=.1, l1_ratio=.2, max_iter=5000)	103	6	104	47	13441426799405600	NMF(n_components=15, random_state=1,\n          alpha=.1, l1_ratio=.2, max_iter=5000).fit(tfidf)	103	6	104	58	2744336716602329922
/cb-target/python/aa/a6/87c8e8303d1ae120e3cb38a697e299ecc83ce50d5913ba0aa5d9c4e48ba1.py	KNeighborsClassifier	KNeighborsClassifier(n_neighbors=i, metric = 'haversine')	845	10	845	67	-9052116452063143733	knn.fit(X_sf[['FIDELITY_LONGITUDE', 'FIDELITY_LATITUDE']], X_sf.fh)	846	4	846	71	-3660166805222343155
/cb-target/python/aa/a6/87c8e8303d1ae120e3cb38a697e299ecc83ce50d5913ba0aa5d9c4e48ba1.py	KNeighborsClassifier	KNeighborsClassifier(1)	854	8	854	31	9001928571383240293	knn_f.fit(X_sf[['FIDELITY_LONGITUDE', 'FIDELITY_LATITUDE']], X_sf.fh)	855	0	855	69	-5032114198430468215
/cb-target/python/aa/a6/87c8e8303d1ae120e3cb38a697e299ecc83ce50d5913ba0aa5d9c4e48ba1.py	SVC	SVC(kernel = 'rbf', cache_size=5000, gamma = 100000, C = 1000, verbose=1, max_iter=10000000)	693	6	693	98	-316311654275958317	rbf.fit(X_sf[['FIDELITY_LONGITUDE', 'FIDELITY_LATITUDE']], X_sf['fh'])	694	0	694	70	5873694786087680046
/cb-target/python/aa/a6/87c8e8303d1ae120e3cb38a697e299ecc83ce50d5913ba0aa5d9c4e48ba1.py	SVC	SVC(kernel = 'rbf', cache_size=4000, gamma = 1000, C = 1000, verbose=2, max_iter=100)	703	7	703	92	8037561817971826682	rbf2.fit(X_sf[['FIDELITY_LONGITUDE', 'FIDELITY_LATITUDE']], X_sf['fh'])	704	0	704	71	-4445097173852980135
/cb-target/python/aa/a6/87c8e8303d1ae120e3cb38a697e299ecc83ce50d5913ba0aa5d9c4e48ba1.py	GridSearchCV	GridSearchCV(SVC(kernel = 'rbf', cache_size=5000, max_iter=10000000), grid_params, verbose=2, refit=False, n_jobs=1, cv=2)	632	6	632	128	-7726441736033737643	clf.fit(X_sf[['FIDELITY_LONGITUDE', 'FIDELITY_LATITUDE']], X_sf.fh)	633	0	633	67	4226400579611995655
/cb-target/python/aa/a6/87c8e8303d1ae120e3cb38a697e299ecc83ce50d5913ba0aa5d9c4e48ba1.py	GridSearchCV	GridSearchCV(SVC(kernel = 'rbf', cache_size=4000, C = 1000, gamma = 1000), grid_params, cv=1, verbose=3, refit=False, n_jobs=1)	606	12	606	139	5727077283075715329	iter_test.fit(X_sf[['FIDELITY_LONGITUDE', 'FIDELITY_LATITUDE']], X_sf.fh)	607	0	607	73	-8542401293792932658
/cb-target/python/aa/a6/87c8e8303d1ae120e3cb38a697e299ecc83ce50d5913ba0aa5d9c4e48ba1.py	GridSearchCV	GridSearchCV(KNeighborsClassifier(), knn_params,\n                         cv=ShuffleSplit(len(X_sf), test_size=0.2, n_iter=1, random_state=0), # hack for cv=1/leave-p-out\n                         verbose=3, refit=False, n_jobs=1)	786	12	788	58	8356743237417461484	knn_test1.fit(X_sf[['FIDELITY_LONGITUDE', 'FIDELITY_LATITUDE']], X_sf.fh)	789	0	789	73	-3266046225892579279
/cb-target/python/aa/a6/87c8e8303d1ae120e3cb38a697e299ecc83ce50d5913ba0aa5d9c4e48ba1.py	PCA	PCA(whiten = True)	441	6	441	24	-6800279365279021874	pca.fit(X_scaled)	442	0	442	17	1345318762090102600
/cb-target/python/aa/a6/87c8e8303d1ae120e3cb38a697e299ecc83ce50d5913ba0aa5d9c4e48ba1.py	KMeans	KMeans(i, max_iter = 100)	472	13	472	38	3658259859049792384	kmeans.fit(X_dum)	473	4	473	21	3864310577017746331
/cb-target/python/aa/a6/87c8e8303d1ae120e3cb38a697e299ecc83ce50d5913ba0aa5d9c4e48ba1.py	KMeans	KMeans(8, max_iter = 300, verbose = 1)	489	6	489	44	8167802496612169503	km8.fit(X_het)	490	0	490	14	-2862437141331945077
/cb-target/python/00/88/7116d5e731ce8d04bf23f55351917bf3cf0e619baa285a31b884f7f73213.py	LinearRegression	linear_model.LinearRegression()	694	7	694	38	1398275238281247976	linear.fit(x_train,y_train)	699	0	699	27	3375896226034092556
/cb-target/python/00/88/7116d5e731ce8d04bf23f55351917bf3cf0e619baa285a31b884f7f73213.py	GaussianNB	GaussianNB()	956	6	956	18	8543206901697664256	model.fit(x_train,y_train)	961	0	961	26	-5841814489352493053
/cb-target/python/00/88/7116d5e731ce8d04bf23f55351917bf3cf0e619baa285a31b884f7f73213.py	SVC	svm.SVC()	925	6	925	15	1043406587118367924	model.fit(x_train,y_train)	930	0	930	26	-3305067502730802817
/cb-target/python/00/88/7116d5e731ce8d04bf23f55351917bf3cf0e619baa285a31b884f7f73213.py	GradientBoostingClassifier	GradientBoostingClassifier(n_estimators=100,learning_rate=1.0, max_depth=1, random_state=0)	1041	7	1041	98	2301856221319614257	model.fit(x_train,y_train)	1046	0	1046	26	8611801607730990229
/cb-target/python/00/88/7116d5e731ce8d04bf23f55351917bf3cf0e619baa285a31b884f7f73213.py	GradientBoostingClassifier	GradientBoostingClassifier(n_estimators=100,learning_rate=1.0, max_depth=1, random_state=0)	1091	7	1091	98	6090117784689076913	model.fit(x_train,y_train)	1096	0	1096	26	6614181115130134747
/cb-target/python/00/88/7116d5e731ce8d04bf23f55351917bf3cf0e619baa285a31b884f7f73213.py	GradientBoostingClassifier	GradientBoostingClassifier(n_estimators=100,learning_rate=1.0, max_depth=1, random_state=0)	1091	7	1091	98	6090117784689076913	model.fit(x_train,y_train)	1106	0	1106	26	5847924397515986246
/cb-target/python/00/88/7116d5e731ce8d04bf23f55351917bf3cf0e619baa285a31b884f7f73213.py	RandomForestClassifier	RandomForestClassifier()	1001	6	1001	30	-161379731660784777	model.fit(x_train,y_train)	1006	0	1006	26	-8699927306499211889
/cb-target/python/00/88/7116d5e731ce8d04bf23f55351917bf3cf0e619baa285a31b884f7f73213.py	LogisticRegression	LogisticRegression()	815	3	815	23	-3903881624226214369	lm.fit(x_train,y_train)	820	0	820	23	4623606195262529767
/cb-target/python/00/88/7116d5e731ce8d04bf23f55351917bf3cf0e619baa285a31b884f7f73213.py	DecisionTreeClassifier	tree.DecisionTreeClassifier(criterion='gini',min_samples_split=20, random_state=99)	890	6	890	89	5226663503539305372	model.fit(x_train,y_train)	895	0	895	26	3923878053433161375
/cb-target/python/db/0d/c613d26ae6f80cd713aba420e0b384b16bfd3f9679f1529d2a7b7e9f0f39.py	GradientBoostingRegressor	GradientBoostingRegressor(learning_rate=learning_rate, n_estimators=n_estimators,\n                                        max_depth=max_depth, min_samples_split=min_samples_split,\n                                        min_samples_leaf=min_samples_leaf, subsample=subsample, random_state=10,\n                                        max_features=max_features)	947	6	950	66	-3040380797613534471	gbm.fit(X_train[features], y_train)	966	4	966	39	-702730354083750094
/cb-target/python/db/0d/c613d26ae6f80cd713aba420e0b384b16bfd3f9679f1529d2a7b7e9f0f39.py	GradientBoostingRegressor	GradientBoostingRegressor(learning_rate=learning_rate, n_estimators=n_estimators,\n                                        max_depth=max_depth, min_samples_split=min_samples_split,\n                                        min_samples_leaf=min_samples_leaf, subsample=subsample, random_state=10,\n                                        max_features=max_features)	947	6	950	66	-3040380797613534471	gbm.fit(train_meta[features], output)	986	0	986	37	2004858297555984832
/cb-target/python/db/0d/c613d26ae6f80cd713aba420e0b384b16bfd3f9679f1529d2a7b7e9f0f39.py	RidgeCV	linear_model.RidgeCV(alphas=ridge_alpha, fit_intercept=True)	945	8	945	68	-2382278193787909196	ridge.fit(X_train[features], y_train)	964	4	964	41	-3454384682877902698
/cb-target/python/db/0d/c613d26ae6f80cd713aba420e0b384b16bfd3f9679f1529d2a7b7e9f0f39.py	RidgeCV	linear_model.RidgeCV(alphas=ridge_alpha, fit_intercept=True)	945	8	945	68	-2382278193787909196	ridge.fit(train_meta[features], output)	984	0	984	39	-8535371978976109299
/cb-target/python/db/0d/c613d26ae6f80cd713aba420e0b384b16bfd3f9679f1529d2a7b7e9f0f39.py	RidgeCV	linear_model.RidgeCV(fit_intercept=True, alphas=alpha)	1071	8	1071	62	5139255208751278071	ridge.fit(train_meta[features], output)	1076	0	1076	39	-3154508930203956920
/cb-target/python/db/0d/c613d26ae6f80cd713aba420e0b384b16bfd3f9679f1529d2a7b7e9f0f39.py	LassoCV	linear_model.LassoCV(fit_intercept=True, alphas=alpha)	1027	8	1027	62	1989143839386236435	lasso.fit(train_meta[features], output)	1032	0	1032	39	-1356274136092177391
/cb-target/python/db/0d/c613d26ae6f80cd713aba420e0b384b16bfd3f9679f1529d2a7b7e9f0f39.py	LassoCV	linear_model.LassoCV(fit_intercept=True, alphas=lasso_alpha)	946	8	946	68	-3344368815909495573	lasso.fit(X_train[features], y_train)	965	4	965	41	323144346987801633
/cb-target/python/db/0d/c613d26ae6f80cd713aba420e0b384b16bfd3f9679f1529d2a7b7e9f0f39.py	LassoCV	linear_model.LassoCV(fit_intercept=True, alphas=lasso_alpha)	946	8	946	68	-3344368815909495573	lasso.fit(train_meta[features], output)	985	0	985	39	4320795175162002823
/cb-target/python/6a/8e/03ad9baf6ef184ca1bfcb59ed38915cf66fee38042d312a0d96a776ca50c.py	LinearRegression	LinearRegression(fit_intercept=True, normalize=True)	87	11	87	63	-1953132027848368752	LinearRegression(fit_intercept=True, normalize=True).fit(monInc_X_train, monInc_y_train)	87	11	87	99	-6001397090330856384
/cb-target/python/6a/8e/03ad9baf6ef184ca1bfcb59ed38915cf66fee38042d312a0d96a776ca50c.py	GridSearchCV	GridSearchCV(model, param_grid = params, scoring = 'roc_auc', cv = folds, n_jobs = -1, verbose = 1)	192	9	192	108	8297945917341788348	cv.fit(Xtrain, ytrain)	193	4	193	26	5831205971413026968
/cb-target/python/6a/8e/03ad9baf6ef184ca1bfcb59ed38915cf66fee38042d312a0d96a776ca50c.py	StandardScaler	preprocessing.StandardScaler()	147	9	147	39	6804326281841120715	preprocessing.StandardScaler().fit(X_normalized)	147	9	147	57	838007787803931416
/cb-target/python/48/65/034b2ba502137da973a7a77af4484990349edab6c71c8aa0ba2aa0c90d8e.py	Imputer	"Imputer(missing_values=""NaN"", strategy='mean', axis=0)"	51	5	51	59	6820141802700816293	imr.fit(df)	52	0	52	11	-8657704096406171660
/cb-target/python/d7/f7/349aa57d12fcb0b947b84136a26cd36f568dddeaf1ace5837558b8c2200a.py	RandomForestClassifier	RandomForestClassifier(n_estimators = 100)	33	9	33	51	-2049961947255300289	forest.fit(train_data[0::,1::],train_data[0::,0])	39	9	39	58	-6699726942470870536
/cb-target/python/c3/26/8fdb0aa71378ea37cb1e39c33accba965b57736a9822a43e945fe61fbcaa.py	RandomForestClassifier	RandomForestClassifier()	187	16	187	40	-671263887962173269	random_forest.fit(h_data_train, result_train)	188	0	188	45	5317968828234706021
/cb-target/python/c3/26/8fdb0aa71378ea37cb1e39c33accba965b57736a9822a43e945fe61fbcaa.py	RandomForestClassifier	RandomForestClassifier(n_estimators=t)	212	20	212	58	-4596896919066177296	random_forest.fit(h_data_train, result_train)	213	4	213	49	-7626423626176212968
/cb-target/python/c3/26/8fdb0aa71378ea37cb1e39c33accba965b57736a9822a43e945fe61fbcaa.py	RandomForestClassifier	RandomForestClassifier(min_samples_split=t)	197	20	197	63	6260388071695131851	random_forest.fit(h_data_train, result_train)	198	4	198	49	3017360126163069841
/cb-target/python/c3/26/8fdb0aa71378ea37cb1e39c33accba965b57736a9822a43e945fe61fbcaa.py	DecisionTreeClassifier	DecisionTreeClassifier()	149	16	149	40	2206553478999632447	decision_tree.fit(h_data_train, result_train)	150	0	150	45	1718258134388942254
/cb-target/python/c3/26/8fdb0aa71378ea37cb1e39c33accba965b57736a9822a43e945fe61fbcaa.py	DecisionTreeClassifier	DecisionTreeClassifier(min_samples_split=t)	158	20	158	63	-2813610282694773906	decision_tree.fit(h_data_train, result_train)	159	4	159	49	-2177634733485553607
/cb-target/python/c3/26/8fdb0aa71378ea37cb1e39c33accba965b57736a9822a43e945fe61fbcaa.py	DecisionTreeClassifier	DecisionTreeClassifier(min_samples_leaf=t)	173	20	173	62	387858588481932820	decision_tree.fit(h_data_train, result_train)	174	4	174	49	6860175578187457160
/cb-target/python/6a/18/75f91e399964567da56e0a57de3cad5dd1f72dc1b02c2f7a11da8b675057.py	GradientBoostingRegressor	GradientBoostingRegressor()	336	5	336	32	-7675122311556250620	gb.fit(X,y)	342	0	342	11	-6990387905374128556
/cb-target/python/6a/18/75f91e399964567da56e0a57de3cad5dd1f72dc1b02c2f7a11da8b675057.py	RandomForestRegressor	RandomForestRegressor()	333	5	333	28	-6490335559606293538	rf.fit(X,y)	339	0	339	11	-5323341584827147949
/cb-target/python/6a/18/75f91e399964567da56e0a57de3cad5dd1f72dc1b02c2f7a11da8b675057.py	GridSearchCV	GridSearchCV(model, PARAMETERS, scoring=SCORING, verbose=True, n_jobs=-1)	457	6	457	79	-8168296732099218096	clf.fit(X, y)	458	0	458	13	6971552313614262696
/cb-target/python/6a/18/75f91e399964567da56e0a57de3cad5dd1f72dc1b02c2f7a11da8b675057.py	DecisionTreeRegressor	DecisionTreeRegressor()	332	5	332	28	-5031890144277419148	dt.fit(X,y)	338	0	338	11	-8279553554707326483
/cb-target/python/6a/18/75f91e399964567da56e0a57de3cad5dd1f72dc1b02c2f7a11da8b675057.py	DecisionTreeRegressor	DecisionTreeRegressor(max_depth=best_depth, random_state=1)	500	10	500	69	-4090977832491568689	treereg.fit(X, y)	501	0	501	17	4702530606385128564
/cb-target/python/6a/18/75f91e399964567da56e0a57de3cad5dd1f72dc1b02c2f7a11da8b675057.py	TfidfVectorizer	TfidfVectorizer(stop_words = 'english')	294	12	294	51	-102067106948621481	tfidfvect.fit(df['Plot'])	295	0	295	25	4553788625639355874
/cb-target/python/6a/18/75f91e399964567da56e0a57de3cad5dd1f72dc1b02c2f7a11da8b675057.py	ExtraTreesRegressor	ExtraTreesRegressor()	334	5	334	26	3548537106705529945	et.fit(X,y)	340	0	340	11	-144049923909514980
/cb-target/python/6a/18/75f91e399964567da56e0a57de3cad5dd1f72dc1b02c2f7a11da8b675057.py	AdaBoostRegressor	AdaBoostRegressor()	335	5	335	24	-6192772974367493781	ab.fit(X,y)	341	0	341	11	5146246859054410053
/cb-target/python/6a/18/75f91e399964567da56e0a57de3cad5dd1f72dc1b02c2f7a11da8b675057.py	BaggingRegressor	BaggingRegressor(DecisionTreeRegressor())	512	10	512	51	3733670689005882016	treereg.fit(X_train, y_train)	513	0	513	29	5691556682293677452
/cb-target/python/bc/99/7815fafddc64eb93d79fda533ffe2f682349697f08b6432cae0fafa65548.py	RFECV	RFECV(best_model, cv=5)	276	19	276	42	-6199945021702584854	selector.fit(X_train, Y_train)	277	19	277	49	-4080559041737319191
/cb-target/python/8a/ca/1a38f3e6f0d1b25ca6b7961047fe001eba257e8228268e785babc5620309.py	ExtraTreesClassifier	ExtraTreesClassifier()	22	6	22	28	931302578242572205	clf.fit(features, label)	23	6	23	30	1911995080408615569
/cb-target/python/8a/ca/1a38f3e6f0d1b25ca6b7961047fe001eba257e8228268e785babc5620309.py	LinearSVC	"LinearSVC(C=0.01, penalty=""l1"", dual=False)"	32	7	32	50	5603429010800428766	"LinearSVC(C=0.01, penalty=""l1"", dual=False).fit(features, label)"	32	7	32	71	5014652875146955382
/cb-target/python/8d/de/6d5adaa06a4eadec0f1ccf619fb662c892b2946d2ade057200f044abbf55.py	DecisionTreeClassifier	tree.DecisionTreeClassifier(max_features=3, random_state=rseed, max_depth=3)	333	10	333	86	3528511331369763988	dectree.fit(X, y)	334	0	334	17	-8812955710129659942
/cb-target/python/8d/de/6d5adaa06a4eadec0f1ccf619fb662c892b2946d2ade057200f044abbf55.py	ExtraTreesClassifier	ExtraTreesClassifier()	107	13	107	35	8330481975826329132	extra_tree.fit(X, y)	108	0	108	20	6919822018547187750
/cb-target/python/8e/f1/27df1cb69f44fc37ef1c30c9c67757fe714ccdbef8182c5b9c87853e8718.py	LinearRegression	linear_model.LinearRegression()	47	12	47	43	-400117325861891595	regressor.fit(x[:,np.newaxis],y)	50	0	50	32	-8831956859113225411
/cb-target/python/59/d4/15a09e469f7011215af03552cb61683a2c41eb939e6d337cbaad88544e9f.py	LogisticRegression	LogisticRegression(C=1e9)	42	9	42	34	-8465020220966192564	logreg.fit(X,y)	51	0	51	15	6581730951304496284
/cb-target/python/2c/7d/d59f3141628b8210aff4b09226d0ebc00a388b0bcc028f8e8a7eedcfc079.py	RandomForestClassifier	RandomForestClassifier(n_estimators=100)	167	9	167	49	-7598397541514731131	clf_rf.fit(X_train,y_train)	168	0	168	27	-4549445703688267093
/cb-target/python/2c/7d/d59f3141628b8210aff4b09226d0ebc00a388b0bcc028f8e8a7eedcfc079.py	RandomForestClassifier	RandomForestClassifier(n_estimators=100)	177	10	177	50	7894730810879984776	clf_rf2.fit(X_train,y_train)	178	0	178	28	2091733275777911022
/cb-target/python/2c/7d/d59f3141628b8210aff4b09226d0ebc00a388b0bcc028f8e8a7eedcfc079.py	RandomForestClassifier	RandomForestClassifier(n_estimators=100, class_weight=weights)	216	10	216	72	5856102663097288493	clf_rf2.fit(X_train,y_train)	217	0	217	28	-5294508125889122418
/cb-target/python/2c/7d/d59f3141628b8210aff4b09226d0ebc00a388b0bcc028f8e8a7eedcfc079.py	DecisionTreeClassifier	tree.DecisionTreeClassifier()	291	10	291	39	-3120892845271726614	clf.fit(X_train,y_train)	292	4	292	28	843967097466255305
/cb-target/python/2c/7d/d59f3141628b8210aff4b09226d0ebc00a388b0bcc028f8e8a7eedcfc079.py	DecisionTreeClassifier	tree.DecisionTreeClassifier(max_depth=20)	157	9	157	50	3423719346744973700	clf_dt.fit(X_train,y_train)	158	0	158	27	-2260989446361374559
/cb-target/python/2c/7d/d59f3141628b8210aff4b09226d0ebc00a388b0bcc028f8e8a7eedcfc079.py	AdaBoostClassifier	AdaBoostClassifier(\n    DecisionTreeClassifier(max_depth=50, class_weight=weights),\n    n_estimators=1000,\n    learning_rate=.1)	226	6	229	21	8263949454807085338	bdt.fit(X_train,y_train)	235	0	235	24	-6471368058503837185
/cb-target/python/2c/7d/d59f3141628b8210aff4b09226d0ebc00a388b0bcc028f8e8a7eedcfc079.py	OneVsRestClassifier	OneVsRestClassifier(RandomForestClassifier(n_estimators=100))	254	10	254	71	-4733990460269427915	classif.fit(X_train,y_train)	255	0	255	28	-917911863376876224
/cb-target/python/83/98/6ae2baba13486db04d9530a5720be0094ec01992d098218052278bb79691.py	RandomForestRegressor	"RandomForestRegressor(n_estimators=1000,\n                                  oob_score=True,\n                                  n_jobs=-1,\n                                  random_state=42,\n                                  max_features=""auto"",\n                                  min_samples_leaf=min_samples)"	131	12	136	63	878795259432601726	model.fit(X, y)	137	4	137	19	187299639187582915
/cb-target/python/83/98/6ae2baba13486db04d9530a5720be0094ec01992d098218052278bb79691.py	RandomForestRegressor	RandomForestRegressor(n_estimators=100, oob_score=True, random_state=42)	45	8	45	80	-6895068890137683865	model.fit(X[numeric_variables], y)	50	0	50	34	8150079392001754157
/cb-target/python/83/98/6ae2baba13486db04d9530a5720be0094ec01992d098218052278bb79691.py	RandomForestRegressor	RandomForestRegressor(trees, oob_score=True, n_jobs=-1, random_state=42)	97	12	97	84	6270702330678672094	model.fit(X, y)	98	4	98	19	-2427480785045226811
/cb-target/python/83/98/6ae2baba13486db04d9530a5720be0094ec01992d098218052278bb79691.py	RandomForestRegressor	RandomForestRegressor(1000, oob_score=True, n_jobs=-1, random_state=42)	87	8	87	79	-8942047726195147070	model.fit(X, y)	88	0	88	15	-1833070780058679861
/cb-target/python/83/98/6ae2baba13486db04d9530a5720be0094ec01992d098218052278bb79691.py	RandomForestRegressor	RandomForestRegressor(n_estimators=1000, oob_score=True, n_jobs=-1, random_state=42, max_features=max_features)	114	12	114	123	8323126603825556664	model.fit(X, y)	115	4	115	19	-6299577573437149976
/cb-target/python/83/98/6ae2baba13486db04d9530a5720be0094ec01992d098218052278bb79691.py	RandomForestRegressor	RandomForestRegressor(1000, oob_score=True, n_jobs=1, random_state=42)	80	8	80	78	-6335725617127683642	model.fit(X, y)	81	0	81	15	-5667578491259302636
/cb-target/python/83/98/6ae2baba13486db04d9530a5720be0094ec01992d098218052278bb79691.py	RandomForestRegressor	"RandomForestRegressor(n_estimators=1000,\n                              oob_score=True,\n                              n_jobs=-1,\n                              random_state=42,\n                              max_features=""sqrt"",\n                              min_samples_leaf=1)"	149	8	154	49	-730211251267881916	model.fit(X, y)	155	0	155	15	7080811893245724633
/cb-target/python/ad/fb/a8352ecb60825b268247175d1a3c5a2d4558422ccf9d64903cb5dd08d676.py	KNeighborsClassifier	KNeighborsClassifier(n_neighbors = 21)	154	8	154	46	-3920603792354964290	model.fit(X_train, y_train)	155	0	155	27	-5633044469289377975
/cb-target/python/ad/fb/a8352ecb60825b268247175d1a3c5a2d4558422ccf9d64903cb5dd08d676.py	KNeighborsClassifier	KNeighborsClassifier(n_neighbors = n)	133	12	133	49	-1768727359214376245	model.fit(X_train, y_train)	134	4	134	31	-7778882789894509482
/cb-target/python/ad/fb/a8352ecb60825b268247175d1a3c5a2d4558422ccf9d64903cb5dd08d676.py	GaussianNB	GaussianNB()	85	8	85	20	-8086085974700164344	model.fit(X_train, y_train)	86	0	86	27	255360177748064459
/cb-target/python/ad/fb/a8352ecb60825b268247175d1a3c5a2d4558422ccf9d64903cb5dd08d676.py	LogisticRegression	LogisticRegression()	66	8	66	28	3793811535405518851	model.fit(X_train, y_train)	67	0	67	27	-2372681454305239457
/cb-target/python/ad/fb/a8352ecb60825b268247175d1a3c5a2d4558422ccf9d64903cb5dd08d676.py	ExtraTreesClassifier	ExtraTreesClassifier()	44	8	44	30	4506125207782310658	model.fit(X, y)	45	0	45	15	9114565640031116209
/cb-target/python/ad/fb/a8352ecb60825b268247175d1a3c5a2d4558422ccf9d64903cb5dd08d676.py	LinearSVC	svm.LinearSVC()	105	8	105	23	-807175417692923720	model.fit(X_train, y_train)	107	0	107	27	8920695762322137887
/cb-target/python/6a/0b/9a99aa0af211e412287b7ce01f8ee3f2db7d81f6d406d8ad68e637a9c498.py	LogisticRegression	LogisticRegression()	170	6	170	26	5764468464118250382	clf.fit(train_data, train.answer)	171	0	171	33	4112322213393777398
/cb-target/python/6a/0b/9a99aa0af211e412287b7ce01f8ee3f2db7d81f6d406d8ad68e637a9c498.py	GridSearchCV	GridSearchCV(clf, tuned_parameters, cv=10, scoring='f1')	139	10	139	66	-7069974913223725428	clf.fit(get_data((1,1), use_tfidf, use_pos_tags, use_stemming), train.answer)	140	4	140	81	3642157654053238024
/cb-target/python/35/60/1fae0a6359e3c81fafef5af961ad5185d904e8af6a80d648d7373df81904.py	GradientBoostingRegressor	GradientBoostingRegressor(n_estimators=50, learning_rate=0.1,max_depth=2, random_state=0, loss='ls')	952	22	952	122	-8150474437549375251	GradientBoostingRegressor(n_estimators=50, learning_rate=0.1,max_depth=2, random_state=0, loss='ls')\\n        .fit(train_features_2,np.log(train_output_2))	952	22	953	53	8372371204793260455
/cb-target/python/35/60/1fae0a6359e3c81fafef5af961ad5185d904e8af6a80d648d7373df81904.py	GradientBoostingRegressor	GradientBoostingRegressor(n_estimators=1000, learning_rate=0.01,max_depth=2, random_state=0, loss='ls')	1206	22	1206	125	5614730434415951658	GradientBoostingRegressor(n_estimators=1000, learning_rate=0.01,max_depth=2, random_state=0, loss='ls')\\n        .fit(train_features_1,np.log(train_output_1))	1206	22	1207	53	6177990060096430731
/cb-target/python/35/60/1fae0a6359e3c81fafef5af961ad5185d904e8af6a80d648d7373df81904.py	GradientBoostingRegressor	GradientBoostingRegressor(n_estimators=1000, learning_rate=0.01,max_depth=2, random_state=0, loss='ls')	1646	8	1646	111	-5786115865992281138	"GradientBoostingRegressor(n_estimators=1000, learning_rate=0.01,max_depth=2, random_state=0, loss='ls')\\n        .fit(predictors_train[numerical_predictors].as_matrix(),output_train[""cumulative_downloads_2016_02""].as_matrix())"	1646	8	1647	121	-4517430833350930819
/cb-target/python/35/60/1fae0a6359e3c81fafef5af961ad5185d904e8af6a80d648d7373df81904.py	GradientBoostingRegressor	GradientBoostingRegressor(max_features =1.0,n_estimators=100, learning_rate=0.1,max_depth=2, random_state=0, loss='ls')	932	12	932	131	1980050910028565374	mod_1.fit(train_features_1, train_output_1 \\n              ,sample_weight \\n    =(weights_1)*1.0/sum(weights_1))	934	4	936	36	-6171663293189990115
/cb-target/python/35/60/1fae0a6359e3c81fafef5af961ad5185d904e8af6a80d648d7373df81904.py	GradientBoostingRegressor	GradientBoostingRegressor(max_features =1.0,n_estimators=100, learning_rate=0.1,max_depth=2, random_state=0, loss='ls')	1231	12	1231	131	-5544923271603291307	mod_1.fit(train_features_1, train_output_1 \\n              ,sample_weight \\n    =(weights_1)*1.0/sum(weights_1))	1233	4	1235	36	2019511992131542958
/cb-target/python/35/60/1fae0a6359e3c81fafef5af961ad5185d904e8af6a80d648d7373df81904.py	GradientBoostingRegressor	GradientBoostingRegressor(max_features =1.0,n_estimators=100, learning_rate=0.15,max_depth=3, random_state=0, loss='ls')	999	10	999	130	-5350255804531158427	mod.fit(train_features_1, train_output_1)	1000	4	1000	45	-7243954021491707957
/cb-target/python/35/60/1fae0a6359e3c81fafef5af961ad5185d904e8af6a80d648d7373df81904.py	GradientBoostingRegressor	GradientBoostingRegressor(n_estimators=500, learning_rate=0.01,max_depth=2, random_state=0, loss='ls')	976	12	976	114	735035600421759133	mod_2.fit(train_features_2, train_output_2 ,sample_weight =(weights_2)*1.0/sum(weights_2))	979	4	979	94	-2675775774983240502
/cb-target/python/35/60/1fae0a6359e3c81fafef5af961ad5185d904e8af6a80d648d7373df81904.py	GradientBoostingRegressor	GradientBoostingRegressor(n_estimators=500, learning_rate=0.01,max_depth=2, random_state=0, loss='ls')	1251	22	1251	124	-2707008368502541464	GradientBoostingRegressor(n_estimators=500, learning_rate=0.01,max_depth=2, random_state=0, loss='ls')\\n        .fit(train_features_2,np.log(train_output_2))	1251	22	1252	53	337913184830830843
/cb-target/python/35/60/1fae0a6359e3c81fafef5af961ad5185d904e8af6a80d648d7373df81904.py	GradientBoostingRegressor	GradientBoostingRegressor(n_estimators=50, learning_rate=0.1,max_depth=3, random_state=0, loss='ls')	1275	12	1275	112	-2268942051706590637	mod_2.fit(train_features_2, train_output_2 ,sample_weight =(weights_2)*1.0/sum(weights_2))	1278	4	1278	94	7271792425820460260
/cb-target/python/35/60/1fae0a6359e3c81fafef5af961ad5185d904e8af6a80d648d7373df81904.py	GradientBoostingRegressor	GradientBoostingRegressor(n_estimators=100, learning_rate=0.1,max_depth=2, random_state=0, loss='ls')	907	22	907	123	-1336346722828220659	GradientBoostingRegressor(n_estimators=100, learning_rate=0.1,max_depth=2, random_state=0, loss='ls')\\n        .fit(train_features_1,np.log(train_output_1))	907	22	908	53	-1816068490125549829
/cb-target/python/35/60/1fae0a6359e3c81fafef5af961ad5185d904e8af6a80d648d7373df81904.py	RandomForestRegressor	RandomForestRegressor(max_features = 'sqrt',n_estimators = 100)	886	15	886	78	4552808318331617614	mod_class.fit(np.concatenate((train_features_1,train_features_2)), np.concatenate((train_output_1,train_output_2)))	887	4	887	119	-442418215650578222
/cb-target/python/35/60/1fae0a6359e3c81fafef5af961ad5185d904e8af6a80d648d7373df81904.py	RandomForestRegressor	RandomForestRegressor(max_features = 'sqrt',n_estimators = 100)	1185	15	1185	78	727577342047700902	mod_class.fit(np.concatenate((train_features_1,train_features_2)), np.concatenate((train_output_1,train_output_2)))	1186	4	1186	119	-7395956580412026847
/cb-target/python/a2/f0/eab759c3adea34544fe446983cd14c84405806a29f7f3a7c82483736d3fc.py	GridSearchCV	grid_search.GridSearchCV(input_model, parameters, cv=StratifiedKFold(y, 5), n_jobs=-1)	210	12	210	98	-3087728795767331786	model.fit(X, y)	211	4	211	19	-558786546048308586
/cb-target/python/a2/f0/eab759c3adea34544fe446983cd14c84405806a29f7f3a7c82483736d3fc.py	LabelEncoder	LabelEncoder()	283	5	283	19	686754929358121049	le.fit(labels)	285	0	285	14	-6006814589945029160
/cb-target/python/72/c1/d1245a0aefdffead30ff90e8f48449b354eab1222fdd17fe391610659972.py	KMeans	KMeans(n_clusters=k, random_state=1337, n_jobs=4)	302	13	302	62	-6044303808724604035	KMeans(n_clusters=k, random_state=1337, n_jobs=4).fit(cat_pixels)	302	13	302	78	7447848778682587498
/cb-target/python/72/c1/d1245a0aefdffead30ff90e8f48449b354eab1222fdd17fe391610659972.py	KMeans	KMeans(n_clusters=k, random_state=1337, n_jobs=4)	377	13	377	62	-7288826805417478697	KMeans(n_clusters=k, random_state=1337, n_jobs=4).fit(X)	377	13	377	69	-1921099148360597873
/cb-target/python/72/c1/d1245a0aefdffead30ff90e8f48449b354eab1222fdd17fe391610659972.py	KMeans	KMeans(n_clusters=k+1)	338	13	338	35	6172741301784299839	KMeans(n_clusters=k+1).fit(X)	338	13	338	42	3590893584818829455
/cb-target/python/72/c1/d1245a0aefdffead30ff90e8f48449b354eab1222fdd17fe391610659972.py	KMeans	KMeans(n_clusters=k+1)	393	13	393	35	-6478377166448283394	KMeans(n_clusters=k+1).fit(X)	393	13	393	42	-5904087518526488994
/cb-target/python/72/c1/d1245a0aefdffead30ff90e8f48449b354eab1222fdd17fe391610659972.py	KMeans	KMeans(n_clusters=2, random_state=1337, n_jobs=-1)	291	9	291	59	-1599920091597410605	kmeans.fit(cat_pixels)	292	0	292	22	2571102179254701586
/cb-target/python/72/c1/d1245a0aefdffead30ff90e8f48449b354eab1222fdd17fe391610659972.py	KMeans	KMeans(n_clusters=k)	228	13	228	33	8706736085185001594	KMeans(n_clusters=k).fit(X)	228	13	228	40	1908174405615972204
/cb-target/python/72/c1/d1245a0aefdffead30ff90e8f48449b354eab1222fdd17fe391610659972.py	KMeans	KMeans(n_clusters=k)	263	13	263	33	-683687576276274850	KMeans(n_clusters=k).fit(X)	263	13	263	40	6367370357921930032
/cb-target/python/72/c1/d1245a0aefdffead30ff90e8f48449b354eab1222fdd17fe391610659972.py	KMeans	KMeans(n_clusters=3, random_state=1337, n_jobs=4)	405	9	405	58	1468383631694925626	KMeans(n_clusters=3, random_state=1337, n_jobs=4).fit(X)	405	9	405	65	7408869782601771394
/cb-target/python/67/08/53c14539c021acd076107904c24fe9832b044e6c25a8d337698de9ed1b6b.py	LinearRegression	linear_model.LinearRegression()	159	7	159	38	1729891807324703560	regr.fit(X_train, y_train)	164	0	164	26	-9180731476515039078
/cb-target/python/67/08/53c14539c021acd076107904c24fe9832b044e6c25a8d337698de9ed1b6b.py	LinearRegression	linear_model.LinearRegression(normalize=True)	232	7	232	52	-7532772810034814942	poly.fit(X_train, y_train)	237	0	237	26	-8833174607661370161
/cb-target/python/67/08/53c14539c021acd076107904c24fe9832b044e6c25a8d337698de9ed1b6b.py	Ridge	linear_model.Ridge()	292	13	292	33	3908872311902290574	ridge_regr.fit(X_train, y_train)	297	0	297	32	7120009215832639662
/cb-target/python/67/08/53c14539c021acd076107904c24fe9832b044e6c25a8d337698de9ed1b6b.py	Lasso	linear_model.Lasso(alpha=0.1)	351	6	351	35	-4029188309190157362	las.fit(X_train, y_train)	356	0	356	25	-1689120288379364339
/cb-target/python/67/08/53c14539c021acd076107904c24fe9832b044e6c25a8d337698de9ed1b6b.py	Imputer	Imputer()	99	6	99	15	-5248673462048445917	imp.fit(X_numeric)	100	0	100	18	-8602745506595301144
/cb-target/python/dd/7f/281522c48248c8c2c2de2048d91cec5e231cfbc0d409ff259fd8db4072a6.py	PCA	PCA()	117	6	117	11	926778780202657777	pca.fit(x)	118	0	118	10	-1142121816825680066
/cb-target/python/dd/7f/281522c48248c8c2c2de2048d91cec5e231cfbc0d409ff259fd8db4072a6.py	MinMaxScaler	MinMaxScaler()	109	4	109	18	3590524980497914550	MinMaxScaler().fit(x)	109	4	109	25	6374334629400930994
/cb-target/python/dd/7f/281522c48248c8c2c2de2048d91cec5e231cfbc0d409ff259fd8db4072a6.py	StandardScaler	StandardScaler()	101	4	101	20	-77563512492581965	StandardScaler().fit(x)	101	4	101	27	-738333873693613495
/cb-target/python/dd/7f/281522c48248c8c2c2de2048d91cec5e231cfbc0d409ff259fd8db4072a6.py	SelectKBest	SelectKBest(mutual_info_classif)	189	11	189	43	6992034428845303235	selecter.fit(x_final, y_full)	190	0	190	29	5154820486935347616
/cb-target/python/bd/d0/a6919aac4ede67286a71d9b678e33e3504fc03a26d40c9ee35247f0ce801.py	KMeans	KMeans(n_clusters=3)	99	7	99	27	446305771826222211	model3.fit(clus_train)	100	0	100	22	-3150310577382117127
/cb-target/python/bd/d0/a6919aac4ede67286a71d9b678e33e3504fc03a26d40c9ee35247f0ce801.py	KMeans	KMeans(n_clusters=k)	75	10	75	30	-4547301988437620523	model.fit(clus_train)	76	4	76	25	-6743322034267010317
/cb-target/python/ff/6e/af25281f126825d6fdb58624611eda8f7b1c2a3fa749f21c0d1492b4ecfb.py	KNeighborsClassifier	KNeighborsClassifier(n_neighbors = 10)	370	18	370	56	5009472217369397301	knn.fit(train_x, train_y)	375	12	375	37	-1799945849257172092
/cb-target/python/ff/6e/af25281f126825d6fdb58624611eda8f7b1c2a3fa749f21c0d1492b4ecfb.py	SVC	svm.SVC()	123	6	123	15	-4707836328135733389	clf.fit(time_distribution, is_restaurant)	124	0	124	41	-364741735633142311
/cb-target/python/ff/6e/af25281f126825d6fdb58624611eda8f7b1c2a3fa749f21c0d1492b4ecfb.py	SVC	svm.SVC()	139	14	139	23	7660247943055218343	clf.fit(train_data, train_target)	148	8	148	41	-2300868397641944917
/cb-target/python/df/c6/e4656834642e43aa141827ae30cfb8fd24e8c73918389ed7730da3ed1846.py	LinearRegression	LinearRegression()	224	12	224	30	5802079603771673091	model_reg.fit(Xf_train,yf_train)	225	16	225	48	-5148416476621768840
/cb-target/python/df/c6/e4656834642e43aa141827ae30cfb8fd24e8c73918389ed7730da3ed1846.py	Ridge	Ridge(normalize=True)	319	11	319	32	-807957354938806940	model_rd.fit(Xf_train,yf_train)	320	15	320	46	-8214381815035132990
/cb-target/python/df/c6/e4656834642e43aa141827ae30cfb8fd24e8c73918389ed7730da3ed1846.py	RandomForestRegressor	RandomForestRegressor(random_state=1)	530	6	530	43	-6475444769013334399	rfr.fit(Xf_train, yf_train)	531	0	531	27	-8174520570894460182
/cb-target/python/df/c6/e4656834642e43aa141827ae30cfb8fd24e8c73918389ed7730da3ed1846.py	Lasso	Lasso()	261	14	261	21	1559575707673187782	model_Lasso.fit(Xf_train,yf_train)	262	18	262	52	3293270582011174940
/cb-target/python/df/c6/e4656834642e43aa141827ae30cfb8fd24e8c73918389ed7730da3ed1846.py	KNeighborsClassifier	KNeighborsClassifier(n_neighbors=5)	1332	6	1332	41	-8383110304380386206	knn.fit(X_train, y_train)	1343	0	1343	25	-6711956719786568792
/cb-target/python/df/c6/e4656834642e43aa141827ae30cfb8fd24e8c73918389ed7730da3ed1846.py	SVC	SVC(kernel='rbf')	1297	6	1297	23	6113443897100246547	svc.fit(X_train, y_train)	1308	0	1308	25	4818842576357136199
/cb-target/python/df/c6/e4656834642e43aa141827ae30cfb8fd24e8c73918389ed7730da3ed1846.py	GradientBoostingClassifier	GradientBoostingClassifier()	770	6	770	34	-6940807236131728857	gbc.fit(X_train, y_train)	783	0	783	25	6613535524450239901
/cb-target/python/df/c6/e4656834642e43aa141827ae30cfb8fd24e8c73918389ed7730da3ed1846.py	GradientBoostingClassifier	GradientBoostingClassifier()	1229	6	1229	34	-4329475992714053936	gbc.fit(X_train, y_train)	1239	0	1239	25	9030180042599599002
/cb-target/python/df/c6/e4656834642e43aa141827ae30cfb8fd24e8c73918389ed7730da3ed1846.py	RandomForestClassifier	RandomForestClassifier()	732	6	732	30	1939602121329754248	rfc.fit(X_train, y_train)	733	0	733	25	8023439863144826024
/cb-target/python/df/c6/e4656834642e43aa141827ae30cfb8fd24e8c73918389ed7730da3ed1846.py	RandomForestClassifier	RandomForestClassifier(max_depth=10)	1196	6	1196	42	2231620237020267377	rfc.fit(X_train, y_train)	1205	0	1205	25	-5316103849992853908
/cb-target/python/df/c6/e4656834642e43aa141827ae30cfb8fd24e8c73918389ed7730da3ed1846.py	LogisticRegression	LogisticRegression(penalty='l1', C=1.0)	668	9	668	48	62983909836411174	logreg.fit(X_train, y_train)	669	0	669	28	7641998050769579461
/cb-target/python/df/c6/e4656834642e43aa141827ae30cfb8fd24e8c73918389ed7730da3ed1846.py	GridSearchCV	GridSearchCV(knn, {'n_neighbors': range(1, 11)})	870	9	870	57	-2411875100919584474	gs_knn.fit(X,y)	871	0	871	15	-4707310858841724980
/cb-target/python/df/c6/e4656834642e43aa141827ae30cfb8fd24e8c73918389ed7730da3ed1846.py	GridSearchCV	GridSearchCV(logreg, {'C': [0.001,0.1, 0.2,0.5,0.6,1,], 'penalty':['l1','l2']})	1162	12	1162	91	-734068181866779477	gs_logreg.fit(X_train,y_train)	1163	0	1163	30	6217386370262146585
/cb-target/python/df/c6/e4656834642e43aa141827ae30cfb8fd24e8c73918389ed7730da3ed1846.py	GridSearchCV	GridSearchCV(rid,params,cv=10)	423	5	423	35	6653149490708261999	gs.fit(Xf_train,yf_train)	424	8	424	33	3254269934568263093
/cb-target/python/df/c6/e4656834642e43aa141827ae30cfb8fd24e8c73918389ed7730da3ed1846.py	GridSearchCV	GridSearchCV(lasso,params,cv=10)	380	5	380	37	7014377987192567831	gs.fit(Xf_train,yf_train)	381	8	381	33	-3802897153565677830
/cb-target/python/df/c6/e4656834642e43aa141827ae30cfb8fd24e8c73918389ed7730da3ed1846.py	DecisionTreeRegressor	DecisionTreeRegressor(random_state=1,max_depth=8)	470	7	470	56	-1377196102156903744	tree.fit(Xf_train, yf_train)	471	0	471	28	-7229602233863440514
/cb-target/python/df/c6/e4656834642e43aa141827ae30cfb8fd24e8c73918389ed7730da3ed1846.py	RidgeCV	RidgeCV(alphas=np.arange(-2.5, 2.5, 0.1),normalize=True)	348	13	348	69	8981184880928594295	model_rdcv.fit(Xf_train,yf_train)	349	17	349	50	-1189207353014006766
/cb-target/python/df/c6/e4656834642e43aa141827ae30cfb8fd24e8c73918389ed7730da3ed1846.py	LassoCV	LassoCV(cv=5,n_alphas=300, normalize=False)	290	16	290	59	815310824570111550	model_Lassocv.fit(Xf_train,yf_train)	291	20	291	56	8936611769107776547
/cb-target/python/df/c6/e4656834642e43aa141827ae30cfb8fd24e8c73918389ed7730da3ed1846.py	LinearDiscriminantAnalysis	LinearDiscriminantAnalysis(n_components=2)	1367	6	1367	48	3908508848319614550	lda.fit(X_train, y_train)	1397	0	1397	25	-1377199323100854934
/cb-target/python/2a/c1/fa08891446282d33402c6f250e44984972d09eccd17949ae82ea5f769bd6.py	LinearRegression	linear_model.LinearRegression()	506	8	506	39	-1204291116570948947	model.fit(X_disc[:, selected_snps], y_disc)	507	0	507	43	8975193422218799121
/cb-target/python/2a/c1/fa08891446282d33402c6f250e44984972d09eccd17949ae82ea5f769bd6.py	LinearRegression	linear_model.LinearRegression(fit_intercept=False)	405	8	405	58	4652429019823819496	model.fit(X[:, selected_snps], y)	406	0	406	33	-7161658558182068350
/cb-target/python/2a/c1/fa08891446282d33402c6f250e44984972d09eccd17949ae82ea5f769bd6.py	LinearRegression	linear_model.LinearRegression(fit_intercept=True)	303	4	303	53	-270425705406461351	m.fit(X_r, y)	304	0	304	13	-1587781024543961099
/cb-target/python/2a/c1/fa08891446282d33402c6f250e44984972d09eccd17949ae82ea5f769bd6.py	LinearRegression	linear_model.LinearRegression(fit_intercept=True)	322	8	322	57	3722661227799837030	model.fit(X_sig, y)	328	0	328	19	90480892160282238
/cb-target/python/2a/c1/fa08891446282d33402c6f250e44984972d09eccd17949ae82ea5f769bd6.py	Lasso	linear_model.Lasso(alpha=0.02)	361	8	361	38	2244373876207845687	lasso.fit(X, y)	366	0	366	15	4334151663922942990
/cb-target/python/2a/c1/fa08891446282d33402c6f250e44984972d09eccd17949ae82ea5f769bd6.py	LassoCV	linear_model.LassoCV(cv=5)	430	11	430	37	-3087602222961037266	lasso_cv.fit(X, y)	435	0	435	18	-4700119651013065439
/cb-target/python/2a/c1/fa08891446282d33402c6f250e44984972d09eccd17949ae82ea5f769bd6.py	LassoCV	linear_model.LassoCV(cv=3)	488	11	488	37	5603046330243706840	lasso_cv.fit(X_disc, y_disc)	489	0	489	28	-7404516405924730788
/cb-target/python/43/46/28ebae52138a0e743bfaf79314067b7c4e1fb94f5f41696ba0a2adaf38c8.py	MultinomialNB	MultinomialNB()	121	6	121	21	4624481374749340938	clf.fit(X_train_std, y_train)	122	0	122	29	5770453204139083116
/cb-target/python/43/46/28ebae52138a0e743bfaf79314067b7c4e1fb94f5f41696ba0a2adaf38c8.py	MultinomialNB	MultinomialNB()	121	6	121	21	4624481374749340938	clf.fit(X_train_std, y_train)	123	9	123	38	2698681022622991628
/cb-target/python/43/46/28ebae52138a0e743bfaf79314067b7c4e1fb94f5f41696ba0a2adaf38c8.py	StandardScaler	StandardScaler(with_mean=False)	89	5	89	36	2267379419914550522	sc.fit(X_train)	90	0	90	15	1033979743505287961
/cb-target/python/43/46/28ebae52138a0e743bfaf79314067b7c4e1fb94f5f41696ba0a2adaf38c8.py	SGDClassifier	linear_model.SGDClassifier()	99	6	99	34	-1728667033255702963	clf.fit(X_train_std, y_train)	100	0	100	29	-7262125538142846028
/cb-target/python/43/46/28ebae52138a0e743bfaf79314067b7c4e1fb94f5f41696ba0a2adaf38c8.py	SGDClassifier	linear_model.SGDClassifier()	99	6	99	34	-1728667033255702963	clf.fit(X_train_std, y_train)	101	9	101	38	6911566526250053166
/cb-target/python/43/46/28ebae52138a0e743bfaf79314067b7c4e1fb94f5f41696ba0a2adaf38c8.py	SGDClassifier	linear_model.SGDClassifier(loss='perceptron')	132	6	132	51	-1706761621571318623	clf.fit(X_train_std, y_train)	133	0	133	29	853879329042793754
/cb-target/python/43/46/28ebae52138a0e743bfaf79314067b7c4e1fb94f5f41696ba0a2adaf38c8.py	SGDClassifier	linear_model.SGDClassifier(loss='perceptron')	132	6	132	51	-1706761621571318623	clf.fit(X_train_std, y_train)	134	9	134	38	8549117916937762988
/cb-target/python/43/46/28ebae52138a0e743bfaf79314067b7c4e1fb94f5f41696ba0a2adaf38c8.py	SGDClassifier	linear_model.SGDClassifier(loss='log', n_iter=50, alpha=0.00001)	110	6	110	70	9158596721371617767	clf.fit(X_train_std, y_train)	111	0	111	29	-6155120004715910771
/cb-target/python/43/46/28ebae52138a0e743bfaf79314067b7c4e1fb94f5f41696ba0a2adaf38c8.py	SGDClassifier	linear_model.SGDClassifier(loss='log', n_iter=50, alpha=0.00001)	110	6	110	70	9158596721371617767	clf.fit(X_train_std, y_train)	112	9	112	38	6632420331299771493
/cb-target/python/4d/2c/f39d4cbc91e5ad89b1916e4f74eb1345d46a134ec9e347095c40505b07bf.py	LinearRegression	LinearRegression()	342	9	342	27	-8253003427654801193	linear.fit(X_train, Y_train)	347	0	347	28	1571209943002576833
/cb-target/python/4d/2c/f39d4cbc91e5ad89b1916e4f74eb1345d46a134ec9e347095c40505b07bf.py	Ridge	Ridge(random_state=42, alpha=alpha)	251	16	251	51	-3577359239618678816	ridge.fit(X_train.iloc[train], Y_train.iloc[train])	252	8	252	59	-3552080673695986009
/cb-target/python/4d/2c/f39d4cbc91e5ad89b1916e4f74eb1345d46a134ec9e347095c40505b07bf.py	Ridge	Ridge(random_state=42, alpha=alpha)	298	12	298	47	-2349595084161408443	ridge.fit(X_train, Y_train)	299	4	299	31	1383443761599445808
/cb-target/python/4d/2c/f39d4cbc91e5ad89b1916e4f74eb1345d46a134ec9e347095c40505b07bf.py	Ridge	Ridge(random_state=42, alpha=best_lambda_ridge)	343	10	343	57	-1694210940234306759	ridge_3.fit(X_train, Y_train)	351	0	351	29	-7747329153663978281
/cb-target/python/4d/2c/f39d4cbc91e5ad89b1916e4f74eb1345d46a134ec9e347095c40505b07bf.py	Lasso	Lasso(random_state=42, alpha=best_lambda_lasso)	344	10	344	57	-7594322147582043691	lasso_3.fit(X_train, Y_train)	355	0	355	29	1208252797205682016
/cb-target/python/4d/2c/f39d4cbc91e5ad89b1916e4f74eb1345d46a134ec9e347095c40505b07bf.py	Lasso	Lasso(random_state=42, alpha=alpha)	268	16	268	51	-3701523903133708449	lasso.fit(X_train.iloc[train], Y_train.iloc[train])	269	8	269	59	-7887441832976548617
/cb-target/python/4d/2c/f39d4cbc91e5ad89b1916e4f74eb1345d46a134ec9e347095c40505b07bf.py	Lasso	Lasso(random_state=42, alpha=alpha)	304	12	304	47	4938189150672769183	lasso.fit(X_train, Y_train)	305	4	305	31	-3645029041475552352
/cb-target/python/4d/2c/f39d4cbc91e5ad89b1916e4f74eb1345d46a134ec9e347095c40505b07bf.py	LassoCV	LassoCV(alphas=None, cv=10, max_iter=10000)	365	11	365	54	-7165237910150282166	lasso_cv.fit(X_train, Y_train)	367	0	367	30	1418136624551834732
/cb-target/python/da/1c/cdf0ab9bffbfdebadcf60b4d3da999bc3058eb607aa208f02a8e55c3d9c5.py	LogisticRegression	linear_model.LogisticRegression(penalty='l1',C=1e5,max_iter=10)	54	8	54	71	4406913321270680118	logreg.fit(X,Y)	57	0	57	15	-1950666344765611652
/cb-target/python/da/1c/cdf0ab9bffbfdebadcf60b4d3da999bc3058eb607aa208f02a8e55c3d9c5.py	LogisticRegression	linear_model.LogisticRegression(penalty='l2',C=1e5,max_iter=10)	80	8	80	71	7942055074930398460	logreg.fit(X,Y)	81	0	81	15	1904297341488385099
/cb-target/python/bb/d7/ce922b5e31224eff3d5d5d335ace28b897d39ed3c820e8fd5a5ede6e009d.py	Ridge	Ridge(alpha = alpha)	413	10	413	30	-9004936584185214905	clf.fit(X, y)	414	4	414	17	-8122909359815918644
/cb-target/python/bb/d7/ce922b5e31224eff3d5d5d335ace28b897d39ed3c820e8fd5a5ede6e009d.py	Ridge	Ridge(alpha = 0.1)	425	6	425	24	226021146524631756	clf.fit(X, y)	426	0	426	13	3571405335964845573
/cb-target/python/bb/d7/ce922b5e31224eff3d5d5d335ace28b897d39ed3c820e8fd5a5ede6e009d.py	LogisticRegression	LogisticRegression(penalty='l1', C = 0.01)	148	6	148	48	-6336746683042488393	clf.fit(X, y)	149	0	149	13	-6723797335916503278
/cb-target/python/bb/d7/ce922b5e31224eff3d5d5d335ace28b897d39ed3c820e8fd5a5ede6e009d.py	LogisticRegression	LogisticRegression(C = 0.1)	157	6	157	33	-3548248268899888537	clf.fit(X, y)	158	0	158	13	-3538909409975668683
/cb-target/python/bb/d7/ce922b5e31224eff3d5d5d335ace28b897d39ed3c820e8fd5a5ede6e009d.py	LogisticRegression	LogisticRegression(penalty='l1', C = C)	140	10	140	49	-2187197513276820279	clf.fit(X, y)	141	4	141	17	1652215284548518581
/cb-target/python/bb/d7/ce922b5e31224eff3d5d5d335ace28b897d39ed3c820e8fd5a5ede6e009d.py	LogisticRegression	LogisticRegression(C=1.0)	238	6	238	31	6198914535250839029	clf.fit(X, y)	239	0	239	13	-8560482467932867227
/cb-target/python/bb/d7/ce922b5e31224eff3d5d5d335ace28b897d39ed3c820e8fd5a5ede6e009d.py	GridSearchCV	GridSearchCV(logistic, C_dict, scorer, verbose = 1, cv=cv)	126	9	126	67	6586895532414966805	search.fit(X, y)	127	0	127	16	3752758438261314661
/cb-target/python/bb/d7/ce922b5e31224eff3d5d5d335ace28b897d39ed3c820e8fd5a5ede6e009d.py	SGDClassifier	SGDClassifier(loss='hinge')	253	6	253	33	6735444199671559526	clf.fit(X, y)	254	0	254	13	-1676824917754187353
/cb-target/python/bb/d7/ce922b5e31224eff3d5d5d335ace28b897d39ed3c820e8fd5a5ede6e009d.py	CalibratedClassifierCV	CalibratedClassifierCV(SGDClassifier(loss='hinge'))	273	6	273	57	6419973160564266839	clf.fit(X, y)	274	0	274	13	-2924859322761951700
/cb-target/python/eb/b5/aa5e7a03f71951b4dfa87400515ec8851dbcd01a2ec933f383051d3576db.py	LinearRegression	linear_model.LinearRegression()	96	8	96	39	-9160812748232359705	model.fit(X_train, y_train)	99	0	99	27	9026004541444888416
/cb-target/python/04/97/707eed90b6d5ca2be136777e3bb3d2d3ca749bf704bf96639877c68cc9b3.py	LabelEncoder	LabelEncoder()	34	10	34	24	6651949615625614855	encoder.fit(Y)	35	0	35	14	1834912288324058022
/cb-target/python/fc/46/0d59e7e0b901817be15bdbd34c9d574e50fada26a0f5e11a0e39548b4a82.py	Ridge	Ridge(alpha=optimum_param['alpha'],\n              fit_intercept=optimum_param['fit_intercept'],\n              normalize=optimum_param['normalize'],\n              tol=optimum_param['tol'],\n              solver=optimum_param['solver'])	119	8	123	45	-8231116822659391833	model.fit(x_train,y_train)	124	0	124	26	212756650247284649
/cb-target/python/fc/46/0d59e7e0b901817be15bdbd34c9d574e50fada26a0f5e11a0e39548b4a82.py	RandomizedSearchCV	RandomizedSearchCV(clf, param_distributions=params,scoring='neg_mean_squared_error', cv=k_fold, n_iter=50)	76	14	76	120	3878085837083275155	grid_search.fit(x_train, y_train)	77	0	77	33	-8482734440072588455
/cb-target/python/77/64/6d69d243157f4c291c1d80713fcb7f47baf32bca10e0c98db6d4e3c5b387.py	GaussianNB	GaussianNB()	593	6	593	18	7717561749474607311	gnb.fit(X_train.toarray(), y_train)	595	0	595	35	-1944026332976749903
/cb-target/python/77/64/6d69d243157f4c291c1d80713fcb7f47baf32bca10e0c98db6d4e3c5b387.py	LogisticRegression	linear_model.LogisticRegression()	571	11	571	44	-8939165307527818718	logistic.fit(X_train, y_train)	572	0	572	30	-1736239058612077938
/cb-target/python/82/53/5e7bda9109fd7443e047e47da3f18879b302ee78d38aa2488c20f89aa29d.py	GridSearchCV	GridSearchCV(estimator=pipe_svc, param_grid=param_grid, scoring='accuracy', cv=10, n_jobs=-1)	368	5	368	98	-5316185528717911966	gs.fit(X_train, y_train)	373	5	373	29	8078083068858699322
/cb-target/python/82/53/5e7bda9109fd7443e047e47da3f18879b302ee78d38aa2488c20f89aa29d.py	Pipeline	Pipeline([('scl', StandardScaler()), ('pca', PCA(n_components=2)), ('clf', LogisticRegression(penalty='l2', random_state=0, C=100.0))])	556	10	556	145	-8215703028197449503	pipe_lr.fit(X_train2[train], y_train[train])	592	13	592	57	337134681418603135
/cb-target/python/82/53/5e7bda9109fd7443e047e47da3f18879b302ee78d38aa2488c20f89aa29d.py	Pipeline	Pipeline([('scl', StandardScaler()), ('pca', PCA(n_components=2)), ('clf', LogisticRegression(random_state=1))])	83	10	83	122	-176760852034329818	pipe_lr.fit(X_train[train], y_train[train])	119	4	119	47	-9032160581819211701
/cb-target/python/82/53/5e7bda9109fd7443e047e47da3f18879b302ee78d38aa2488c20f89aa29d.py	Pipeline	Pipeline([('scl', StandardScaler()), ('pca', PCA(n_components=2)), ('clf', LogisticRegression(random_state=1))])	83	10	83	122	-176760852034329818	pipe_lr.fit(X_train, y_train)	88	0	88	29	-7431668701347485617
/cb-target/python/82/53/5e7bda9109fd7443e047e47da3f18879b302ee78d38aa2488c20f89aa29d.py	Pipeline	Pipeline([('scl', StandardScaler()), ('clf', SVC(random_state=1))])	353	11	353	78	6924899097221787194	pipe_svc.fit(X_train, y_train)	444	0	444	30	-4619959922269917892
/cb-target/python/a8/4e/0cbba890d55343386044a5fc4f046beb0747c9533dc1265d8457c6d41a80.py	DecisionTreeClassifier	DecisionTreeClassifier(criterion='entropy',\n                              max_depth=None,\n                              random_state=1)	442	7	444	45	-8141745948802475002	tree.fit(X_train, y_train)	460	7	460	33	8108415506349121519
/cb-target/python/a8/4e/0cbba890d55343386044a5fc4f046beb0747c9533dc1265d8457c6d41a80.py	DecisionTreeClassifier	DecisionTreeClassifier(criterion='entropy',\n                              max_depth=1,\n                              random_state=0)	534	7	536	45	-1982840375605698027	tree.fit(X_train, y_train)	543	7	543	33	-6161195688241124171
/cb-target/python/a8/4e/0cbba890d55343386044a5fc4f046beb0747c9533dc1265d8457c6d41a80.py	GridSearchCV	GridSearchCV(estimator=mv_clf,\n                    param_grid=params,\n                    cv=10,\n                    scoring='roc_auc')	394	7	397	38	-5041929388183500086	grid.fit(X_train, y_train)	399	0	399	26	-5476889942718288916
/cb-target/python/a8/4e/0cbba890d55343386044a5fc4f046beb0747c9533dc1265d8457c6d41a80.py	BaggingClassifier	BaggingClassifier(base_estimator=tree,\n                        n_estimators=500,\n                        max_samples=1.0,\n                        max_features=1.0,\n                        bootstrap=True,\n                        bootstrap_features=False,\n                        n_jobs=-1,\n                        random_state=1)	446	6	453	39	-7814919407100539904	bag.fit(X_train, y_train)	470	6	470	31	-4581476720955787228
/cb-target/python/a8/4e/0cbba890d55343386044a5fc4f046beb0747c9533dc1265d8457c6d41a80.py	clone	clone(clf)	133	25	133	35	-8421049263839299507	clone(clf).fit(X,\n                                self.lablenc_.transform(y))	133	25	134	59	5767619837860925016
/cb-target/python/a8/4e/0cbba890d55343386044a5fc4f046beb0747c9533dc1265d8457c6d41a80.py	AdaBoostClassifier	AdaBoostClassifier(base_estimator=tree,\n                         n_estimators=500,\n                         learning_rate=0.1,\n                         random_state=0)	538	6	541	40	7128113811436642917	ada.fit(X_train, y_train)	553	6	553	31	8253776461026241837
/cb-target/python/05/33/803f466f76b14d3d5f5c60045b011b61a5350c26c5a5c14340ae51975146.py	RandomForestClassifier	RandomForestClassifier(n_estimators=100)	316	9	316	49	2264184220289244234	forest.fit(traindata[0::,1::], traindata[0::,0])	321	0	321	48	-3565695051549152829
/cb-target/python/6f/e7/d18e333eece98f4c147067e3c71e49964996d04f1f3b84bb5477539a1812.py	LogisticRegression	LogisticRegression(verbose=1, max_iter=100)	81	8	81	51	-6612986237733233821	model.fit(X_train, y_train)	82	0	82	27	-2048470784422136465
/cb-target/python/7e/6a/ee7f9f9a5995cc01cbddccd56871126d3075f830ac6e1caf5d6eef71ddd2.py	AdaBoostClassifier	AdaBoostClassifier(n_estimators=500, random_state=rs)	320	6	320	59	5608140171820164290	clf.fit(X_train, y_train)	327	0	327	25	6467851757386716147
/cb-target/python/7e/6a/ee7f9f9a5995cc01cbddccd56871126d3075f830ac6e1caf5d6eef71ddd2.py	AdaBoostClassifier	AdaBoostClassifier(n_estimators=500, random_state=rs)	320	6	320	59	5608140171820164290	clf.fit(X_train, y_train)	378	10	378	35	5789759971147812309
/cb-target/python/d1/1f/a0454d1a18b0ec510aed7a6b9375f9be704da60b365fb014b97e5ed86ccf.py	RandomForestClassifier	RandomForestClassifier( n_estimators = 300 )	282	9	282	53	4990920688343913167	"forest.fit( trainDataVecs, train[""sentiment""] )"	285	9	285	56	5897879391919634279
/cb-target/python/b7/14/34f6e7c166c3b5b0370a7a55c241ebcedbe30e0b1e86482c1d283f899261.py	GridSearchCV	GridSearchCV(rfc,\n                         dict(n_estimators=n_estimators,\n                              max_features=max_features,\n                              min_samples_split=min_samples_split\n                              ), cv=None, n_jobs=1)	54	12	58	51	-4331197047604747069	estimator.fit(X_train, y_train)	64	0	64	31	-1719932207154495129
/cb-target/python/52/5b/44309f390cbe1726a1fb9224a150b5cf964f5bd2d0d564b9528e97fbefa1.py	RandomForestClassifier	RandomForestClassifier(**params)	113	6	113	38	5820176199447700598	clf.fit(X_train, y_train)	124	8	124	33	1907534255947303301
/cb-target/python/d0/99/b93d14a9f2200fb0d1e5659bc7d210328b3ed5890fc8d2937fe4b3646463.py	CountVectorizer	CountVectorizer()	9	5	9	22	-7400775481232116094	vect.fit(simple_train)	14	0	14	22	2682548395713401065
/cb-target/python/d0/99/b93d14a9f2200fb0d1e5659bc7d210328b3ed5890fc8d2937fe4b3646463.py	CountVectorizer	CountVectorizer()	75	5	75	22	1429677503885683699	vect.fit(X_train)	80	0	80	17	-4301264651841593283
/cb-target/python/e4/56/46e80ef3a7049fe79325d649500e45494dd33a28e9f9af1a805b05bc2cf5.py	StandardScaler	preprocessing.StandardScaler()	118	9	118	39	8215688033455702671	preprocessing.StandardScaler().fit(x_train)	118	9	118	52	2584114246635238090
/cb-target/python/4d/b8/c941cbca2e863a2dc84b30527782ab8e2720172a6c5def5a569b06da1af6.py	LogisticRegression	LogisticRegression(random_state=1)	27	6	27	40	2893214697762907691	"alg.fit(df[predictors], df[""category""])"	28	0	28	39	4479051550488896225
/cb-target/python/4d/b8/c941cbca2e863a2dc84b30527782ab8e2720172a6c5def5a569b06da1af6.py	LogisticRegression	LogisticRegression(random_state=1)	27	6	27	40	2893214697762907691	"alg.fit(df[predictors], df[""category""])"	43	0	43	39	1436714814600486424
/cb-target/python/4d/b8/c941cbca2e863a2dc84b30527782ab8e2720172a6c5def5a569b06da1af6.py	KMeans	cluster.KMeans(n_clusters=3)	62	10	62	38	1975214248775130044	k_means.fit(df[predictors])	63	0	63	27	3571981283856498329
/cb-target/python/59/bd/1bf88b4e3657594fec44cb24c21e3c71b06a4ff24a921d5a6ef031b5f364.py	KNeighborsClassifier	KNeighborsClassifier(n_neighbors=3)	226	10	226	45	3153686846928239659	clf_KNN.fit(transform_train, labels)	227	0	227	36	-5216701122288841673
/cb-target/python/59/bd/1bf88b4e3657594fec44cb24c21e3c71b06a4ff24a921d5a6ef031b5f364.py	PCA	PCA(n_components=35)	197	10	197	30	-4498017412167536814	pca.fit(dataset)	198	4	198	20	-1199171427124344997
/cb-target/python/59/bd/1bf88b4e3657594fec44cb24c21e3c71b06a4ff24a921d5a6ef031b5f364.py	PCA	PCA(n_components=35)	221	6	221	26	1083436789178540732	pca.fit(dataset)	222	0	222	16	-4534182733516014026
/cb-target/python/59/bd/1bf88b4e3657594fec44cb24c21e3c71b06a4ff24a921d5a6ef031b5f364.py	PCA	PCA(n_components=n_comp)	136	10	136	34	-4031978345163105347	pca.fit(dataset)	137	4	137	20	2328648341674754786
/cb-target/python/59/bd/1bf88b4e3657594fec44cb24c21e3c71b06a4ff24a921d5a6ef031b5f364.py	PCA	PCA(n_components=n_comp)	167	10	167	34	-337376057387507401	pca.fit(dataset)	168	4	168	20	-3585687636212835853
/cb-target/python/6d/34/4cb15d2b502ee986d02b7acafa2d0eb5730ccf7405dd552d5a61f9ec9800.py	LinearRegression	linear_model.LinearRegression()	71	5	71	36	65841127888792935	lm.fit(X_train, y_train)	73	8	73	32	2622664119659063081
/cb-target/python/6d/34/4cb15d2b502ee986d02b7acafa2d0eb5730ccf7405dd552d5a61f9ec9800.py	ElasticNetCV	ElasticNetCV(l1_ratio=[.1, .5, .7, .9, .95, .99, 1], n_alphas=500, cv=10, verbose=1, n_jobs=-1)	311	18	311	113	-8766520056232818362	optimal_elastic.fit(Xn, np.ravel(y))	312	0	312	36	-2896140154699447616
/cb-target/python/6d/34/4cb15d2b502ee986d02b7acafa2d0eb5730ccf7405dd552d5a61f9ec9800.py	RidgeCV	RidgeCV(ridge_alphas, cv=10)	282	16	282	44	-685577284220693377	optimal_ridge.fit(Xn, np.ravel(y))	283	0	283	34	-5786240842262016403
/cb-target/python/6d/34/4cb15d2b502ee986d02b7acafa2d0eb5730ccf7405dd552d5a61f9ec9800.py	LassoCV	LassoCV(n_alphas=500, cv=10, verbose=0)	251	16	251	55	5289254830264687311	optimal_lasso.fit(Xn, np.ravel(y))	252	0	252	34	-272729354317130034
/cb-target/python/01/5a/32b7022b97cbc493a318f9602c115ee169e08982c0eae63958ee9ce2ea35.py	LinearRegression	LinearRegression(fit_intercept=True, normalize=False)	124	5	124	58	-8017231367152998381	lr.fit(X, y)	126	0	126	12	-940038720081321942
/cb-target/python/01/5a/32b7022b97cbc493a318f9602c115ee169e08982c0eae63958ee9ce2ea35.py	LinearRegression	LinearRegression(fit_intercept=True, normalize=False)	145	9	145	62	-6183522386258420560	lr_log.fit(X, y_log)	147	0	147	20	-258075809806167895
/cb-target/python/62/57/fbf8f6708fe89ad47e6bf1d6f9738eb94270df5e548a459881822eabb416.py	KNeighborsClassifier	neighbors.KNeighborsClassifier()	111	6	111	38	7807920199049030861	knn.fit(X_train, y_train)	114	0	114	25	-3894186046923839378
/cb-target/python/62/57/fbf8f6708fe89ad47e6bf1d6f9738eb94270df5e548a459881822eabb416.py	KNeighborsClassifier	neighbors.KNeighborsClassifier(n_neighbors=2)	165	6	165	51	731806906477698671	knn.fit(X_train, y_train)	168	0	168	25	-563791227164370882
/cb-target/python/62/57/fbf8f6708fe89ad47e6bf1d6f9738eb94270df5e548a459881822eabb416.py	GridSearchCV	grid_search.GridSearchCV(\n    estimator=neighbors.KNeighborsClassifier(),\n    param_grid=params)	147	5	149	22	5710138438449688456	gs.fit(X_train, y_train)	150	0	150	24	-5554208312456626826
/cb-target/python/03/7d/067777a3944407460b632ab1e2590eec73808cee971574e7a91ff5d3213a.py	GaussianNB	GaussianNB()	16	6	16	18	-5886101360460676060	gnb.fit(df[['Ingreso','Saldo']],df['Clase'])	17	7	17	51	8300406387678896030
/cb-target/python/74/0f/b60770f4fca1ed860a447f809988ebc5de7fc332cb8e4d9a78b2af7f96ac.py	OneHotEncoder	OneHotEncoder(categorical_features='weathersit')	45	9	45	57	8799207522981778019	onehot.fit(bikesh['weathersit'])	50	0	50	32	4593963213030953258
/cb-target/python/6d/56/8357303526f6bbca5b503d970c488675a89f5ad943217cd11f2d9ff5ccc0.py	LinearRegression	LinearRegression()	40	9	40	27	5168347933117147645	linreg.fit(X, y)	44	0	44	16	-1376389205366921884
/cb-target/python/6d/56/8357303526f6bbca5b503d970c488675a89f5ad943217cd11f2d9ff5ccc0.py	LogisticRegression	LogisticRegression(C=1e9)	69	9	69	34	244659458119837820	logreg.fit(X, y)	73	0	73	16	6439587219582603119
/cb-target/python/6d/56/8357303526f6bbca5b503d970c488675a89f5ad943217cd11f2d9ff5ccc0.py	LogisticRegression	LogisticRegression(C=1e9)	236	9	236	34	-2629260502862213770	logreg.fit(X_train, y_train)	237	0	237	28	-6052569268598426493
/cb-target/python/6d/56/8357303526f6bbca5b503d970c488675a89f5ad943217cd11f2d9ff5ccc0.py	LogisticRegression	LogisticRegression(C=1000.0, random_state=0)	196	5	196	49	-8086947009406503339	lr.fit(X_train_std, y_train)	197	0	197	28	-2524206816551761007
/cb-target/python/6d/56/8357303526f6bbca5b503d970c488675a89f5ad943217cd11f2d9ff5ccc0.py	StandardScaler	StandardScaler()	131	5	131	21	4709126054467977382	sc.fit(X_train)	132	0	132	15	-1606330123084081474
/cb-target/python/1c/27/cfbe45bf84cce42ca36896c16aeae52b80ac65f702afdd58ed040dddf663.py	GaussianNB	GaussianNB()	270	7	270	19	-7861141242743689026	clf2.fit(X_train,y_train)	271	0	271	25	-550411352510453649
/cb-target/python/1c/27/cfbe45bf84cce42ca36896c16aeae52b80ac65f702afdd58ed040dddf663.py	GaussianNB	GaussianNB()	311	7	311	19	-8790192509072855491	clf2.fit(Xtrain,ytrain)	312	0	312	23	6599347806681878374
/cb-target/python/1c/27/cfbe45bf84cce42ca36896c16aeae52b80ac65f702afdd58ed040dddf663.py	GaussianNB	GaussianNB()	355	7	355	19	6902715973307724642	clf2.fit(X_train, y_train)	356	0	356	26	6312335193287555353
/cb-target/python/1c/27/cfbe45bf84cce42ca36896c16aeae52b80ac65f702afdd58ed040dddf663.py	DecisionTreeClassifier	DecisionTreeClassifier()	265	7	265	31	645479807733205158	clf1.fit(X_train,y_train)	266	0	266	25	-190225281877843808
/cb-target/python/1c/27/cfbe45bf84cce42ca36896c16aeae52b80ac65f702afdd58ed040dddf663.py	DecisionTreeClassifier	DecisionTreeClassifier()	307	7	307	31	8885564164943839280	clf1.fit(Xtrain,ytrain)	308	0	308	23	4368544423161634767
/cb-target/python/1c/27/cfbe45bf84cce42ca36896c16aeae52b80ac65f702afdd58ed040dddf663.py	DecisionTreeClassifier	DecisionTreeClassifier()	350	7	350	31	1644402944387152641	clf1.fit(X_train, y_train)	351	0	351	26	4673806697435093561
/cb-target/python/1c/27/cfbe45bf84cce42ca36896c16aeae52b80ac65f702afdd58ed040dddf663.py	DecisionTreeClassifier	DecisionTreeClassifier(criterion='entropy',random_state=0)	174	6	174	64	5739077154567909128	clf.fit(dt,outcomes)	175	4	175	24	7380027190640147465
/cb-target/python/4a/ba/bafd54175224eb026860318b2e0cb8b1464795f657fbb3b1a7dd167b6ca1.py	RandomForestClassifier	RandomForestClassifier(bootstrap=True, class_weight=None, criterion='gini',\n            max_depth=1, max_features=1, max_leaf_nodes=5,\n            min_samples_leaf=1, min_samples_split=1,\n            min_weight_fraction_leaf=0.0, n_estimators=50, n_jobs=-1,\n            oob_score=True, random_state=63, verbose=0, warm_start=False)	168	8	172	73	7887785241240911666	rfClf.fit(X_train, y_train)	174	0	174	27	7124567683162681261
/cb-target/python/4a/ba/bafd54175224eb026860318b2e0cb8b1464795f657fbb3b1a7dd167b6ca1.py	DecisionTreeClassifier	DecisionTreeClassifier(class_weight=None, criterion='gini', max_depth=1,\n            max_features=1, max_leaf_nodes=5, min_samples_leaf=1,\n            min_samples_split=2, min_weight_fraction_leaf=0.0,\n            presort=False, random_state=8, splitter='best')	122	10	125	59	-7735134221667748423	treeclf.fit(X_train, y_train)	126	0	126	29	3217850573810415385
/cb-target/python/4a/ba/bafd54175224eb026860318b2e0cb8b1464795f657fbb3b1a7dd167b6ca1.py	GridSearchCV	GridSearchCV(clfModel, PARAMETERS, scoring=SCORING, n_jobs=-1)	109	6	109	68	-7178726407718132496	clf.fit(X, y)	110	0	110	13	-2957800038018722203
/cb-target/python/4a/ba/bafd54175224eb026860318b2e0cb8b1464795f657fbb3b1a7dd167b6ca1.py	AdaBoostClassifier	AdaBoostClassifier(algorithm='SAMME',\n          base_estimator=DecisionTreeClassifier(class_weight=None, criterion='gini', max_depth=1,\n            max_features=None, max_leaf_nodes=None, min_samples_leaf=1,\n            min_samples_split=2, min_weight_fraction_leaf=0.0,\n            presort=False, random_state=5, splitter='best'),\n          learning_rate=1.0, n_estimators=200, random_state=None)	198	6	203	65	596078354499838049	ada.fit(X_train, y_train)	205	0	205	25	-1692801762404087443
/cb-target/python/4a/ba/bafd54175224eb026860318b2e0cb8b1464795f657fbb3b1a7dd167b6ca1.py	AdaBoostClassifier	"AdaBoostClassifier(DecisionTreeClassifier(max_depth=1),\n                         algorithm=""SAMME"",\n                         n_estimators=200)"	188	6	190	42	7838090439189902614	bdt.fit(X, y)	192	0	192	13	-3615911611581256379
/cb-target/python/17/a5/7d7693c083282c0e3c163834515fb572c12dae01ed9fa2c7b85d7d39fb57.py	GridSearchCV	GridSearchCV(knn,param,cv=10,scoring='neg_mean_squared_error')	45	7	45	69	2266327274838402038	grid.fit(X,y)	47	0	47	13	-8281776929429354993
/cb-target/python/17/a5/7d7693c083282c0e3c163834515fb572c12dae01ed9fa2c7b85d7d39fb57.py	GridSearchCV	GridSearchCV(knn, param_grid = param, cv=10, scoring='neg_mean_squared_error')	148	7	148	85	6184409077888754906	grid.fit(X,y)	153	0	153	13	3051829839535043554
/cb-target/python/e9/ba/1674045121d4f859497030258e764870cede385a7735eb8d2c61567a835a.py	StandardScaler	StandardScaler()	33	9	33	25	4253635458909857812	StandardScaler().fit(df_train)	33	9	33	39	-6664994362436872621
/cb-target/python/24/0f/76009f7c3dd5c74f67b06542620430b9b3747916b399f444af89bb3e5f67.py	LinearRegression	linear_model.LinearRegression()	239	5	239	36	-9202930914598205352	lm.fit(X,y)	243	8	243	19	-4503589388670364081
/cb-target/python/24/0f/76009f7c3dd5c74f67b06542620430b9b3747916b399f444af89bb3e5f67.py	LinearRegression	linear_model.LinearRegression()	282	5	282	36	-7257648427560186117	lm.fit(X,y)	286	8	286	19	8672589581076973797
/cb-target/python/24/0f/76009f7c3dd5c74f67b06542620430b9b3747916b399f444af89bb3e5f67.py	LinearRegression	linear_model.LinearRegression()	320	3	320	34	6481657339367147508	lr.fit(train_X,train_Y)	324	9	324	32	8327104907476743620
/cb-target/python/e6/b3/c2560a8cebf8b61a80fe92821469a10bb125db2cf3ae48ed981746ccdbb7.py	RandomForestClassifier	RandomForestClassifier(n_jobs=-1, n_estimators=100)	89	6	89	57	-8684728655373108808	clf.fit(X, y)	99	0	99	13	-8540783730573219482
/cb-target/python/e2/14/98e5079d06ab00eea7dd50354e80260f7cfe44ce7bc54479aa0e811abcbc.py	RandomForestClassifier	RandomForestClassifier()	225	9	225	33	-7560700223463206676	forest.fit(x_train, y_train)	226	0	226	28	-8519988281721393479
/cb-target/python/e2/14/98e5079d06ab00eea7dd50354e80260f7cfe44ce7bc54479aa0e811abcbc.py	LogisticRegression	LogisticRegression()	109	8	109	28	-7904161631910942128	model.fit(x_train, y_train)	115	0	115	27	3405516919102499326
/cb-target/python/e2/14/98e5079d06ab00eea7dd50354e80260f7cfe44ce7bc54479aa0e811abcbc.py	GridSearchCV	GridSearchCV(forest, param_grid=forest_parameters, scoring=scorer, cv=10, n_jobs=-1)	233	4	233	88	9093462247138215241	g.fit(x_train, y_train)	234	0	234	23	543672925577345962
/cb-target/python/e2/14/98e5079d06ab00eea7dd50354e80260f7cfe44ce7bc54479aa0e811abcbc.py	LogisticRegressionCV	LogisticRegressionCV(cv=10, n_jobs=-1, penalty='l1', solver='liblinear')	110	11	110	83	9076736600146814135	cv_model.fit(x_train, y_train)	120	0	120	30	-3773107608673810674
/cb-target/python/ac/ae/6ce66af6393d81e49f6178111bb46192caf5caada72bbf10b459176366b7.py	GridSearchCV	GridSearchCV(gbm, grid_params,scoring='log_loss',cv=cv, verbose=1, refit=True)	220	7	220	85	-1299841736014846190	grid.fit(train_data, label)	221	0	221	27	-4626228425233661890
/cb-target/python/76/eb/b163255e91f16fdba71d91692280a602576288548a100736dd4239e6054e.py	LinearRegression	linear_model.LinearRegression()	28	6	28	37	3781710934011544288	reg.fit(X, y)	29	0	29	13	-7004855602936584221
/cb-target/python/76/eb/b163255e91f16fdba71d91692280a602576288548a100736dd4239e6054e.py	LinearRegression	linear_model.LinearRegression()	61	18	61	49	4335366387368198657	reg.fit(poly.fit_transform(np.arange(lookback).reshape(-1, 1)), CLOSE[:, market])	63	16	63	97	-5659609178145622744
/cb-target/python/fa/36/343b1325c50953029dd2972f867078aaf9109e06826c3c1807ffacd41f1d.py	KMeans	KMeans(3)	86	5	86	14	1826136286254737638	KMeans(3).fit(vec)	86	5	86	23	-6583362181160276490
/cb-target/python/fa/36/343b1325c50953029dd2972f867078aaf9109e06826c3c1807ffacd41f1d.py	AgglomerativeClustering	AgglomerativeClustering(3)	100	5	100	31	-4412538366227603121	AgglomerativeClustering(3).fit(low_dim_vec)	100	5	100	48	-8171726240806754266
/cb-target/python/fa/36/343b1325c50953029dd2972f867078aaf9109e06826c3c1807ffacd41f1d.py	SpectralClustering	SpectralClustering(3)	114	5	114	26	7284526432809885877	SpectralClustering(3).fit(low_dim_vec)	114	5	114	43	-6845092529896255315
/cb-target/python/10/3b/a64e3f5903ab064cce4309c2f86f883d8ff94491db902c2e2ea7c6637a24.py	GridSearchCV	GridSearchCV(KNeighborsClassifier(), param_grid=params, cv=5, n_jobs=-1)	147	9	147	81	-1163558588479675450	gs_knc.fit(X_train_scaled, y_train)	148	0	148	35	489436728734292109
/cb-target/python/10/3b/a64e3f5903ab064cce4309c2f86f883d8ff94491db902c2e2ea7c6637a24.py	KMeans	KMeans(n_clusters=k, random_state=42)	84	7	84	44	6088542451660237363	km.fit(dataset_scaled)	85	4	85	26	-8795116758529727021
/cb-target/python/10/3b/a64e3f5903ab064cce4309c2f86f883d8ff94491db902c2e2ea7c6637a24.py	KMeans	KMeans(n_clusters=k, random_state=42)	102	7	102	44	8521412213713775755	km.fit(dataset_scaled)	103	4	103	26	-4649242558080500493
/cb-target/python/16/20/efb86a1ca8504f3b05dcba867d75664768da0ba58ce1ce15b6b9a9158afc.py	GridSearchCV	GridSearchCV(svr,param_grid, cv = 6)	347	7	347	43	-5709806199245565580	gscv.fit(features, ranks)	348	0	348	25	7064803316785663237
/cb-target/python/16/20/efb86a1ca8504f3b05dcba867d75664768da0ba58ce1ce15b6b9a9158afc.py	GridSearchCV	GridSearchCV(svr,param_grid, cv = 6)	363	7	363	43	7311901570972957571	gscv.fit(features, ranks)	364	0	364	25	6128957012661911136
/cb-target/python/16/20/efb86a1ca8504f3b05dcba867d75664768da0ba58ce1ce15b6b9a9158afc.py	SVR	SVR(kernel = 'rbf', C = 7, epsilon = 0.01, gamma = 0.08)	378	6	378	62	4013215123358757003	svr.fit(x_train, y_train)	386	4	386	29	3148685400492009961
/cb-target/python/e6/24/941308955a7f92fdb3b2d9b054b75b5a0827755110adcb2e5b363ad9685c.py	LinearRegression	LinearRegression()	105	5	105	23	-6251669181055406819	lr.fit(X=X_train, y=y_train)	106	0	106	28	4593568468239797377
/cb-target/python/e6/24/941308955a7f92fdb3b2d9b054b75b5a0827755110adcb2e5b363ad9685c.py	LinearRegression	LinearRegression()	352	5	352	23	-7103755468578766217	lr.fit(X_train, y_train)	354	0	354	24	6466284793869066375
/cb-target/python/e6/24/941308955a7f92fdb3b2d9b054b75b5a0827755110adcb2e5b363ad9685c.py	LinearRegression	LinearRegression()	406	5	406	23	360577657519018144	lr.fit(X_train, y_train)	408	0	408	24	5227382856089007217
/cb-target/python/e6/24/941308955a7f92fdb3b2d9b054b75b5a0827755110adcb2e5b363ad9685c.py	LinearRegression	LinearRegression()	684	13	684	31	8877096081330369907	lr_parks_1.fit(X_train, y_train)	685	0	685	32	7041342687281074900
/cb-target/python/e6/24/941308955a7f92fdb3b2d9b054b75b5a0827755110adcb2e5b363ad9685c.py	Ridge	Ridge(alpha=1.0)	702	5	702	21	3048374692302193041	rr.fit(X=X_train, y=y_train)	703	0	703	28	-7394064723285191845
/cb-target/python/e6/24/941308955a7f92fdb3b2d9b054b75b5a0827755110adcb2e5b363ad9685c.py	GridSearchCV	GridSearchCV(estimator=Ridge(), param_grid=params, cv=3, verbose=1)	715	5	715	72	168491431442201664	gs.fit(X_train, y_train)	717	0	717	24	-2319155319348540263
/cb-target/python/e6/24/941308955a7f92fdb3b2d9b054b75b5a0827755110adcb2e5b363ad9685c.py	GridSearchCV	GridSearchCV(estimator=ls, param_grid=params)	437	6	437	51	5845200863405915054	gcv.fit(X_train, y_train)	439	0	439	25	1892189732792034442
/cb-target/python/3d/a9/2e2d3fecaa967d130a0cca093389f618c502e90b9af6ae8172777bc1cdb3.py	LogReg	LogReg(C=1000)	535	14	535	28	3596845585736672690	LogReg(C=1000).fit(allX[j][ktrain,:],Y[ktrain])	535	14	535	61	-5363380131675336738
/cb-target/python/3d/a9/2e2d3fecaa967d130a0cca093389f618c502e90b9af6ae8172777bc1cdb3.py	LogReg	LogReg(C=1000)	546	10	546	24	-8667606815391470519	LogReg(C=1000).fit(allX[j],Y)	546	10	546	39	-4575124290865754163
/cb-target/python/3d/a9/2e2d3fecaa967d130a0cca093389f618c502e90b9af6ae8172777bc1cdb3.py	LogReg	LogReg(C=1000)	619	14	619	28	468166025053495308	LogReg(C=1000).fit(allX[j][ktrain,:],Y[ktrain])	619	14	619	61	-1412456564753316342
/cb-target/python/3d/a9/2e2d3fecaa967d130a0cca093389f618c502e90b9af6ae8172777bc1cdb3.py	LogReg	LogReg(C=1000)	630	10	630	24	1661650140890097948	LogReg(C=1000).fit(allX[j],Y)	630	10	630	39	-6518725175348023172
/cb-target/python/3d/a9/2e2d3fecaa967d130a0cca093389f618c502e90b9af6ae8172777bc1cdb3.py	LogReg	LogReg(C=1000)	698	14	698	28	-3583436845048295396	LogReg(C=1000).fit(allX[j][ktrain,:],Y[ktrain])	698	14	698	61	-6229587319310409440
/cb-target/python/3d/a9/2e2d3fecaa967d130a0cca093389f618c502e90b9af6ae8172777bc1cdb3.py	LogReg	LogReg(C=1000)	709	10	709	24	-7419689117974239446	LogReg(C=1000).fit(allX[j],Y)	709	10	709	39	-3909307792914744197
/cb-target/python/3d/a9/2e2d3fecaa967d130a0cca093389f618c502e90b9af6ae8172777bc1cdb3.py	LogReg	LogReg(C=1000)	770	14	770	28	-5100393982326830595	LogReg(C=1000).fit(allX[j][ktrain,:],Y[ktrain])	770	14	770	61	2254937963149802178
/cb-target/python/3d/a9/2e2d3fecaa967d130a0cca093389f618c502e90b9af6ae8172777bc1cdb3.py	LogReg	LogReg(C=1000)	781	10	781	24	6931135976520644909	LogReg(C=1000).fit(allX[j],Y)	781	10	781	39	9122729396558365948
/cb-target/python/3d/a9/2e2d3fecaa967d130a0cca093389f618c502e90b9af6ae8172777bc1cdb3.py	LogReg	LogReg(C=1000)	981	14	981	28	2630636307490722655	LogReg(C=1000).fit(allX[j][ktrain,:],Y[ktrain])	981	14	981	61	2855426232872656217
/cb-target/python/3d/a9/2e2d3fecaa967d130a0cca093389f618c502e90b9af6ae8172777bc1cdb3.py	LogReg	LogReg(C=1000)	992	10	992	24	6427895109925792234	LogReg(C=1000).fit(allX[j],Y)	992	10	992	39	-6056138024103086983
/cb-target/python/3d/a9/2e2d3fecaa967d130a0cca093389f618c502e90b9af6ae8172777bc1cdb3.py	LogReg	LogReg(C=1000)	1061	14	1061	28	-3531837329456626625	LogReg(C=1000).fit(allX[j][ktrain,:],Y[ktrain])	1061	14	1061	61	6093745593395852694
/cb-target/python/3d/a9/2e2d3fecaa967d130a0cca093389f618c502e90b9af6ae8172777bc1cdb3.py	LogReg	LogReg(C=1000)	1072	10	1072	24	-8782631602460148599	LogReg(C=1000).fit(allX[j],Y)	1072	10	1072	39	-6511390923742030045
/cb-target/python/3e/0f/11c13454f39e6824e91f556971b6af51151b859c135140711d6f01932587.py	RandomForestClassifier	RandomForestClassifier(n_estimators=2000)	117	6	117	47	-2293307570866779443	clf.fit(x_train[these_features], y_train)	118	0	118	41	-7753605036338167245
/cb-target/python/3e/0f/11c13454f39e6824e91f556971b6af51151b859c135140711d6f01932587.py	LabelEncoder	preprocessing.LabelEncoder()	29	10	29	38	-590559089213310432	lbl.fit(list(df['manager_id'].values))	30	4	30	42	8628108852088598409
/cb-target/python/3e/0f/11c13454f39e6824e91f556971b6af51151b859c135140711d6f01932587.py	LabelEncoder	preprocessing.LabelEncoder()	33	10	33	38	2056003967093232319	lbl.fit(list(df['building_id'].values))	34	4	34	43	5715159909197850228
/cb-target/python/3e/0f/11c13454f39e6824e91f556971b6af51151b859c135140711d6f01932587.py	AdaBoostClassifier	AdaBoostClassifier(n_estimators=2000)	248	6	248	43	-7829879314670023267	clf.fit(x_train[these_features], y_train)	249	0	249	41	1498812871505416700
/cb-target/python/11/26/5e97782d1f1e2b424788565183631660b66d1a25f183bc83b3d3d3a54b15.py	PCA	PCA(n_components=2)	125	6	125	25	-3745425692326951946	pca.fit(sub_cluster_data)	126	0	126	25	8754996558308199036
/cb-target/python/11/26/5e97782d1f1e2b424788565183631660b66d1a25f183bc83b3d3d3a54b15.py	PCA	PCA(n_components=2)	230	7	230	26	-6993601962406849528	pca2.fit(new_points)	231	0	231	20	8019845036052368018
/cb-target/python/11/26/5e97782d1f1e2b424788565183631660b66d1a25f183bc83b3d3d3a54b15.py	PCA	PCA(n_components=5)	114	6	114	25	3765372039904019261	pca.fit(sub_cluster_data)	115	0	115	25	-3394109946581153742
/cb-target/python/11/26/5e97782d1f1e2b424788565183631660b66d1a25f183bc83b3d3d3a54b15.py	KMeans	KMeans(n_clusters=n_clusters)	33	13	33	42	6122362161742827249	kmeans.fit(sub_cluster_data.as_matrix())	34	4	34	44	6653177393058858694
/cb-target/python/11/26/5e97782d1f1e2b424788565183631660b66d1a25f183bc83b3d3d3a54b15.py	KMeans	KMeans(n_clusters=k)	60	6	60	26	4454640336968052141	KMeans(n_clusters=k).fit(sub_cluster_data.as_matrix())	60	6	60	60	-6821138319315712841
/cb-target/python/11/26/5e97782d1f1e2b424788565183631660b66d1a25f183bc83b3d3d3a54b15.py	KMeans	KMeans(n_clusters=optimum_k)	102	9	102	37	-298719254800127480	kmeans.fit(sub_cluster_data.as_matrix())	103	0	103	40	8453254218030876670
/cb-target/python/11/26/5e97782d1f1e2b424788565183631660b66d1a25f183bc83b3d3d3a54b15.py	KMeans	KMeans(n_clusters=optimum_k)	219	10	219	38	4434095734449479281	kmeans2.fit(new_points)	220	0	220	23	4261209485310207871
/cb-target/python/5a/82/90ef2ba3fe413d7fff737f75a16cc98cae7a735351b0a2ff602167d19089.py	Perceptron	Perceptron(random_state=241)	20	6	20	34	-3070064835440149849	clf.fit(X_train, y_train)	21	0	21	25	-6041840287466866420
/cb-target/python/5a/82/90ef2ba3fe413d7fff737f75a16cc98cae7a735351b0a2ff602167d19089.py	Perceptron	Perceptron(random_state=241)	32	9	32	37	-2722900090357854096	clf_sc.fit(X_train_scaled, y_train)	33	0	33	35	-4055072849120660351
/cb-target/python/ef/47/ecc04240b0a94b97ff44caba6780ca34d9c70052937ef18d1326d05e5ebd.py	SVC	svm.SVC(kernel='linear')	269	6	269	30	7192439991690729972	svc.fit(x_train, y_train)	271	0	271	25	1628931730494035502
/cb-target/python/ef/47/ecc04240b0a94b97ff44caba6780ca34d9c70052937ef18d1326d05e5ebd.py	DecisionTreeClassifier	DecisionTreeClassifier(criterion = 'entropy', max_depth = i)	246	20	246	80	-7528650541799096847	decision_tree.fit(x_train, y_train)	247	4	247	39	2425369934553267809
/cb-target/python/ef/47/ecc04240b0a94b97ff44caba6780ca34d9c70052937ef18d1326d05e5ebd.py	DecisionTreeClassifier	DecisionTreeClassifier(criterion = 'entropy', max_depth = 3)	178	16	178	76	-3284228106481875977	decision_tree.fit(x_train, y_train)	179	0	179	35	8284337374074900489
/cb-target/python/ef/47/ecc04240b0a94b97ff44caba6780ca34d9c70052937ef18d1326d05e5ebd.py	DecisionTreeClassifier	DecisionTreeClassifier(criterion = 'entropy', max_depth = 8)	215	16	215	76	3226695261862320473	decision_tree.fit(x_train, y_train)	216	0	216	35	6812141165827463792
/cb-target/python/ef/47/ecc04240b0a94b97ff44caba6780ca34d9c70052937ef18d1326d05e5ebd.py	GridSearchCV	GridSearchCV(classifier, param_grid=param_grid, cv=cv)	195	18	195	72	4448873631309197038	grid_search.fit(X,Y)	196	4	196	24	-6243587777504556251
/cb-target/python/91/7e/9446623e7bce3a4b1fd8c6d3b63d03c57cdda3e7d00686561d9b830632aa.py	StandardScaler	StandardScaler()	283	5	283	21	-3352177297993069070	ss.fit(X)	284	0	284	9	-7982877958824448201
/cb-target/python/78/9b/438376412e974f7b61203a4d0988b62ecd8ab7a55ec9564d892dc4d4ecec.py	GradientBoostingRegressor	GradientBoostingRegressor(learning_rate=0.03, max_features=0.03, n_estimators=500)	66	6	66	88	-8665995470398670491	clf.fit(X, y)	67	0	67	13	-5478213811615887777
/cb-target/python/80/1d/b23f0243f5ae312ba2620853f4bdcc342602c9446a22630991d6a6eaecee.py	KNeighborsClassifier	KNeighborsClassifier()	375	8	375	30	-3519241306522639336	model.fit(X_train, y_train)	376	0	376	27	3819107246920160110
/cb-target/python/80/1d/b23f0243f5ae312ba2620853f4bdcc342602c9446a22630991d6a6eaecee.py	LogisticRegression	LogisticRegression()	356	8	356	28	3626286782351098278	model.fit(X_train, y_train)	357	0	357	27	7784458550963969474
/cb-target/python/80/1d/b23f0243f5ae312ba2620853f4bdcc342602c9446a22630991d6a6eaecee.py	GridSearchCV	GridSearchCV(pln, param_grid, cv=10, scoring='%s_weighted' % score)	320	10	320	77	-8906759685406313479	clf.fit(X_train, y_train)	321	4	321	29	5600205723451895450
/cb-target/python/80/1d/b23f0243f5ae312ba2620853f4bdcc342602c9446a22630991d6a6eaecee.py	GridSearchCV	GridSearchCV(pln, tuned_parameters, cv=10, scoring='%s_weighted' % score)	258	10	258	83	-3897659864514707296	clf.fit(X_train, y_train)	259	4	259	29	8062520960477995577
/cb-target/python/80/1d/b23f0243f5ae312ba2620853f4bdcc342602c9446a22630991d6a6eaecee.py	GridSearchCV	GridSearchCV( pln, param_grid, cv=10 )	98	6	98	44	5869570300588999220	clf.fit( X_train, y_train )	99	0	99	27	1274992101905072738
/cb-target/python/80/1d/b23f0243f5ae312ba2620853f4bdcc342602c9446a22630991d6a6eaecee.py	GridSearchCV	GridSearchCV( pln, param_grid, cv=10 )	148	6	148	44	5987788391635848055	clf.fit( X_train, y_train )	149	0	149	27	8513952224873762415
/cb-target/python/80/1d/b23f0243f5ae312ba2620853f4bdcc342602c9446a22630991d6a6eaecee.py	GridSearchCV	GridSearchCV( pln, param_grid, cv=10 )	202	6	202	44	-554025778832007753	clf.fit( X_train, y_train )	203	0	203	27	6498996827875746169
/cb-target/python/80/1d/b23f0243f5ae312ba2620853f4bdcc342602c9446a22630991d6a6eaecee.py	GridSearchCV	GridSearchCV( pln, param_grid, cv=10 )	408	6	408	44	7634425923062666213	clf.fit( X_train, y_train )	409	0	409	27	8344878281002990958
/cb-target/python/80/1d/b23f0243f5ae312ba2620853f4bdcc342602c9446a22630991d6a6eaecee.py	GridSearchCV	GridSearchCV(svc, tuned_parameters, cv=10, scoring='%s_weighted' % score)	65	10	65	83	2754725286977250820	clf.fit(X_train, y_train)	66	4	66	29	7253980659322762265
/cb-target/python/61/54/9f0aad05fafe924f66a90c73f36ca50dd1f690178b7ba5845b294d1b09f5.py	KNeighborsClassifier	KNeighborsClassifier(n_neighbors=15)	95	6	95	42	-1942440995843941679	"clf.fit(train[features], train[""label""])"	101	0	101	40	212267835026949902
/cb-target/python/38/1d/47c783ea51249d6048a223c62f80541da81442dbc3a1417dab6fa339e632.py	GMM	GMM(2, covariance_type='full', random_state=0)	76	6	76	52	-9149615825112458061	gmm.fit(Xpca)	77	0	77	13	-5047108843890159783
/cb-target/python/38/1d/47c783ea51249d6048a223c62f80541da81442dbc3a1417dab6fa339e632.py	KMeans	KMeans(2,n_init=30)	66	6	66	25	-6061488508818514378	kmm.fit(Xpca)	67	0	67	13	2154244666980364041
/cb-target/python/b4/5e/5c8bc9582b8c4ae4f42c318341e46167a1f6320975932cc0a2387aef04f3.py	LinearRegression	linear_model.LinearRegression()	298	11	298	42	3278269474504623776	regr.fit(X, y)	303	4	303	18	-8652077582564920988
/cb-target/python/b4/5e/5c8bc9582b8c4ae4f42c318341e46167a1f6320975932cc0a2387aef04f3.py	LinearRegression	linear_model.LinearRegression()	329	16	329	47	3578780364569585483	regr_complete.fit(X_complete, y_complete)	332	0	332	41	6276667250968560276
/cb-target/python/b4/5e/5c8bc9582b8c4ae4f42c318341e46167a1f6320975932cc0a2387aef04f3.py	LinearRegression	linear_model.LinearRegression()	338	12	338	43	1195123976710862648	regr_mean.fit(X_mean, y_mean)	342	0	342	29	-5535536731180244077
/cb-target/python/b4/5e/5c8bc9582b8c4ae4f42c318341e46167a1f6320975932cc0a2387aef04f3.py	LogisticRegression	LogisticRegression()	238	6	238	26	40029258174765692	mod.fit(X[~missing], y[~missing])	239	0	239	33	-949604590200352377
/cb-target/python/b4/5e/5c8bc9582b8c4ae4f42c318341e46167a1f6320975932cc0a2387aef04f3.py	LogisticRegression	LogisticRegression()	257	7	257	27	-8829408231798322487	mod2.fit(X2[~missing], y2[~missing])	258	0	258	36	8377081476384693190
/cb-target/python/b4/5e/5c8bc9582b8c4ae4f42c318341e46167a1f6320975932cc0a2387aef04f3.py	LogisticRegression	LogisticRegression()	279	10	279	30	1092408444158185796	mod.fit(X[~missing], y[~missing])	280	4	280	37	4781357342882609899
/cb-target/python/43/bc/648ec3a9f9d6c00e2d43515edbbf823de72cfc3d296396b176cdd0f76a9c.py	KMeans	KMeans(2)	191	16	191	25	4331652383181413961	regular_model.fit(napolean)	205	0	205	27	-3856005462183184047
/cb-target/python/43/bc/648ec3a9f9d6c00e2d43515edbbf823de72cfc3d296396b176cdd0f76a9c.py	KMeans	KMeans(2)	193	12	193	21	110171837393123764	pca_model.fit(pca_x)	212	0	212	20	-5092764661837482800
/cb-target/python/43/bc/648ec3a9f9d6c00e2d43515edbbf823de72cfc3d296396b176cdd0f76a9c.py	KMeans	KMeans(2)	230	16	230	25	-4694639873189497300	regular_model.fit(napolean)	244	0	244	27	2740225644367402329
/cb-target/python/43/bc/648ec3a9f9d6c00e2d43515edbbf823de72cfc3d296396b176cdd0f76a9c.py	KMeans	KMeans(2)	232	12	232	21	7318825281297211338	pca_model.fit(pca_x)	250	0	250	20	-3272766609799573465
/cb-target/python/1a/a1/856dbf581da9616e4b241ce4633ddb4840bb6ab78db3a5197418ec4c1d04.py	LinearRegression	linear_model.LinearRegression()	121	5	121	36	7051318457680076548	lm.fit(X, y)	127	0	127	12	-3271350867551585859
/cb-target/python/3b/7c/c82eb493549ecec295d50025cc1a31642f0bb241c59e396c789784d9156e.py	KNeighborsClassifier	neighbors.KNeighborsClassifier(n_neighbors, weights='distance')	182	13	182	76	3899386631428565804	knnclf.fit(bank_train, bank_target_train)	183	4	183	45	-2981899100328221882
/cb-target/python/3b/7c/c82eb493549ecec295d50025cc1a31642f0bb241c59e396c789784d9156e.py	GaussianNB	naive_bayes.GaussianNB()	200	8	200	32	-4934781397289717379	nbclf.fit(bank_train, bank_target_train)	201	8	201	48	-5821832654069284943
/cb-target/python/3b/7c/c82eb493549ecec295d50025cc1a31642f0bb241c59e396c789784d9156e.py	GaussianNB	naive_bayes.GaussianNB()	282	8	282	32	3209448756607318352	nbclf.fit(new_data, clean_data['income'])	283	8	283	49	3408897791966745957
/cb-target/python/3b/7c/c82eb493549ecec295d50025cc1a31642f0bb241c59e396c789784d9156e.py	DecisionTreeClassifier	tree.DecisionTreeClassifier()	191	10	191	39	-4528659998882075463	treeclf.fit(bank_train, bank_target_train)	192	10	192	52	-6482399861613691230
/cb-target/python/3b/7c/c82eb493549ecec295d50025cc1a31642f0bb241c59e396c789784d9156e.py	DecisionTreeClassifier	tree.DecisionTreeClassifier(criterion='entropy', min_samples_split=3)	301	10	301	79	-6297509892770078769	treeclf.fit(new_data, clean_data['income'])	302	10	302	53	-4818629387199093652
/cb-target/python/3b/7c/c82eb493549ecec295d50025cc1a31642f0bb241c59e396c789784d9156e.py	LDA	LDA()	291	8	291	13	6391362824246177679	ldclf.fit(new_data, clean_data['income'])	292	8	292	49	-2994200939164648255
/cb-target/python/40/97/ee7454f89234edfd6818e67c73d419f351d17134972b482244f6f223a336.py	GridSearchCV	grid_search.GridSearchCV(knn, param_grid = parameters, scoring = scoring_function)	240	6	240	88	-942531032952931979	reg.fit(X_train, y_train)	241	0	241	25	-814542282797539274
/cb-target/python/40/97/ee7454f89234edfd6818e67c73d419f351d17134972b482244f6f223a336.py	GridSearchCV	grid_search.GridSearchCV(svc, param_grid = parameters, scoring = scoring_function)	216	6	216	88	5809848159508678902	reg.fit(X_train, y_train)	217	0	217	25	-616888301476824096
/cb-target/python/6c/b9/3c91bdbb9d1a76e21f25f7bf35e2410f0563990eaed3c884673db8612fee.py	PCA	PCA()	155	6	155	11	6687111847038763411	pca.fit(xtab2010s)	156	0	156	18	2461844147327965990
/cb-target/python/77/63/d8ab6eb8f41b56277b30fe9ced23b6885dc165a7c4610ab9976eb14c9133.py	VarianceThreshold	VarianceThreshold()	93	12	93	31	-8141200590475148036	varThresh.fit(df)	94	0	94	17	7540496618300158817
/cb-target/python/77/63/d8ab6eb8f41b56277b30fe9ced23b6885dc165a7c4610ab9976eb14c9133.py	VarianceThreshold	VarianceThreshold()	93	12	93	31	-8141200590475148036	varThresh.fit(df)	126	0	126	17	5689890740887477600
/cb-target/python/77/63/d8ab6eb8f41b56277b30fe9ced23b6885dc165a7c4610ab9976eb14c9133.py	VarianceThreshold	VarianceThreshold(threshold=thresh100)	148	12	148	50	3842294035679289024	varThresh.fit(df)	149	0	149	17	1122069974003990405
/cb-target/python/40/dc/6fa05b6417efd06d8bf8ceed0ac08dbb159ae93a68972144bac199bacb83.py	LinearSVC	LinearSVC(C=0.01)	63	6	63	23	268508066407301797	svm.fit(X,y)	65	0	65	12	-4589348193324334100
/cb-target/python/e5/ac/68325953591330f06f03f1532cf7554dd0e0371828d378f820c1aceb4eb4.py	GradientBoostingClassifier	ensemble.GradientBoostingClassifier()	97	10	97	47	6921437270676715137	clf.fit(X, ys[i])	98	4	98	21	8353035565112420753
/cb-target/python/5a/6a/8c930077b35f78c9dc9b94ff5b43ee468e8d90da3386e678e8b995bccc9a.py	PCA	PCA(n_components=58)	33	6	33	26	4686225685854851798	pca.fit(X)	34	6	34	16	-4288781774529284851
/cb-target/python/57/3e/f79ee626f1dd6f700029f5b3860a031e2787425bd002a257eab51146ef51.py	DecisionTreeClassifier	DecisionTreeClassifier()	118	6	118	30	3263430750537774926	DecisionTreeClassifier().fit(X_train, y_train)	118	6	118	52	-3499397647128426321
/cb-target/python/57/3e/f79ee626f1dd6f700029f5b3860a031e2787425bd002a257eab51146ef51.py	DecisionTreeClassifier	DecisionTreeClassifier()	138	10	138	34	-7969962805320322801	DecisionTreeClassifier().fit(X_train, y_train)	138	10	138	56	-3248754538359661495
/cb-target/python/be/a6/117d7852762c4030028e4f4fcc50ffb4e61c926c865b61309561889b68d5.py	CountVectorizer	"CountVectorizer(analyzer=""word"",  lowercase=False, max_features=1000,\n                                         tokenizer=space_tokenizer, preprocessor=lambda l: ' '.join(l))"	361	25	362	103	6912882222524655306	count_vectorizer_urls.fit(get_users_urls(train_urls, train_ages['user_id'].values))	367	24	367	107	2837856332613618594
/cb-target/python/be/a6/117d7852762c4030028e4f4fcc50ffb4e61c926c865b61309561889b68d5.py	CountVectorizer	"CountVectorizer(analyzer=""word"",  lowercase=False, max_features=5000,\n                                           tokenizer=space_tokenizer, stop_words=stopwords.words('russian'))"	364	27	365	108	7392240456414628095	count_vectorizer_titles.fit(get_users_titles(train_titles, train_ages['user_id'].values))	369	26	369	115	4728022913917814583
/cb-target/python/be/a6/117d7852762c4030028e4f4fcc50ffb4e61c926c865b61309561889b68d5.py	MinMaxScaler	preprocessing.MinMaxScaler()	352	19	352	47	9033031291628565707	activitis_scaler.fit(train_activitis)	353	19	353	56	3061634755897823867
/cb-target/python/38/db/075744a5d34add0bdf955ca4368eadfd3d4c11a66dc264269d8527f96008.py	RandomForestClassifier	RandomForestClassifier(n_jobs=2)	67	8	67	40	5225216051137482700	model.fit(X,Y)	68	0	68	14	-638204675524244324
/cb-target/python/37/4a/e0c7cb81d8666a379aa3792f2a7c4a4c9e0e9e0d32d559b41720750ee3ac.py	GaussianNB	GaussianNB()	149	11	149	23	-8696519729262126078	nb_model.fit(X_train, y_train.ravel())	150	0	150	38	-7283889705210514726
/cb-target/python/37/4a/e0c7cb81d8666a379aa3792f2a7c4a4c9e0e9e0d32d559b41720750ee3ac.py	RandomForestClassifier	RandomForestClassifier(random_state=42)	197	11	197	50	-5421542041928654371	rf_model.fit(X_train, y_train.ravel())	198	0	198	38	5324434576684569324
/cb-target/python/37/4a/e0c7cb81d8666a379aa3792f2a7c4a4c9e0e9e0d32d559b41720750ee3ac.py	LogisticRegression	LogisticRegression(C=0.7,random_state=42)	232	11	232	52	8077807939117989023	lr_model.fit(X_train,y_train.ravel())	233	0	233	37	-1181836631739142833
/cb-target/python/37/4a/e0c7cb81d8666a379aa3792f2a7c4a4c9e0e9e0d32d559b41720750ee3ac.py	LogisticRegressionCV	"LogisticRegressionCV(n_jobs=-1,random_state=42,Cs=3,cv=10,refit=True,class_weight=""balanced"")"	335	14	335	107	5116332764098171218	lr_cv_model.fit(X_train,y_train.ravel())	336	0	336	40	-2685379588922527596
/cb-target/python/7d/fe/d04eadd7cb2d879f3d3b3906cadec6ed3b3b7ecf37a85e0cd16ad53cb6d7.py	LinearRegression	LinearRegression()	62	5	62	23	-1424184291612469998	lm.fit(x, y)	63	0	63	12	7923155333693172689
/cb-target/python/6a/a8/f98200a32a319a06034f7d03b33a47bcace9596550a1bc4adaf87ec82b53.py	KMeans	cluster.KMeans(n_clusters=1000)	172	7	172	38	-3094440517328505843	GM.fit(data_q2_s.loc[:,temp])	173	4	173	33	8557188602799319770
/cb-target/python/6a/a8/f98200a32a319a06034f7d03b33a47bcace9596550a1bc4adaf87ec82b53.py	KMeans	cluster.KMeans(n_clusters=i)	117	8	117	36	-468616500932860939	est.fit(data_q1)	118	4	118	20	8502671777012174598
/cb-target/python/f1/8f/e03ae53645d03eb71b9c7498e43fbdffd9a6b23c5a94691f40b5bb79cfa9.py	SVC	svm.SVC(kernel='linear', C=C)	41	6	41	35	-8735969415000718301	svm.SVC(kernel='linear', C=C).fit(X, y)	41	6	41	45	4949282721060622762
/cb-target/python/f1/8f/e03ae53645d03eb71b9c7498e43fbdffd9a6b23c5a94691f40b5bb79cfa9.py	SVC	svm.SVC(kernel='poly', degree=3, C=C)	51	11	51	48	6754002900206584323	svm.SVC(kernel='poly', degree=3, C=C).fit(X, y)	51	11	51	58	6554671154729916273
/cb-target/python/f1/8f/e03ae53645d03eb71b9c7498e43fbdffd9a6b23c5a94691f40b5bb79cfa9.py	SVC	svm.SVC(kernel='rbf', gamma=0.7, C=C)	46	10	46	47	8951870950116318674	svm.SVC(kernel='rbf', gamma=0.7, C=C).fit(X, y)	46	10	46	57	143385313264563791
/cb-target/python/f1/8f/e03ae53645d03eb71b9c7498e43fbdffd9a6b23c5a94691f40b5bb79cfa9.py	MultinomialNB	MultinomialNB()	33	5	33	20	-1961017308387298507	nb.fit(X, y)	34	0	34	12	8863110009773291045
/cb-target/python/f1/8f/e03ae53645d03eb71b9c7498e43fbdffd9a6b23c5a94691f40b5bb79cfa9.py	TfidfVectorizer	TfidfVectorizer(stop_words = 'english', max_features = 2000)	27	8	27	68	6386276792123547296	cvect.fit(X_train)	28	0	28	18	-6741838887116454071
/cb-target/python/f1/8f/e03ae53645d03eb71b9c7498e43fbdffd9a6b23c5a94691f40b5bb79cfa9.py	LinearSVC	svm.LinearSVC(C=C)	56	10	56	28	-2959734463792278055	svm.LinearSVC(C=C).fit(X, y)	56	10	56	38	-7507013789012972271
/cb-target/python/f1/8f/e03ae53645d03eb71b9c7498e43fbdffd9a6b23c5a94691f40b5bb79cfa9.py	LinearSVR	svm.LinearSVR()	61	6	61	21	4713245624543311680	svm.LinearSVR().fit(X, y)	61	6	61	31	-7983690937499437689
/cb-target/python/01/14/9d87c59f7a6d08b821137ba8216909f32d7649a1dcce386a6c2d782e9e81.py	LogisticRegression	LogisticRegression()	309	5	309	25	3250649075799463456	nb.fit(X_train_dtm, y)	310	0	310	22	279218528618526216
/cb-target/python/01/14/9d87c59f7a6d08b821137ba8216909f32d7649a1dcce386a6c2d782e9e81.py	LogisticRegression	LogisticRegression()	454	5	454	25	-2462263571407862952	nb.fit(X_train_dtm, y)	457	0	457	22	-6473505121213231066
/cb-target/python/01/14/9d87c59f7a6d08b821137ba8216909f32d7649a1dcce386a6c2d782e9e81.py	CountVectorizer	CountVectorizer()	75	7	75	24	5605204115839519769	vect.fit(df.policies_violated)	80	7	80	37	-6899068243833086241
/cb-target/python/45/7a/9f1826b6a59742d417532fdef39b518c292afcaf441fb9c84bc2a052c842.py	SVC	SVC()	58	21	58	26	2874000900589754036	SVC().fit(X_train, y_train)	58	21	58	48	3819450123172412318
/cb-target/python/45/7a/9f1826b6a59742d417532fdef39b518c292afcaf441fb9c84bc2a052c842.py	SVC	SVC(C=1e9, gamma=1e-07)	78	21	78	44	7531469672208471445	SVC(C=1e9, gamma=1e-07).fit(X_train ,y_train)	78	21	78	66	44223986526185184
/cb-target/python/45/7a/9f1826b6a59742d417532fdef39b518c292afcaf441fb9c84bc2a052c842.py	LogisticRegression	LogisticRegression()	94	9	94	29	7653031072349280326	LogisticRegression().fit(X_train, y_train)	94	9	94	51	4865114452036429333
/cb-target/python/45/7a/9f1826b6a59742d417532fdef39b518c292afcaf441fb9c84bc2a052c842.py	GridSearchCV	GridSearchCV(lr, param_grid=grid_values, scoring='recall', cv=3)	118	15	118	79	5205797373229678264	grid_clf.fit(X_train, y_train)	119	17	119	47	-8432995357801530199
/cb-target/python/45/7a/9f1826b6a59742d417532fdef39b518c292afcaf441fb9c84bc2a052c842.py	DummyClassifier	DummyClassifier(strategy='most_frequent')	40	21	40	62	-3164894353464761844	DummyClassifier(strategy='most_frequent').fit(X_train, y_train)	40	21	40	84	-301170908279011414
/cb-target/python/fb/a9/cf7a67e4ee02f3ca5a29768722947ef8411956149bc1ee88ff6319d17ca7.py	LogisticRegression	LogisticRegression()	88	8	88	28	-1459261100627594724	model.fit(X, y)	90	0	90	15	-1583665535529971117
/cb-target/python/fb/a9/cf7a67e4ee02f3ca5a29768722947ef8411956149bc1ee88ff6319d17ca7.py	LogisticRegression	LogisticRegression()	104	8	104	28	-2328634064850455853	model.fit(X, y)	106	0	106	15	-102661117171375103
/cb-target/python/fb/a9/cf7a67e4ee02f3ca5a29768722947ef8411956149bc1ee88ff6319d17ca7.py	LogisticRegression	LogisticRegression()	201	8	201	28	3360153925606947015	model.fit(X, y)	203	0	203	15	2142479107812740050
/cb-target/python/fb/a9/cf7a67e4ee02f3ca5a29768722947ef8411956149bc1ee88ff6319d17ca7.py	LogisticRegression	LogisticRegression()	287	8	287	28	-1781298989179797937	model.fit(X, y)	289	0	289	15	-3029465881500011805
/cb-target/python/fb/a9/cf7a67e4ee02f3ca5a29768722947ef8411956149bc1ee88ff6319d17ca7.py	LogisticRegression	LogisticRegression()	312	8	312	28	4394340470376595212	model.fit(X, y)	314	0	314	15	4598624267574011822
/cb-target/python/fb/a9/cf7a67e4ee02f3ca5a29768722947ef8411956149bc1ee88ff6319d17ca7.py	LogisticRegression	LogisticRegression()	335	8	335	28	-6620199218534100809	model.fit(X, y)	337	0	337	15	520560562177435897
/cb-target/python/fb/a9/cf7a67e4ee02f3ca5a29768722947ef8411956149bc1ee88ff6319d17ca7.py	LogisticRegression	LogisticRegression()	367	5	367	25	-5344926992279314038	lm.fit(X_train, y_train)	377	8	377	32	-2206448403623161546
/cb-target/python/fb/a9/cf7a67e4ee02f3ca5a29768722947ef8411956149bc1ee88ff6319d17ca7.py	LogisticRegression	LogisticRegression()	367	5	367	25	-5344926992279314038	lm.fit(X_train, y_train)	394	8	394	32	1538465356089969206
/cb-target/python/fb/a9/cf7a67e4ee02f3ca5a29768722947ef8411956149bc1ee88ff6319d17ca7.py	LogisticRegression	LogisticRegression()	367	5	367	25	-5344926992279314038	lm.fit(X_train, y_train)	403	8	403	32	-5474674946965945609
/cb-target/python/fb/a9/cf7a67e4ee02f3ca5a29768722947ef8411956149bc1ee88ff6319d17ca7.py	GridSearchCV	GridSearchCV(estimator=modelAmTesting, param_grid=paramerters,verbose=10)	122	14	122	87	-7208318597315668361	grid_search.fit(X,y)	123	0	123	20	5164904598378875477
/cb-target/python/fb/a9/cf7a67e4ee02f3ca5a29768722947ef8411956149bc1ee88ff6319d17ca7.py	GridSearchCV	GridSearchCV(estimator=modelAmTesting, param_grid=paramerters, verbose=10)	216	14	216	88	-1316819814164162913	grid_search.fit(X,y)	218	0	218	20	6827303244570943969
/cb-target/python/eb/1f/c04b7e31ad0df41261c8ecaf0a5e441cc548c81abd75baa04e5e6e4dd992.py	CountVectorizer	CountVectorizer()	111	7	111	24	-6876859233155758256	vect.fit(X_train)	113	0	113	17	8755136805288515141
/cb-target/python/eb/1f/c04b7e31ad0df41261c8ecaf0a5e441cc548c81abd75baa04e5e6e4dd992.py	MultinomialNB	MultinomialNB()	134	5	134	20	-3562291654073959142	nb.fit(X_train_dtm, y_train)	135	0	135	28	2177934346792043629
/cb-target/python/3c/61/769593d2633760269c800a95baaf352540aafb94742015757441b8cf0d97.py	RandomForestRegressor	RandomForestRegressor(n_estimators=150, max_features=8, oob_score=True, random_state=1)	356	8	356	95	-8508073927579053394	rfreg.fit(X, y)	357	0	357	15	9119310666758749806
/cb-target/python/3c/61/769593d2633760269c800a95baaf352540aafb94742015757441b8cf0d97.py	DecisionTreeRegressor	DecisionTreeRegressor(max_depth=2, random_state=1)	284	10	284	60	-2092060280904971833	treereg.fit(X, y)	285	0	285	17	-3040820081822486809
/cb-target/python/3c/61/769593d2633760269c800a95baaf352540aafb94742015757441b8cf0d97.py	DecisionTreeRegressor	DecisionTreeRegressor(max_depth=None, random_state=123)	108	10	108	65	-2064517175030230828	treereg.fit(X_train, y_train)	121	4	121	33	4196109246457696323
/cb-target/python/3c/61/769593d2633760269c800a95baaf352540aafb94742015757441b8cf0d97.py	BaggingRegressor	BaggingRegressor(DecisionTreeRegressor(), n_estimators=500, bootstrap=True, oob_score=True, random_state=1)	157	9	157	116	-2780165286236212072	bagreg.fit(X_train, y_train)	163	0	163	28	-6897959342342549945
/cb-target/python/4f/4a/b0b1bf901c657c650c973e1d897ae3d0861fd67bdb96834a82f8d0bbfd9c.py	RandomForestRegressor	ensemble.RandomForestRegressor(n_estimators=500,\n                                    criterion='mse',\n                                    max_features='sqrt',\n                                    max_depth=None,\n                                    min_samples_split=20)	141	6	145	57	-7470350462464453136	RFR.fit(X_train, y_train)	147	0	147	25	8682830994815680736
/cb-target/python/4f/4a/b0b1bf901c657c650c973e1d897ae3d0861fd67bdb96834a82f8d0bbfd9c.py	RandomForestRegressor	ensemble.RandomForestRegressor(n_estimators=20,\n                                         criterion='mse',\n                                         max_features='sqrt',\n                                         max_depth=None,\n                                         min_samples_split=i)	96	10	100	61	-5123910358814889397	RFR.fit(X_train, y_train)	102	4	102	29	3772857854692322482
/cb-target/python/4f/4a/b0b1bf901c657c650c973e1d897ae3d0861fd67bdb96834a82f8d0bbfd9c.py	RandomForestRegressor	ensemble.RandomForestRegressor(n_estimators=50,\n                                             criterion='mse',\n                                             max_features='sqrt',\n                                             max_depth=None,\n                                             min_samples_split=i)	115	14	119	65	-988408127867002784	RFR.fit(X_train, y_train)	121	8	121	33	-2139759185340463156
/cb-target/python/4f/4a/b0b1bf901c657c650c973e1d897ae3d0861fd67bdb96834a82f8d0bbfd9c.py	RandomForestRegressor	ensemble.RandomForestRegressor(n_estimators=10,\n                                     criterion='mse',\n                                     max_features='sqrt',\n                                     max_depth=None,\n                                     min_samples_split=2)	63	6	67	57	8294442636371376444	RFR.fit(X_train, y_train)	73	0	73	25	-5824302452517575952
/cb-target/python/23/90/9b162cd44ae971273e6aa163ff819493506e1de8aafd1e82b692e386056f.py	KNeighborsRegressor	neighbors.KNeighborsRegressor(n_neighbors=7)	429	8	429	52	-4559032146536774855	model.fit(X_train, y_train)	436	9	436	36	-4254000431232390681
/cb-target/python/37/2b/26bcff9c534848e7bb0f72e564017a63b0efcca0bfe8a57ced54d3e39aa1.py	GMM	GMM(n_components=2, random_state=0)	282	4	282	39	-6582342749016671889	g.fit(reduced_data)	283	0	283	19	4521894392489156703
/cb-target/python/37/2b/26bcff9c534848e7bb0f72e564017a63b0efcca0bfe8a57ced54d3e39aa1.py	PCA	PCA(n_components=6, copy=True)	191	6	191	36	-7842832811354560996	pca.fit(good_data)	192	0	192	18	426071766479917540
/cb-target/python/37/2b/26bcff9c534848e7bb0f72e564017a63b0efcca0bfe8a57ced54d3e39aa1.py	DecisionTreeRegressor	DecisionTreeRegressor(random_state=turn*100)	108	20	108	64	3275397911363284498	regressor.fit(X_train, y_train)	109	8	109	39	-6816877947128123261
/cb-target/python/37/2b/26bcff9c534848e7bb0f72e564017a63b0efcca0bfe8a57ced54d3e39aa1.py	KMeans	KMeans(n_clusters=n, random_state=0)	252	16	252	52	3944971185970060045	clusterer.fit(reduced_data)	253	4	253	31	1795645402529320970
/cb-target/python/ff/c0/e8e04660f34ab10eb58d54e2d50c5d9f7a12a8933a3888a154f33699f53d.py	RandomForestRegressor	RandomForestRegressor(n_estimators=100)	72	8	72	47	-4025394387951902332	model.fit(x, y)	73	0	73	15	-3496185316936575502
/cb-target/python/ff/c0/e8e04660f34ab10eb58d54e2d50c5d9f7a12a8933a3888a154f33699f53d.py	GridSearchCV	"GridSearchCV(estimator=svr_rbf, param_grid=dict(C=Cs, gamma = gama, epsilon = eps ),n_jobs=-1, verbose = True,scoring =""mean_squared_error"")"	124	6	124	146	4964534275482060518	clf.fit(selectx,y)	129	0	129	18	-3551158302745052958
/cb-target/python/ff/c0/e8e04660f34ab10eb58d54e2d50c5d9f7a12a8933a3888a154f33699f53d.py	GridSearchCV	"GridSearchCV(estimator=svr_rbf, param_grid=dict(C=Cs, gamma = gama, epsilon = eps ),n_jobs=-1, verbose = True,scoring =""mean_squared_error"")"	223	6	223	146	8118810242798979517	clf.fit(x,y)	242	0	242	12	-2480488338304900150
/cb-target/python/ff/c0/e8e04660f34ab10eb58d54e2d50c5d9f7a12a8933a3888a154f33699f53d.py	SVR	SVR(kernel='rbf', C=1, gamma=0.002, epsilon = 0.01)	263	16	263	67	7591713082167103426	svr_rbf_final.fit(x1,y1)	283	0	283	24	-7900781831164848139
/cb-target/python/ff/c0/e8e04660f34ab10eb58d54e2d50c5d9f7a12a8933a3888a154f33699f53d.py	SVR	SVR(kernel='rbf', C=1000, gamma=0.002, epsilon = 0.5)	154	16	154	69	8693018715613110839	svr_rbf_final.fit(x1,y1)	174	0	174	24	8741095601893338955
/cb-target/python/ff/c0/e8e04660f34ab10eb58d54e2d50c5d9f7a12a8933a3888a154f33699f53d.py	RFE	RFE(model, 5)	83	6	83	19	7767984392803105793	rfe.fit(x, y)	84	6	84	19	-7108760925937366860
/cb-target/python/1f/ea/a5ededfeac88821ce3f8234631174418d2b3de609f0d9b292213b65f0f70.py	RandomForestClassifier	RandomForestClassifier(n_jobs=2)	33	8	33	40	-5808984433154400835	model.fit(x,y)	34	0	34	14	-2879068565380799913
/cb-target/python/80/b5/2b5dfd4bbd9732ccc8817f4a2b0af91f885927f07feaeaa8efc29168851c.py	LogisticRegression	lm.LogisticRegression()	26	8	26	31	-8866635366168642248	model.fit(X, y)	34	0	34	15	9162443366469708362
/cb-target/python/80/b5/2b5dfd4bbd9732ccc8817f4a2b0af91f885927f07feaeaa8efc29168851c.py	LogisticRegression	lm.LogisticRegression()	26	8	26	31	-8866635366168642248	model.fit(X, y)	81	0	81	15	-2099431663927759942
/cb-target/python/8e/5a/53f8fb87c201ad9c594b8a547183e4da8bbcf832495a39171c9c9e6311d1.py	LinearRegression	LinearRegression()	89	10	89	28	-5409098062073069574	lineReg.fit(X_train, y_train)	94	8	94	37	1790757836927161641
/cb-target/python/02/ef/7264c51928740cfee3e33d2b3b273924b0c41520eb1ae42a45f457e818ae.py	LogisticRegressionCV	LogisticRegressionCV(Cs=50,cv=10)	45	7	45	40	9045861270358554858	lrcv.fit(Xtrain_scaled,ytrain)	46	0	46	30	335869275810825773
/cb-target/python/37/3f/694dd32bab8d02854dd12e719775cd97b85fc980a8e8a17a0d8ac46200f4.py	RF	RF()	217	5	217	9	9145469781792684585	rf.fit(user_bill_train.values,user_bill_not_null[col])	219	4	219	58	8640504792555397703
/cb-target/python/37/3f/694dd32bab8d02854dd12e719775cd97b85fc980a8e8a17a0d8ac46200f4.py	RF	RF()	360	5	360	9	-7370999333838432943	rf.fit(user_not_null.values,user_browser_not_null[col])	362	4	362	59	8724171932706408879
/cb-target/python/0a/70/2d7896be7b5a205e17ff2829a16298288ae4d8994bc76e6d622e554e7534.py	DecisionTreeClassifier	DecisionTreeClassifier( criterion ='entropy', max_depth=3,random_state = 0)	60	7	60	82	-7458703258066659289	tree.fit(X_train , y_train)	61	11	61	38	3742019094051362433
/cb-target/python/0a/70/2d7896be7b5a205e17ff2829a16298288ae4d8994bc76e6d622e554e7534.py	DecisionTreeClassifier	DecisionTreeClassifier( criterion ='entropy',max_depth=2,random_state = 0)	75	7	75	81	-2713021082057815550	tree.fit(X_train[train],y_train[train])	79	6	79	45	-3446279036162427893
/cb-target/python/0a/70/2d7896be7b5a205e17ff2829a16298288ae4d8994bc76e6d622e554e7534.py	DecisionTreeClassifier	DecisionTreeClassifier( criterion ='entropy',random_state = 0)	47	7	47	69	7300373633883964662	tree.fit( X_train, y_train)	48	11	48	38	-114682590800177304
/cb-target/python/ad/d0/43dd8dfd9b4d5f05a0ab5a219131f6c7a56b85c9fc844b901763da407d42.py	LinearRegression	linear_model.LinearRegression()	28	9	28	40	-8840128722222392517	linreg.fit(x, y)	29	0	29	16	-4686709780742553179
/cb-target/python/ad/d0/43dd8dfd9b4d5f05a0ab5a219131f6c7a56b85c9fc844b901763da407d42.py	LinearRegression	linear_model.LinearRegression()	30	6	30	37	-7919360238638909172	lr2.fit(y, x)	31	0	31	13	-8987741714947217544
/cb-target/python/ad/d0/43dd8dfd9b4d5f05a0ab5a219131f6c7a56b85c9fc844b901763da407d42.py	LinearRegression	linear_model.LinearRegression()	63	9	63	40	3240752442317921146	linreg.fit(x, y)	64	0	64	16	7861532030449120109
/cb-target/python/ad/d0/43dd8dfd9b4d5f05a0ab5a219131f6c7a56b85c9fc844b901763da407d42.py	LinearRegression	linear_model.LinearRegression()	103	6	103	37	-1143722583063125251	lra.fit(a, y_new)	104	0	104	17	-2348508397443598865
/cb-target/python/ad/d0/43dd8dfd9b4d5f05a0ab5a219131f6c7a56b85c9fc844b901763da407d42.py	LinearRegression	linear_model.LinearRegression()	110	6	110	37	-4825388519585847476	lrb.fit(b, y)	111	0	111	13	-289021802427787338
/cb-target/python/ad/d0/43dd8dfd9b4d5f05a0ab5a219131f6c7a56b85c9fc844b901763da407d42.py	LinearRegression	linear_model.LinearRegression()	117	6	117	37	-7661786618553412087	lrc.fit(c, y)	118	0	118	13	8340886113770520791
/cb-target/python/ad/d0/43dd8dfd9b4d5f05a0ab5a219131f6c7a56b85c9fc844b901763da407d42.py	LinearRegression	linear_model.LinearRegression()	124	6	124	37	-4439293616969349647	lrd.fit(d, y)	125	0	125	13	-1301492473600596682
/cb-target/python/ad/d0/43dd8dfd9b4d5f05a0ab5a219131f6c7a56b85c9fc844b901763da407d42.py	LinearRegression	linear_model.LinearRegression()	131	6	131	37	-6997950449900816367	lre.fit(e, y)	132	0	132	13	6124824127521694271
/cb-target/python/3a/0e/8f60a95889e6e39deaeef47f8598dc168e1efd53b444af37dcad54dc96fb.py	SVC	SVC(kernel='poly')	233	6	233	24	1268030798011761959	model.fit(X_train,y_train)	234	0	234	26	-2120552907502176029
/cb-target/python/3a/0e/8f60a95889e6e39deaeef47f8598dc168e1efd53b444af37dcad54dc96fb.py	LogisticRegression	LogisticRegression()	212	6	212	26	978809610372663640	model.fit(X_train,y_train)	213	0	213	26	-2265975029306064200
/cb-target/python/3a/0e/8f60a95889e6e39deaeef47f8598dc168e1efd53b444af37dcad54dc96fb.py	GridSearchCV	GridSearchCV(estimator=classifier,\n                        param_grid=parameters,\n                        scoring='accuracy',\n                        cv=10)	198	12	201	30	-513849359086548836	grid_search.fit(X_train,y_train)	202	12	202	44	-3405712237733462180
/cb-target/python/3a/0e/8f60a95889e6e39deaeef47f8598dc168e1efd53b444af37dcad54dc96fb.py	GridSearchCV	GridSearchCV(model,param_grid,cv=10,scoring='accuracy')	335	5	335	60	-440679581648089798	grid.fit(X,y)	341	0	341	13	-6897555343734791581
/cb-target/python/3a/0e/8f60a95889e6e39deaeef47f8598dc168e1efd53b444af37dcad54dc96fb.py	RandomizedSearchCV	RandomizedSearchCV(model,param_dist,cv=10,scoring='accuracy',n_iter=10,random_state=5)	367	5	367	91	-8736165667035590599	rand.fit(X,y)	368	0	368	13	5495071032671568679
/cb-target/python/63/dd/787ba696a66e63d09c16b6956a5da0a286feacb0e7dc8ff5e5f7892ce206.py	GridSearchCV	GridSearchCV(xgboost.XGBRegressor(learning_rate = 0.05), tuned_parameters, cv=5, scoring= scoring_fnc)	250	6	250	108	-7430592142749491672	gbm.fit(features_train, labels_train)	251	0	251	37	5763826649924056739
/cb-target/python/63/dd/787ba696a66e63d09c16b6956a5da0a286feacb0e7dc8ff5e5f7892ce206.py	LabelEncoder	LabelEncoder()	99	24	99	38	-5230303679446994714	label_encoder.fit(labels[i])	100	8	100	36	2402168353971595511
/cb-target/python/63/dd/787ba696a66e63d09c16b6956a5da0a286feacb0e7dc8ff5e5f7892ce206.py	KNeighborsRegressor	KNeighborsRegressor(n_neighbors=2)	219	6	219	40	8967826395607653402	knn.fit(features_train, labels_train)	220	0	220	37	-4947995943880892518
/cb-target/python/79/95/42da2be20e27cc0288f35a17aa1b08433ebb2155a44b27cccdaf13e16203.py	RandomForestClassifier	RandomForestClassifier(n_estimators=1000,oob_score=True)	514	4	514	60	5944946606040987279	RandomForestClassifier(n_estimators=1000,oob_score=True).fit(X_train,Y_train)	514	4	514	81	7650276613209936370
/cb-target/python/79/95/42da2be20e27cc0288f35a17aa1b08433ebb2155a44b27cccdaf13e16203.py	LogisticRegression	LogisticRegression(penalty='l1',C=np.exp(right_start),solver='liblinear')	638	13	638	86	2917804900258581253	regression.fit(X,Y)	639	0	639	19	-6472082454369070159
/cb-target/python/79/95/42da2be20e27cc0288f35a17aa1b08433ebb2155a44b27cccdaf13e16203.py	LogisticRegression	LogisticRegression(penalty='l1',C=np.exp(left_start),solver='liblinear')	635	13	635	85	5397176447506432815	regression.fit(X,Y)	636	0	636	19	8394885774340559478
/cb-target/python/79/95/42da2be20e27cc0288f35a17aa1b08433ebb2155a44b27cccdaf13e16203.py	LogisticRegression	LogisticRegression(penalty='l1',C=np.exp(sigma),solver='liblinear')	647	17	647	84	9211775638985028414	LogisticRegression(penalty='l1',C=np.exp(sigma),solver='liblinear').fit(X,Y)	647	17	647	93	-968948797493859918
/cb-target/python/79/95/42da2be20e27cc0288f35a17aa1b08433ebb2155a44b27cccdaf13e16203.py	DecisionTreeClassifier	DecisionTreeClassifier(min_samples_leaf=i**2)	614	10	614	55	-4739953494139107278	DecisionTreeClassifier(min_samples_leaf=i**2).fit(X.reshape(-1, 1),Y)	614	10	614	79	5797016629159731547
/cb-target/python/65/32/d46e2a2523ea362daf4891731d76b6c105a2d8557bf630f1849f0fc9628b.py	LinearRegression	linear_model.LinearRegression( fit_intercept=False)	41	6	41	57	6461707464438204779	ols.fit(X,Y)	42	0	42	12	8150259762911573792
/cb-target/python/65/32/d46e2a2523ea362daf4891731d76b6c105a2d8557bf630f1849f0fc9628b.py	LinearRegression	linear_model.LinearRegression( fit_intercept=False)	78	8	78	59	1124057144779027808	ols_1.fit(X_1,Y_1)	79	0	79	18	366124677250045909
/cb-target/python/65/32/d46e2a2523ea362daf4891731d76b6c105a2d8557bf630f1849f0fc9628b.py	LinearRegression	linear_model.LinearRegression( fit_intercept=False)	86	8	86	59	7101309378010024343	ols_2.fit(X_2,Y_2)	87	0	87	18	-8748790123288348987
/cb-target/python/89/5e/3bc550640a1ec63a5eec81f893a168ade48def90a7e0571c97145a2c7464.py	SVC	SVC(kernel='rbf')	158	15	158	32	-2818317020255699642	leaf_svm.fit(X[train], y[train])	159	4	159	36	1303352299972614550
/cb-target/python/89/5e/3bc550640a1ec63a5eec81f893a168ade48def90a7e0571c97145a2c7464.py	LabelEncoder	preprocessing.LabelEncoder()	117	5	117	33	-1195316307566902393	preprocessing.LabelEncoder().fit(train_csv['species'].as_matrix())	117	5	117	71	1312111205605609597
/cb-target/python/89/5e/3bc550640a1ec63a5eec81f893a168ade48def90a7e0571c97145a2c7464.py	LabelEncoder	preprocessing.LabelEncoder()	140	5	140	33	449759286527995140	preprocessing.LabelEncoder().fit(train_csv['species'].as_matrix())	140	5	140	71	7661779685812278062
/cb-target/python/49/35/317b3d05cb429fa6a15431e81d2c85b238d7dba051c6618b7df8e793542c.py	LinearRegression	linear_model.LinearRegression()	62	6	62	37	-3374510398893875369	reg.fit(x_train, y_train)	63	11	63	36	5886322662400688478
/cb-target/python/49/35/317b3d05cb429fa6a15431e81d2c85b238d7dba051c6618b7df8e793542c.py	Ridge	linear_model.Ridge(alpha=.4)	71	6	71	34	4282951801813951282	reg.fit(x_train, y_train)	72	11	72	36	-3130000469181165133
/cb-target/python/49/35/317b3d05cb429fa6a15431e81d2c85b238d7dba051c6618b7df8e793542c.py	Lasso	linear_model.Lasso()	80	11	80	31	2328887129681304281	lassoreg.fit(x_train, y_train)	81	0	81	30	6804754742031690465
/cb-target/python/2e/41/3975f3b3f6da8b72bac319f02b69f71806022ee961bbdefae4a96bb732f7.py	LogisticRegression	LogisticRegression(C = C)	174	10	174	35	1194725747628218860	clf.fit(X_train, y_train)	175	4	175	29	-4379799275499329471
/cb-target/python/2e/41/3975f3b3f6da8b72bac319f02b69f71806022ee961bbdefae4a96bb732f7.py	GridSearchCV	GridSearchCV(clf, grid, scoring='neg_log_loss', n_jobs=-1, verbose=1)	132	5	132	74	-7940635470282185981	cv.fit(X_train, y_train)	133	0	133	24	-1932235437921490076
/cb-target/python/2e/41/3975f3b3f6da8b72bac319f02b69f71806022ee961bbdefae4a96bb732f7.py	MinMaxScaler	MinMaxScaler()	115	9	115	23	-4703813692214656151	MinMaxScaler().fit(df_train[['cos_sim']])	115	9	115	50	-1561147164285805900
/cb-target/python/87/3c/d99f660ae4c810828f16f8a02c9f6a0992bde98aaf3f49e7fdd58b4d5193.py	LinearRegression	LinearRegression()	29	5	29	23	-8088689640621893150	lm.fit(x,y)	30	0	30	11	142306429235275212
/cb-target/python/88/ac/b449ba01e2f2f95d99d3d1ff125594e72931635354bae10ef2689619bceb.py	GradientBoostingRegressor	ensemble.GradientBoostingRegressor(n_estimators=200, max_depth=5)	196	4	196	69	-6530811355954683856	m.fit(X_train, y_train)	197	0	197	23	-8219347882904256686
/cb-target/python/88/ac/b449ba01e2f2f95d99d3d1ff125594e72931635354bae10ef2689619bceb.py	StandardScaler	preprocessing.StandardScaler()	127	10	127	40	-8685440409455957024	scl.fit(X_train[cont])	128	10	128	32	-443116513180224938
/cb-target/python/88/ac/b449ba01e2f2f95d99d3d1ff125594e72931635354bae10ef2689619bceb.py	Normalizer	preprocessing.Normalizer()	111	10	111	36	8231716816256777441	nml.fit(X_train[skewed])	112	10	112	34	5251675724729612464
/cb-target/python/ac/55/9d77c672068425881710b525e43870ce576214fec4935a50a344983a51bd.py	LinearRegression	linear_model.LinearRegression()	57	13	57	44	8298854443403505927	skl_linmod.fit(x,y)	60	0	60	19	-6197003244221752962
/cb-target/python/ac/55/9d77c672068425881710b525e43870ce576214fec4935a50a344983a51bd.py	LinearRegression	linear_model.LinearRegression()	129	13	129	44	-2151146830479140118	skl_linmod.fit(X1, y)	130	0	130	21	-1523412771733032612
/cb-target/python/ac/55/9d77c672068425881710b525e43870ce576214fec4935a50a344983a51bd.py	LinearRegression	linear_model.LinearRegression()	174	21	174	52	7621416756372878690	skl_linmod_reduced.fit(X1reduced, y)	175	0	175	36	1419224059829949301
/cb-target/python/ac/55/9d77c672068425881710b525e43870ce576214fec4935a50a344983a51bd.py	LinearRegression	linear_model.LinearRegression()	218	13	218	44	7468117171195428981	skl_linmod.fit(X[:9], y[:9])	219	0	219	28	8390964390888387035
/cb-target/python/ac/55/9d77c672068425881710b525e43870ce576214fec4935a50a344983a51bd.py	LinearRegression	linear_model.LinearRegression()	244	17	244	48	5596789024140344422	skl_linmod_all.fit(X, y)	245	0	245	24	-6574233626055126872
/cb-target/python/ac/55/9d77c672068425881710b525e43870ce576214fec4935a50a344983a51bd.py	LinearRegression	linear_model.LinearRegression()	277	18	277	49	4093090475156351395	skl_polymod_all.fit(X2,y)	278	0	278	25	-1426453613029313169
/cb-target/python/ac/55/9d77c672068425881710b525e43870ce576214fec4935a50a344983a51bd.py	LinearRegression	linear_model.LinearRegression()	283	19	283	50	7170759773268039206	skl_polyimod_all.fit(X2i,y)	284	0	284	27	-3417506334034997776
/cb-target/python/ac/55/9d77c672068425881710b525e43870ce576214fec4935a50a344983a51bd.py	LinearRegression	linear_model.LinearRegression()	301	24	301	55	-5742653038929269155	skl_polymod_all_d.fit(Xd,y)	302	4	302	31	5546597647428416810
/cb-target/python/ac/55/9d77c672068425881710b525e43870ce576214fec4935a50a344983a51bd.py	LinearRegression	linear_model.LinearRegression()	306	24	306	55	-417834066348188298	skl_polymod_all_d.fit(Xd_train,yd_train)	307	4	307	44	525087871414708113
/cb-target/python/ac/55/9d77c672068425881710b525e43870ce576214fec4935a50a344983a51bd.py	LinearRegression	linear_model.LinearRegression()	330	21	330	52	-1434522891522192126	skl_linmod_enc_all.fit(Xenc,y)	331	0	331	30	80181673826317956
/cb-target/python/ac/55/9d77c672068425881710b525e43870ce576214fec4935a50a344983a51bd.py	Ridge	Ridge(alpha=a)	347	16	347	30	2481098542997654030	skl_ridge.fit(Xenc,y)	348	4	348	25	3121998241470327139
/cb-target/python/ac/55/9d77c672068425881710b525e43870ce576214fec4935a50a344983a51bd.py	Ridge	Ridge(alpha=a)	351	16	351	30	5903833117032169564	skl_ridge.fit(Xa_train,ya_train)	352	4	352	36	-5314836078429814423
/cb-target/python/ac/55/9d77c672068425881710b525e43870ce576214fec4935a50a344983a51bd.py	StandardScaler	StandardScaler()	215	9	215	25	5138822136166736322	StandardScaler().fit(X)	215	9	215	32	-5972639539346886159
/cb-target/python/ac/55/9d77c672068425881710b525e43870ce576214fec4935a50a344983a51bd.py	OneHotEncoder	OneHotEncoder()	327	10	327	25	6078067822751706820	encoder.fit(X)	328	0	328	14	-1473625486331046029
/cb-target/python/ac/55/9d77c672068425881710b525e43870ce576214fec4935a50a344983a51bd.py	KernelDensity	KernelDensity(bandwidth=bandwidth)	92	14	92	48	257680343336220204	kde_skl.fit(x[:, np.newaxis])	93	4	93	33	-6439370630491727779
/cb-target/python/83/ab/4c185446b908d990009236e9ac36005a51c43f78097334c8834f3cbd97cd.py	LinearRegression	LinearRegression()	37	10	37	28	-4345648010354786941	lin_reg.fit(X,y)	38	0	38	16	-944160740398079841
/cb-target/python/83/ab/4c185446b908d990009236e9ac36005a51c43f78097334c8834f3cbd97cd.py	LinearRegression	LinearRegression()	68	11	68	29	5211905844981301772	lin_reg2.fit(X_poly, y)	69	0	69	23	-7844474713101140575
/cb-target/python/77/08/340862ac829797d5ce238912a1681385fa657e9c00ca578a451a164e15e4.py	GradientBoostingClassifier	GradientBoostingClassifier(\\n                                 n_estimators=100,\n                                 learning_rate=1.0,\n                                 max_depth=1,\n                                 random_state=1)	308	19	312	48	-1289665228300823814	GradientBoostingClassifier(\\n                                 n_estimators=100,\n                                 learning_rate=1.0,\n                                 max_depth=1,\n                                 random_state=1)\\n                    .fit(x_train, y_train)	308	19	313	42	676685204634288327
/cb-target/python/77/08/340862ac829797d5ce238912a1681385fa657e9c00ca578a451a164e15e4.py	LogisticRegression	linear_model.LogisticRegression()	279	9	279	42	7014391706544006733	logreg.fit(x_train, y_train)	280	0	280	28	5918560780370553526
/cb-target/python/77/08/340862ac829797d5ce238912a1681385fa657e9c00ca578a451a164e15e4.py	GridSearchCV	GridSearchCV(\n                                GradientBoostingClassifier(\\n                                    n_estimators=100,\n                                    learning_rate=1.0,\n                                    max_depth=1,\n                                    random_state=1),\n                                param_grid,\n                                cv=5,\n                                n_jobs=-1)	334	27	342	42	-2815577000631140110	GridSearchCV(\n                                GradientBoostingClassifier(\\n                                    n_estimators=100,\n                                    learning_rate=1.0,\n                                    max_depth=1,\n                                    random_state=1),\n                                param_grid,\n                                cv=5,\n                                n_jobs=-1)\\n                            .fit(x_train, y_train)	334	27	343	50	-6891400048744796130
/cb-target/python/77/08/340862ac829797d5ce238912a1681385fa657e9c00ca578a451a164e15e4.py	GridSearchCV	GridSearchCV(logistic_pca_model, param_grid, n_jobs=-1, cv=5)	297	20	297	81	-2433557634329011562	best_logistic_pca.fit(x_train, y_train)	298	0	298	39	2638876896736611030
/cb-target/python/77/08/340862ac829797d5ce238912a1681385fa657e9c00ca578a451a164e15e4.py	MLPClassifier	MLPClassifier(random_state=1, max_iter=1000, solver= 'adam', hidden_layer_sizes=(24,12,6), learning_rate_init= 0.1)	352	6	352	121	-4646868017327223488	mlp.fit(x_train, y_train)	353	0	353	25	-1546430733368717023
/cb-target/python/90/ed/40510547ce833d29d08d4ba44c9e6c33d471c946cb4fa6debd3b1bcac9da.py	StandardScaler	StandardScaler()	39	8	39	24	-4671941986625917331	StandardScaler().fit(train)	39	8	39	35	-1042451752886845269
/cb-target/python/90/ed/40510547ce833d29d08d4ba44c9e6c33d471c946cb4fa6debd3b1bcac9da.py	LabelEncoder	LabelEncoder()	30	16	30	30	4258043817624802310	LabelEncoder().fit(train_labels)	30	16	30	48	5701481881424936102
/cb-target/python/2c/95/68705cbf02ddec14ca63dfa452ec055f77cedda14b7e3106f11d2ce897df.py	GMM	GMM(n_components=2)	374	12	374	31	7788234758844900039	GMM(n_components=2).fit(reduced_data)	374	12	374	49	-2795010987071716413
/cb-target/python/2c/95/68705cbf02ddec14ca63dfa452ec055f77cedda14b7e3106f11d2ce897df.py	GMM	GMM(n_components=n_clusters)	334	16	334	44	-3613080582670835475	GMM(n_components=n_clusters).fit(reduced_data)	334	16	334	62	-5701665190515874187
/cb-target/python/2c/95/68705cbf02ddec14ca63dfa452ec055f77cedda14b7e3106f11d2ce897df.py	PCA	PCA(n_components=2)	295	6	295	25	6641761777118534725	pca.fit(good_data)	296	0	296	18	1404173884570245420
/cb-target/python/2c/95/68705cbf02ddec14ca63dfa452ec055f77cedda14b7e3106f11d2ce897df.py	PCA	PCA(n_components=6)	265	6	265	25	-2457552090254355896	pca.fit(good_data)	267	0	267	18	4152704925335786275
/cb-target/python/2c/95/68705cbf02ddec14ca63dfa452ec055f77cedda14b7e3106f11d2ce897df.py	DecisionTreeRegressor	DecisionTreeRegressor(random_state=42)	132	10	132	48	2139729218382981192	dtr.fit(X_train, y_train)	134	4	134	29	-1349243094185592196
/cb-target/python/2c/95/68705cbf02ddec14ca63dfa452ec055f77cedda14b7e3106f11d2ce897df.py	KMeans	KMeans(n_clusters=n_clusters)	355	16	355	45	407086082024560732	KMeans(n_clusters=n_clusters).fit(reduced_data)	355	16	355	63	-5495475928430949412
/cb-target/python/74/74/3db0cec14246bd98349d9ff99b798022569ced27b5a275eb80fb7c361ede.py	OneClassSVM	svm.OneClassSVM(gamma=10, nu=0.01)	192	7	192	41	5696247432633643263	svm_.fit(sdata[person_features])	193	0	193	32	-787614847608572827
/cb-target/python/57/aa/077fa35cdcaa05862738e14768063168f0d505e93b2581a30c9bae91852c.py	Lasso	Lasso(alpha=0.1)	170	13	170	29	-3251977250350186310	Lasso(alpha=0.1).fit(X, y)	170	13	170	39	-4911615326820411885
/cb-target/python/57/aa/077fa35cdcaa05862738e14768063168f0d505e93b2581a30c9bae91852c.py	GraphLassoCV	GraphLassoCV(verbose=0, max_iter=500, alphas=20)	73	5	73	53	-5715664382311007025	gl.fit(X)	74	0	74	9	1117922852994432720
/cb-target/python/57/aa/077fa35cdcaa05862738e14768063168f0d505e93b2581a30c9bae91852c.py	GraphLasso	GraphLasso(verbose=1, max_iter=200)	147	5	147	40	-4518127838732747919	"gl.fit(df_x.loc[:, df_x.columns.str.startswith(""FMF_C"")].values.T)"	148	0	148	66	3827069191945959776
/cb-target/python/85/24/a26461164696e0f879da2dd5065b63abdebe71a37504c4d53bdb8da705e2.py	LinearRegression	LinearRegression()	97	6	97	24	1614862061330909019	alg.fit(train_predictors, train_target)	114	4	114	43	-5248265378331880567
/cb-target/python/69/a5/d601f2e25ee6521e0bb71a64e77c0bc994b2a6937c904d0ab138bdab9cb9.py	SVC	SVC(kernel='rbf', class_weight = 'balanced')	190	6	190	50	-7425893898877077359	svm.fit(x_train, y_train)	191	5	191	30	-1358364275149398195
/cb-target/python/69/a5/d601f2e25ee6521e0bb71a64e77c0bc994b2a6937c904d0ab138bdab9cb9.py	SVC	SVC(kernel='rbf', class_weight = 'balanced')	309	6	309	50	-1607570731269378412	svm.fit(x_train, y_train)	310	5	310	30	826653571816129857
/cb-target/python/69/a5/d601f2e25ee6521e0bb71a64e77c0bc994b2a6937c904d0ab138bdab9cb9.py	LogisticRegression	LogisticRegression()	146	22	146	42	3253306333413586885	unweighted_logistic.fit(x_train, y_train)	147	0	147	41	-755796370809330753
/cb-target/python/69/a5/d601f2e25ee6521e0bb71a64e77c0bc994b2a6937c904d0ab138bdab9cb9.py	LogisticRegression	LogisticRegression()	265	22	265	42	6303123857591973454	unweighted_logistic.fit(x_train, y_train)	266	0	266	41	4960098904300440215
/cb-target/python/69/a5/d601f2e25ee6521e0bb71a64e77c0bc994b2a6937c904d0ab138bdab9cb9.py	LogisticRegression	LogisticRegression(class_weight='balanced')	154	20	154	63	-8021428531699358863	weighted_logistic.fit(x_train, y_train)	155	0	155	39	2732647557160330535
/cb-target/python/69/a5/d601f2e25ee6521e0bb71a64e77c0bc994b2a6937c904d0ab138bdab9cb9.py	LogisticRegression	LogisticRegression(class_weight='balanced')	273	20	273	63	-5433650862941043692	weighted_logistic.fit(x_train, y_train)	274	0	274	39	-390590879239443868
/cb-target/python/69/a5/d601f2e25ee6521e0bb71a64e77c0bc994b2a6937c904d0ab138bdab9cb9.py	GridSearchCV	GridSearchCV(RandomForest(oob_score=True, max_features='auto'), param_grid=parameters, n_jobs=5, cv=5)	335	9	335	111	-4844859847293453196	cv_rfc.fit(x_train, y_train)	337	0	337	28	-5703678671360041649
/cb-target/python/69/a5/d601f2e25ee6521e0bb71a64e77c0bc994b2a6937c904d0ab138bdab9cb9.py	GridSearchCV	GridSearchCV(RandomForest(oob_score=True, max_features='auto'), param_grid=parameters, n_jobs=5, cv=5)	374	9	374	111	-3695983386448802480	cv_rfc.fit(x_train, y_train)	376	0	376	28	-4679291837602139723
/cb-target/python/69/a5/d601f2e25ee6521e0bb71a64e77c0bc994b2a6937c904d0ab138bdab9cb9.py	LDA	LDA()	161	6	161	11	1826731313750801243	lda.fit(x_train, y_train)	162	0	162	25	-3161046242245616674
/cb-target/python/69/a5/d601f2e25ee6521e0bb71a64e77c0bc994b2a6937c904d0ab138bdab9cb9.py	LDA	LDA()	280	6	280	11	1548836571210345632	lda.fit(x_train, y_train)	281	0	281	25	5395185733937569119
/cb-target/python/69/a5/d601f2e25ee6521e0bb71a64e77c0bc994b2a6937c904d0ab138bdab9cb9.py	DecisionTree	DecisionTree(max_depth=6)	175	7	175	32	-6220344408140667317	tree.fit(x_train, y_train)	176	0	176	26	-5639067099582680567
/cb-target/python/69/a5/d601f2e25ee6521e0bb71a64e77c0bc994b2a6937c904d0ab138bdab9cb9.py	DecisionTree	DecisionTree(max_depth=6)	294	7	294	32	6290327824155228420	tree.fit(x_train, y_train)	295	0	295	26	-7801751143696920829
/cb-target/python/69/a5/d601f2e25ee6521e0bb71a64e77c0bc994b2a6937c904d0ab138bdab9cb9.py	RandomForest	RandomForest(class_weight ='balanced',max_depth = depth, oob_score = True,\n                                        n_estimators =400, )	355	20	356	60	-8620598828112389402	clfForest.fit(x_validate_train, y_validate_train)	357	8	357	57	-7126521265749687670
/cb-target/python/69/a5/d601f2e25ee6521e0bb71a64e77c0bc994b2a6937c904d0ab138bdab9cb9.py	RandomForest	RandomForest(class_weight ='balanced',max_depth = 41,oob_score = True,n_estimators =400,\n                           max_features ='sqrt')	385	12	386	48	24838933903042747	clfForest.fit(x_train, y_train)	388	10	388	41	-7353021968256582071
/cb-target/python/69/a5/d601f2e25ee6521e0bb71a64e77c0bc994b2a6937c904d0ab138bdab9cb9.py	RandomForest	RandomForest(class_weight='balanced',oob_score= True)	182	5	182	58	834051823382876434	rf.fit(x_train, y_train)	183	0	183	24	7068863843378050172
/cb-target/python/69/a5/d601f2e25ee6521e0bb71a64e77c0bc994b2a6937c904d0ab138bdab9cb9.py	RandomForest	RandomForest(class_weight='balanced',oob_score= True)	301	5	301	58	2296814275776334773	rf.fit(x_train, y_train)	302	0	302	24	-3787718363288636053
/cb-target/python/69/a5/d601f2e25ee6521e0bb71a64e77c0bc994b2a6937c904d0ab138bdab9cb9.py	RandomForest	RandomForest(class_weight ='balanced',max_depth = 41, oob_score = True,n_estimators =400,\n                         criterion ='gini' , max_features ='sqrt')	422	12	423	66	8989234406286850652	clfForest.fit(x_train, y_train)	425	12	425	43	-8799570471531943852
/cb-target/python/69/a5/d601f2e25ee6521e0bb71a64e77c0bc994b2a6937c904d0ab138bdab9cb9.py	QDA	QDA()	168	6	168	11	1098151443940172671	qda.fit(x_train, y_train)	169	0	169	25	6542186196942487221
/cb-target/python/69/a5/d601f2e25ee6521e0bb71a64e77c0bc994b2a6937c904d0ab138bdab9cb9.py	QDA	QDA()	287	6	287	11	7758877718876087635	qda.fit(x_train, y_train)	288	0	288	25	9122309015312016763
/cb-target/python/dd/85/8ea83efbe8e57483487583fd36bfec10cfe3af68014ee59bf00680ab33e2.py	NMF	decomposition.NMF(n_components = n_topics)	93	6	93	48	5569813048793578522	decomposition.NMF(n_components = n_topics).fit(vectorized_new)	93	6	93	68	3446575057502015250
/cb-target/python/2e/94/a8190d26b1e502f67506c34776d6bf4c26b9351228eda7d4d82022b59051.py	KMeans	KMeans(n_clusters=k)	64	13	64	33	2048873789020905869	KMeans(n_clusters=k).fit(xcols)	64	13	64	44	376075907432656281
/cb-target/python/27/40/6314a9c2091ad062dbc74ee063eafc4908a42554f5e91862f0fe14e3a1b4.py	GridSearchCV	GridSearchCV(xgb.XGBClassifier(**ind_params),\n                            cv_params,\n                             scoring = 'accuracy', cv = 5, n_jobs = -1)	90	16	92	71	-4546897681071524863	optimized_GBM.fit(X_train, y_train)	97	0	97	35	4081755970710805341
/cb-target/python/0b/38/d6db8c61c96afd4a69719b8daac22d2990f251d06834f250fe6ff3012af5.py	RidgeCV	linear_model.RidgeCV(normalize=True)	167	5	167	41	-1804977332634977554	lm.fit(X, y)	168	8	168	20	7087630838015257301
/cb-target/python/da/45/030e3de02ed0075a715772c89f36833297e1655299afee0cfaced99b167d.py	RandomForestClassifier	RandomForestClassifier(n_estimators = 20)	241	8	241	49	846596341582306178	model.fit(X, y)	243	0	243	15	-6882811971555464845
/cb-target/python/da/45/030e3de02ed0075a715772c89f36833297e1655299afee0cfaced99b167d.py	RandomForestClassifier	RandomForestClassifier(n_estimators=50)	276	8	276	47	-7695870302118794739	model.fit(X, y)	299	0	299	15	4403473618459920685
/cb-target/python/da/45/030e3de02ed0075a715772c89f36833297e1655299afee0cfaced99b167d.py	RandomForestClassifier	RandomForestClassifier(n_estimators=50)	330	8	330	47	9010282581587556417	model.fit(X_train, y_train)	338	0	338	27	1185922957072549500
/cb-target/python/da/45/030e3de02ed0075a715772c89f36833297e1655299afee0cfaced99b167d.py	DecisionTreeClassifier	DecisionTreeClassifier()	207	8	207	32	-822082345308089047	model.fit(X, y)	215	0	215	15	-173061538654369542
/cb-target/python/da/45/030e3de02ed0075a715772c89f36833297e1655299afee0cfaced99b167d.py	DecisionTreeClassifier	DecisionTreeClassifier(\n                max_depth = 2,\n                min_samples_leaf = 5)	228	8	230	37	-3411594246033510336	model.fit(X, y)	232	0	232	15	1397725846589414548
/cb-target/python/29/68/12da538de2030d145b7ad1fb0ee36dfdf0e2dc47209d73ff02c458fcf8e0.py	CountVectorizer	CountVectorizer(max_features = 1000,\n                             ngram_range=(1, 2),\n                             stop_words='english',\n                             binary=True)	38	13	41	41	9011525567256677089	vectorizer.fit(titles)	44	0	44	22	8749863267933595030
/cb-target/python/29/68/12da538de2030d145b7ad1fb0ee36dfdf0e2dc47209d73ff02c458fcf8e0.py	CountVectorizer	CountVectorizer(max_features = 1000,\n                             ngram_range=(1, 2),\n                             stop_words='english',\n                             binary=True)	38	13	41	41	9011525567256677089	vectorizer.fit(titles)	57	0	57	22	-3891809070317877417
/cb-target/python/9c/9c/974bc69fc9242f2340d1dca7c1847a4eb4a7de161e5fba049c5836505588.py	CountVectorizer	CountVectorizer()	100	15	100	32	-145986823012811348	count_vector.fit(documents)	117	0	117	27	-944388427485142572
/cb-target/python/9c/9c/974bc69fc9242f2340d1dca7c1847a4eb4a7de161e5fba049c5836505588.py	MultinomialNB	MultinomialNB()	383	14	383	29	3207468873293332712	naive_bayes.fit(training_data, y_train)	384	0	384	39	8656835721965547142
/cb-target/python/a1/1e/5ddb60ee389d851d102d7a8493c1f7a3aa075cd57239d83cb3953aa24b80.py	LogisticRegression	LogisticRegression(C=100000, random_state=0)	50	5	50	49	-3547334146421519932	lr.fit(X, y)	51	0	51	12	-6780290965426603389
/cb-target/python/a1/1e/5ddb60ee389d851d102d7a8493c1f7a3aa075cd57239d83cb3953aa24b80.py	LogisticRegression	LogisticRegression(C=100000, random_state=0)	143	5	143	49	-163739248770424421	lr.fit(X, y)	144	0	144	12	4943392017967564139
/cb-target/python/a6/d3/721f05ae777dee2d5d8038814e4a50659855113e09e2eabecb6f17837c79.py	RandomForestRegressor	RandomForestRegressor(n_estimators=100,n_jobs=2,oob_score=True)	182	5	182	68	-64087520726727717	rf.fit(train[predictor], train[target])	183	0	183	39	-5352222767378977453
/cb-target/python/b1/42/5768dd7bed4d6cf99f34724578bfda981cad0d5ae416d40955d678831f0f.py	KMeans	KMeans(n_clusters=num_clusters, random_state = 42)	134	9	134	59	478013270826719035	km.fit(tfidf_matrix)	135	4	135	24	-897819457346707246
/cb-target/python/b1/42/5768dd7bed4d6cf99f34724578bfda981cad0d5ae416d40955d678831f0f.py	TruncatedSVD	TruncatedSVD(n_components=max_components)	230	6	230	47	-8925511402263918597	pca.fit(tfidf_matrix_train)	231	0	231	27	1835232215189600918
/cb-target/python/50/3f/cc60b0db6cb9982cfd336467b9e36b9bdb330cb898beb8b08396065d1a76.py	LinearRegression	LinearRegression()	30	6	30	24	-581672757073456342	clf.fit(X_train, y_train)	31	6	31	31	5925076477640733324
/cb-target/python/50/3f/cc60b0db6cb9982cfd336467b9e36b9bdb330cb898beb8b08396065d1a76.py	Ridge	linear_model.Ridge (alpha = .5)	73	7	73	38	-6186299030516758630	clf1.fit(X_train, y_train)	78	0	78	26	-3122343734659400152
/cb-target/python/50/3f/cc60b0db6cb9982cfd336467b9e36b9bdb330cb898beb8b08396065d1a76.py	Lasso	linear_model.Lasso(alpha = 0.1)	96	7	96	38	-3691270799755511607	clf2.fit(X_train, y_train)	97	0	97	26	-4567202265188325654
/cb-target/python/50/3f/cc60b0db6cb9982cfd336467b9e36b9bdb330cb898beb8b08396065d1a76.py	ElasticNet	ElasticNet(alpha=0.1, l1_ratio=0.7)	116	7	116	42	-1192565508741473346	enet.fit(X_train, y_train)	122	9	122	35	-363699975782512416
/cb-target/python/50/3f/cc60b0db6cb9982cfd336467b9e36b9bdb330cb898beb8b08396065d1a76.py	SGDClassifier	"SGDClassifier(loss=""hinge"", penalty=""l2"")"	185	7	185	48	-5289402168722488519	clf5.fit(X_train, y_train)	190	0	190	26	-622779987815178599
/cb-target/python/50/3f/cc60b0db6cb9982cfd336467b9e36b9bdb330cb898beb8b08396065d1a76.py	LassoLars	linear_model.LassoLars(alpha=.1)	137	7	137	39	9200347475038683846	clf3.fit(X_train, y_train)	142	0	142	26	7705614069974353448
/cb-target/python/50/3f/cc60b0db6cb9982cfd336467b9e36b9bdb330cb898beb8b08396065d1a76.py	BayesianRidge	linear_model.BayesianRidge()	161	7	161	35	5264412317973753230	clf4.fit(X_train, y_train)	162	0	162	26	8956215502585867026
/cb-target/python/be/43/4b15f06b69f3948a5d9b051fe94ba9f54583f92467768080c998897ef831.py	SVC	SVC()	87	6	87	11	8799328313086773811	svc.fit(X_train_sent, train.Sentiment)	90	0	90	38	-2957879146120127741
/cb-target/python/36/7a/04cda9dbcc03e6351456c192c0367c5631b9ea43ed70a894537864983314.py	LinearRegression	LinearRegression()	171	6	171	24	748138855132838755	lm1.fit(X_train, y_train)	172	0	172	25	-1533912617400437736
/cb-target/python/36/7a/04cda9dbcc03e6351456c192c0367c5631b9ea43ed70a894537864983314.py	GradientBoostingRegressor	GradientBoostingRegressor()	198	6	198	33	3636311360960454818	gb1.fit(X_train, y_train)	200	0	200	25	5962672069813061347
/cb-target/python/36/7a/04cda9dbcc03e6351456c192c0367c5631b9ea43ed70a894537864983314.py	GradientBoostingRegressor	GradientBoostingRegressor()	236	14	236	41	-2695384515577498737	gb_baseline.fit(X_train, y_train)	237	0	237	33	-7736138372813811007
/cb-target/python/36/7a/04cda9dbcc03e6351456c192c0367c5631b9ea43ed70a894537864983314.py	GradientBoostingRegressor	GradientBoostingRegressor(learning_rate=0.1,\n                                                      n_estimators=175,\n                                                      max_depth=6,\n                                                      min_samples_split=200,\n                                                      min_samples_leaf=30)	414	14	418	74	528039527832873046	gb_final_p5.fit(X_train, y_train)	423	0	423	33	-7621861196991918796
/cb-target/python/36/7a/04cda9dbcc03e6351456c192c0367c5631b9ea43ed70a894537864983314.py	RandomForestRegressor	RandomForestRegressor()	46	5	46	28	-1127783057217628279	rf.fit(X_train, y_train)	54	0	54	24	-2658638049319800251
/cb-target/python/36/7a/04cda9dbcc03e6351456c192c0367c5631b9ea43ed70a894537864983314.py	RandomForestRegressor	RandomForestRegressor()	112	16	112	39	-3755947277957607820	rf_cv.fit(x_train_cv, y_train_cv)	113	8	113	41	8077861857702857793
/cb-target/python/36/7a/04cda9dbcc03e6351456c192c0367c5631b9ea43ed70a894537864983314.py	RandomForestRegressor	RandomForestRegressor()	150	6	150	29	3557624805132743280	rf2.fit(X_train[top_features(rf_importances, 1)], y_train)	152	0	152	58	4587750267526905300
/cb-target/python/36/7a/04cda9dbcc03e6351456c192c0367c5631b9ea43ed70a894537864983314.py	GridSearchCV	GridSearchCV(GradientBoostingRegressor(min_samples_split=1000,\n                                                      min_samples_leaf=20),\n                           param_grid=param_test_1,\n                           cv=5)	247	15	250	32	-8825294662355161710	gsearch_1_gb.fit(X_train, y_train)	255	0	255	34	3562906602630709012
/cb-target/python/36/7a/04cda9dbcc03e6351456c192c0367c5631b9ea43ed70a894537864983314.py	GridSearchCV	GridSearchCV(GradientBoostingRegressor(learning_rate=0.1,\n                                                      n_estimators=175,\n                                                     max_depth=6,\n                                                     min_samples_split=200),\n                           param_grid=param_test_5,\n                           cv=3)	379	15	384	32	-6926786244131174937	gsearch_5_gb.fit(X_train, y_train)	385	0	385	34	466737187618216573
/cb-target/python/36/7a/04cda9dbcc03e6351456c192c0367c5631b9ea43ed70a894537864983314.py	GridSearchCV	GridSearchCV(GradientBoostingRegressor(min_samples_split=1000,\n                                                      min_samples_leaf=20),\n                           param_grid=param_test_3,\n                           cv=3)	320	15	323	32	2525284960838005203	gsearch_3_gb.fit(X_train, y_train)	325	0	325	34	3248270919462761270
/cb-target/python/36/7a/04cda9dbcc03e6351456c192c0367c5631b9ea43ed70a894537864983314.py	GridSearchCV	GridSearchCV(GradientBoostingRegressor(min_samples_split=1000,\n                                                      min_samples_leaf=20),\n                           param_grid=param_test_2,\n                           cv=3)	283	15	286	32	7932201424541528888	gsearch_2_gb.fit(X_train, y_train)	288	0	288	34	-1837248507259580495
/cb-target/python/36/7a/04cda9dbcc03e6351456c192c0367c5631b9ea43ed70a894537864983314.py	GridSearchCV	GridSearchCV(GradientBoostingRegressor(learning_rate=0.1,\n                                                      n_estimators=175),\n                           param_grid=param_test_4,\n                           cv=3)	343	15	346	32	8012967636586636672	gsearch_4_gb.fit(X_train, y_train)	347	0	347	34	-3200307721629177093
/cb-target/python/06/66/3e77bf3df0e41a22a72cdcae497f8e3df3e8b4fa52776f449851346ea230.py	PCA	PCA(n_components=2)	370	6	370	25	556989217173612574	pca.fit(scaled)	371	0	371	15	2350879128213587967
/cb-target/python/ce/f2/b12650bfee5fc1de940de65b3fd3c55f798c7bd6f1cc06dedaad2c0a0c00.py	KNeighborsClassifier	KNeighborsClassifier(n_neighbors = k)	243	10	243	47	-7979839512566009906	knn.fit(X_train, y_train)	244	4	244	29	5146720366048198137
/cb-target/python/ce/f2/b12650bfee5fc1de940de65b3fd3c55f798c7bd6f1cc06dedaad2c0a0c00.py	KNeighborsClassifier	KNeighborsClassifier(n_neighbors = 5)	157	6	157	43	-7289288054827383075	knn.fit(X_train, y_train)	162	0	162	25	-1185800887715839950
/cb-target/python/ce/f2/b12650bfee5fc1de940de65b3fd3c55f798c7bd6f1cc06dedaad2c0a0c00.py	KNeighborsClassifier	KNeighborsClassifier(n_neighbors = 5)	258	6	258	43	-4548775606519613039	knn.fit(Xn_train, yn_train)	266	8	266	35	152145718461346406
/cb-target/python/ce/f2/b12650bfee5fc1de940de65b3fd3c55f798c7bd6f1cc06dedaad2c0a0c00.py	KNeighborsClassifier	KNeighborsClassifier(n_neighbors = 5)	278	6	278	43	-6451624732588058010	knn.fit(Xs_train, ys_train)	285	4	285	31	5034566961751709492
/cb-target/python/ce/f2/b12650bfee5fc1de940de65b3fd3c55f798c7bd6f1cc06dedaad2c0a0c00.py	KNeighborsClassifier	KNeighborsClassifier(n_neighbors = 5, metric='euclidean')	296	8	296	65	5351684635032665281	knn_2.fit(X_train, y_train)	297	0	297	27	-1897467184421965703
/cb-target/python/73/b6/f2d76fa1212198673bc00f9fa0a5c4c2169e6c15f355841c4761d31789f0.py	GMM	GMM(n_components=2)	171	12	171	31	-3400929457475487233	GMM(n_components=2).fit(reduced_data)	171	12	171	49	-799810958994966512
/cb-target/python/73/b6/f2d76fa1212198673bc00f9fa0a5c4c2169e6c15f355841c4761d31789f0.py	PCA	PCA(n_components=2)	142	6	142	25	1161476775545107906	PCA(n_components=2).fit(good_data)	142	6	142	40	6468831658162232193
/cb-target/python/73/b6/f2d76fa1212198673bc00f9fa0a5c4c2169e6c15f355841c4761d31789f0.py	PCA	PCA(n_components=6)	123	6	123	25	-7191474653275546420	PCA(n_components=6).fit(good_data)	123	6	123	40	-6601732248177066958
/cb-target/python/73/b6/f2d76fa1212198673bc00f9fa0a5c4c2169e6c15f355841c4761d31789f0.py	DecisionTreeRegressor	DecisionTreeRegressor(random_state=0)	53	12	53	49	-5402097285189395070	regressor.fit(X_train,y_train)	54	0	54	30	3335318193340931139
/cb-target/python/a8/f5/5b53a27c4d412cb4117959d4ad96ae88e4e1472fdc600f9f22b2c0289bb6.py	LabelEncoder	preprocessing.LabelEncoder()	314	22	314	50	9132965445583871572	lbl.fit(list(dev_set[f])+list(val_set[f]))	315	16	315	58	2668394327281735938
/cb-target/python/a8/f5/5b53a27c4d412cb4117959d4ad96ae88e4e1472fdc600f9f22b2c0289bb6.py	LabelEncoder	preprocessing.LabelEncoder()	366	14	366	42	-7366782085461515758	lbl.fit(list(train_df[f])+list(test_df[f]))	367	8	367	51	755361661735763798
/cb-target/python/8b/1f/0678e0459112d83f0813a9bd42690f76be3990e805c4f88f90486b76a053.py	LogisticRegression	LogisticRegression()	213	5	213	25	-5283428122842537228	lr.fit(X_train, y_train)	214	8	214	32	8033291877468656346
/cb-target/python/8b/1f/0678e0459112d83f0813a9bd42690f76be3990e805c4f88f90486b76a053.py	LogisticRegression	LogisticRegression(penalty='l2')	231	6	231	38	5638001954451340984	lr2.fit(X_train, y_train)	232	7	232	32	5175412839277653575
/cb-target/python/8b/1f/0678e0459112d83f0813a9bd42690f76be3990e805c4f88f90486b76a053.py	LogisticRegression	LogisticRegression(penalty='l1', C=5)	220	6	220	43	-1960692925105905936	lr1.fit(X_train, y_train)	221	7	221	32	-6330455245627389065
/cb-target/python/8b/22/cffc524441a319192c82f7894eff9524422ec15ce633b3617719770e368e.py	LogisticRegression	LogisticRegression(random_state=5)	45	9	45	43	-8492539424790701416	logreg.fit(X_train, Y_train)	46	0	46	28	7842473095440159658
/cb-target/python/35/47/207ad23a2b42c041e21465006d5737255c79ea57114a0f69b794be1810b4.py	KNeighborsClassifier	neighbors.KNeighborsClassifier(n_neighbors=3)	212	6	212	51	874071639623970914	clf.fit(X, y)	213	0	213	13	-8045337842184083309
/cb-target/python/3a/c4/e2180dcfdefdbd3864c1a333585ce21337cd51d1a174c7a09e1e7ea65392.py	MeanShift	MeanShift(bw)	363	5	363	18	-9173184927449028027	ms.fit(sdata)	369	0	369	13	8333575970854514144
/cb-target/python/b5/9f/a2a1d07cd8403df931c3f2c7823b21fac906e942578175d85cdd2ed1e099.py	LogisticRegression	LogisticRegression()	43	9	43	29	-7891412383249544749	logreg.fit(X_train, y_train)	44	0	44	28	-5694884089312757762
/cb-target/python/98/c6/103930e13239d80fc87385c3904cbce6f33b6d5c372bb05264c28df33cd4.py	PCA	PCA()	126	6	126	11	-5557142291820845309	PCA().fit(good_data)	126	6	126	26	8117822417478169429
/cb-target/python/98/c6/103930e13239d80fc87385c3904cbce6f33b6d5c372bb05264c28df33cd4.py	PCA	PCA(2)	144	6	144	12	-517447971116416349	PCA(2).fit(good_data)	144	6	144	27	4337749186562225779
/cb-target/python/98/c6/103930e13239d80fc87385c3904cbce6f33b6d5c372bb05264c28df33cd4.py	DecisionTreeRegressor	DecisionTreeRegressor(random_state=0)	57	16	57	53	6558867065083011326	regressor.fit(X_train,y_train)	58	4	58	34	5338156930476739586
/cb-target/python/3d/26/e74be1265c99c850db226a6bce84a50d554ea77beb9949128128583a1904.py	LinearRegression	LinearRegression()	468	10	468	28	-7785287905765350684	lrmodel.fit(x_train, y_train)	481	0	481	29	1426621959842560639
/cb-target/python/3d/26/e74be1265c99c850db226a6bce84a50d554ea77beb9949128128583a1904.py	LinearRegression	LinearRegression()	468	10	468	28	-7785287905765350684	lrmodel.fit(x, y)	469	0	469	17	-1281371470572704192
/cb-target/python/3d/26/e74be1265c99c850db226a6bce84a50d554ea77beb9949128128583a1904.py	LinearRegression	LinearRegression()	546	12	546	30	-4207211784047771079	lrmodel16.fit(x16_train, y16_train)	558	0	558	35	6823063976902475375
/cb-target/python/3d/26/e74be1265c99c850db226a6bce84a50d554ea77beb9949128128583a1904.py	LinearRegression	LinearRegression()	546	12	546	30	-4207211784047771079	lrmodel16.fit(x16, y16)	547	0	547	23	665356813523985483
/cb-target/python/3d/26/e74be1265c99c850db226a6bce84a50d554ea77beb9949128128583a1904.py	Lasso	Lasso(alpha = 1)	417	9	417	25	3020048157325745876	lmodel.fit(x ,y)	418	0	418	16	-4015785340671170576
/cb-target/python/3d/26/e74be1265c99c850db226a6bce84a50d554ea77beb9949128128583a1904.py	Lasso	Lasso(alpha = 1)	417	9	417	25	3020048157325745876	lmodel.fit(x_train, y_train)	437	0	437	28	4597710362634921238
/cb-target/python/3d/26/e74be1265c99c850db226a6bce84a50d554ea77beb9949128128583a1904.py	Lasso	Lasso(alpha = 1)	518	11	518	27	-4835088925098279045	lmodel16.fit(x16, y16)	519	0	519	22	-6255200304313715976
/cb-target/python/3d/26/e74be1265c99c850db226a6bce84a50d554ea77beb9949128128583a1904.py	Lasso	Lasso(alpha = 1)	518	11	518	27	-4835088925098279045	lmodel16.fit(x16_train, y16_train)	536	0	536	34	-4560334576330241223
/cb-target/python/cd/de/dc8cb0725c3ae057f3d8cb0867a412e8cbfd31ea41cf282a36f56ba98641.py	LogisticRegression	linear_model.LogisticRegression(C=1e5)	207	6	207	44	-6722637897041657345	model.fit(df_train[feature_need], df_train[target])	209	0	209	51	-2486317484774132631
/cb-target/python/cd/de/dc8cb0725c3ae057f3d8cb0867a412e8cbfd31ea41cf282a36f56ba98641.py	LabelEncoder	preprocessing.LabelEncoder()	128	5	128	33	7214173224624838120	le.fit(l)	129	0	129	9	-8766658075232907926
/cb-target/python/cd/de/dc8cb0725c3ae057f3d8cb0867a412e8cbfd31ea41cf282a36f56ba98641.py	LabelEncoder	preprocessing.LabelEncoder()	128	5	128	33	7214173224624838120	le.fit(l)	140	0	140	9	7672670046473191057
/cb-target/python/cd/de/dc8cb0725c3ae057f3d8cb0867a412e8cbfd31ea41cf282a36f56ba98641.py	LabelEncoder	preprocessing.LabelEncoder()	128	5	128	33	7214173224624838120	le.fit(embarked)	144	0	144	16	-5102041735643677399
/cb-target/python/3b/64/d975509a3a95fa498279d731d64db60a8607f56e3dafe37a5813ee47d132.py	SVC	svm.SVC()	43	6	43	15	2476286348924547356	clf.fit(train[training_variables], y_train)	47	0	47	43	-8072861890782928814
/cb-target/python/01/44/8a9411bccbfe956831128a8f57b32a42546ec552b95592f68a09706bf696.py	LinearRegression	skl_lm.LinearRegression()	42	7	42	32	-390537491605409859	regr.fit(X_train, y_train)	54	4	54	30	7222525173994237083
/cb-target/python/18/3b/c363a443682d28f011c74b5b1a0a537d7e8ff8afacb88dd3ce758ef0f694.py	Pipeline	Pipeline((\n    ('vec', TfidfVectorizer(min_df=1, max_df=0.8, use_idf=True)),\n    ('clf', PassiveAggressiveClassifier(C=1)),\n))	299	11	302	2	-2531421286178375746	pipeline.fit(train_df['Phrase'], train_df['Sentiment'])	356	0	356	55	5016026165378201192
/cb-target/python/18/3b/c363a443682d28f011c74b5b1a0a537d7e8ff8afacb88dd3ce758ef0f694.py	Pipeline	Pipeline((\n    ('vec', TfidfVectorizer(min_df=1, max_df=0.8, use_idf=True)),\n    ('clf', PassiveAggressiveClassifier(C=1)),\n))	299	11	302	2	-2531421286178375746	pipeline.fit(X_train[:,2], y_train)	307	0	307	35	-4335871334770161546
/cb-target/python/18/3b/c363a443682d28f011c74b5b1a0a537d7e8ff8afacb88dd3ce758ef0f694.py	MultinomialNB	MultinomialNB()	97	13	97	28	792569058349527598	MultinomialNB().fit(X_train, y_train)	97	13	97	50	7575075267789692435
/cb-target/python/18/3b/c363a443682d28f011c74b5b1a0a537d7e8ff8afacb88dd3ce758ef0f694.py	MultinomialNB	MultinomialNB()	121	6	121	21	4398435864391994901	mnb.fit(X_train, y_train)	122	0	122	25	3683775933218127232
/cb-target/python/18/3b/c363a443682d28f011c74b5b1a0a537d7e8ff8afacb88dd3ce758ef0f694.py	MultinomialNB	MultinomialNB()	240	13	240	28	5155981801888217485	MultinomialNB().fit(X_train_mod, y_train)	240	13	240	54	3084964191081063902
/cb-target/python/18/3b/c363a443682d28f011c74b5b1a0a537d7e8ff8afacb88dd3ce758ef0f694.py	MultinomialNB	MultinomialNB(alpha=0.1)	81	6	81	30	4731303503412873284	clf.fit(X_train, y_train)	87	0	87	25	4009978676236698871
/cb-target/python/18/3b/c363a443682d28f011c74b5b1a0a537d7e8ff8afacb88dd3ce758ef0f694.py	MultinomialNB	MultinomialNB(alpha=0.1)	81	6	81	30	4731303503412873284	clf.fit(X_train_mod, y_train)	235	0	235	29	-4068587577868826830
/cb-target/python/18/3b/c363a443682d28f011c74b5b1a0a537d7e8ff8afacb88dd3ce758ef0f694.py	MultinomialNB	MultinomialNB(alpha=0.1)	255	6	255	30	8416783883621059019	clf.fit(X_predict_official2, train_df['Sentiment'])	266	0	266	51	6251139930136718342
/cb-target/python/af/bc/d87c8156bfeebfb7b4284f68b372fd1d7b2efde8b4df21bbc48a7c605d94.py	GradientBoostingClassifier	GradientBoostingClassifier(n_estimators=50, learning_rate=0.05,max_depth=5, random_state=0, loss='deviance')	90	7	90	115	724338140592438191	gbdt.fit(X_train_res_gbdt, Y_train_res_gbdt)	92	13	92	57	-1666286349157687407
/cb-target/python/af/bc/d87c8156bfeebfb7b4284f68b372fd1d7b2efde8b4df21bbc48a7c605d94.py	RandomForestClassifier	RandomForestClassifier(n_estimators=15, max_depth=6, random_state=0)	108	5	108	73	8283720288311969504	rf.fit(X_train_res_gbdt, Y_train_res_gbdt)	110	11	110	53	7945640991214117321
/cb-target/python/af/bc/d87c8156bfeebfb7b4284f68b372fd1d7b2efde8b4df21bbc48a7c605d94.py	LogisticRegression	LogisticRegression(penalty='l2',max_iter=100,tol=0.01,class_weight='balanced', random_state=2010)	64	9	64	106	1933582572181691616	logReg.fit(X_train_lr, Y_train_lr)	66	9	66	43	-2115545387934228808
/cb-target/python/d4/9c/44c9edd5072e33951ecfa877efb3ba7054a6fbc0915a119b767cd574d1a6.py	LogisticRegression	linear_model.LogisticRegression()	85	8	85	41	-5282654767875799540	logIt.fit(x_train, y_train)	86	0	86	27	5888837825700036086
/cb-target/python/d4/9c/44c9edd5072e33951ecfa877efb3ba7054a6fbc0915a119b767cd574d1a6.py	RFE	feature_selection.RFE(model, 5)	121	6	121	37	-4759040108531983079	rfe.fit(x_train, y_train)	122	6	122	31	8157194071673719246
/cb-target/python/f8/c8/59f98ba9d618b3eec058d222b9f1e9f858f8fba326b13af03c46e4352be0.py	SVC	SVC(kernel='rbf')	170	6	170	23	1869662131843812199	clf.fit(train_X,test_X)	171	0	171	23	8966262681250190994
/cb-target/python/f8/c8/59f98ba9d618b3eec058d222b9f1e9f858f8fba326b13af03c46e4352be0.py	SVC	SVC(kernel='linear')	177	7	177	27	957564050563542285	clf1.fit(train_X,test_X)	178	0	178	24	7832130719608095070
/cb-target/python/f8/c8/59f98ba9d618b3eec058d222b9f1e9f858f8fba326b13af03c46e4352be0.py	RandomForestClassifier	RandomForestClassifier(n_estimators = 100)	113	9	113	51	-6643894678249211506	forest.fit(train_X,test_X)	114	9	114	35	534584044668508384
/cb-target/python/f8/c8/59f98ba9d618b3eec058d222b9f1e9f858f8fba326b13af03c46e4352be0.py	RandomForestClassifier	RandomForestClassifier(n_estimators = 100)	156	9	156	51	2569203649728985360	forest.fit(train_X,test_X)	159	9	159	35	8729663433128090373
/cb-target/python/bb/f3/f79bbd80e4227bd482305ef6bb9197596183ce4fad45ad318199325e8f41.py	LinearRegression	linear_model.LinearRegression()	41	8	41	39	-9027084884734671655	model.fit(X_train, y_train)	89	0	89	27	5995307280175064720
/cb-target/python/bb/f3/f79bbd80e4227bd482305ef6bb9197596183ce4fad45ad318199325e8f41.py	LinearRegression	linear_model.LinearRegression()	41	8	41	39	-9027084884734671655	model.fit(X_train, y_train_bf)	143	0	143	30	-6435104820864066552
/cb-target/python/bb/f3/f79bbd80e4227bd482305ef6bb9197596183ce4fad45ad318199325e8f41.py	LinearRegression	linear_model.LinearRegression()	296	8	296	39	-4833425901706340409	model.fit(X_train, y_train)	344	0	344	27	-9199190523863984866
/cb-target/python/bb/f3/f79bbd80e4227bd482305ef6bb9197596183ce4fad45ad318199325e8f41.py	LinearRegression	linear_model.LinearRegression()	296	8	296	39	-4833425901706340409	model.fit(X_train, y_train)	389	0	389	27	7425763908857827725
/cb-target/python/bb/f3/f79bbd80e4227bd482305ef6bb9197596183ce4fad45ad318199325e8f41.py	LinearRegression	linear_model.LinearRegression()	296	8	296	39	-4833425901706340409	model.fit(X_train, y_train)	407	0	407	27	-777535870870673623
/cb-target/python/bb/f3/f79bbd80e4227bd482305ef6bb9197596183ce4fad45ad318199325e8f41.py	LinearRegression	linear_model.LinearRegression()	296	8	296	39	-4833425901706340409	model.fit(X_train, y_train)	476	0	476	27	-8635783665947177290
/cb-target/python/d9/0e/f86f1d3588eb8848537d2a30c35bdf1effccf5dc6a5d62558a82ddfe0302.py	SVC	SVC(C=100000, kernel='linear', random_state=241)	25	9	25	57	6131999952081309905	SVC(C=100000, kernel='linear', random_state=241).fit(X, y)	25	9	25	67	653838757611181274
/cb-target/python/d9/0e/f86f1d3588eb8848537d2a30c35bdf1effccf5dc6a5d62558a82ddfe0302.py	GridSearchCV	GridSearchCV(method, grid, scoring='accuracy', cv=cv)	79	5	79	58	-5658139947976136775	gs.fit(X, y)	80	0	80	12	-164553217777024628
/cb-target/python/c1/1e/a00af49a046597e162369fbd3b8cc856e1afcada9854a230d6fb79913202.py	KNeighborsClassifier	KNeighborsClassifier(n_neighbors= b_param['n_neighbors'], weights=b_param['weights'], algorithm= b_param['algorithm'])	233	9	233	127	-8881211219301021892	knn_best.fit(def_u_train_X,def_u_train_Y)	234	0	234	41	5498382099003699392
/cb-target/python/c1/1e/a00af49a046597e162369fbd3b8cc856e1afcada9854a230d6fb79913202.py	KNeighborsClassifier	KNeighborsClassifier(n_neighbors= b_param['n_neighbors'], weights=b_param['weights'], algorithm= b_param['algorithm'])	243	9	243	127	-3183744750981656221	knn_best.fit(def_f_u_train_X,def_f_u_train_Y)	244	0	244	45	-1601863265050919271
/cb-target/python/c1/1e/a00af49a046597e162369fbd3b8cc856e1afcada9854a230d6fb79913202.py	KNeighborsClassifier	KNeighborsClassifier(n_neighbors= b_param['n_neighbors'], weights=b_param['weights'], algorithm= b_param['algorithm'])	253	9	253	127	3481394924677243590	knn_best.fit(def_n_train_X,def_n_train_Y)	254	0	254	41	7094723231004368656
/cb-target/python/c1/1e/a00af49a046597e162369fbd3b8cc856e1afcada9854a230d6fb79913202.py	KNeighborsClassifier	KNeighborsClassifier(n_neighbors= b_param['n_neighbors'], weights=b_param['weights'], algorithm= b_param['algorithm'])	263	9	263	127	8825451833763547924	knn_best.fit(def_f_n_train_X,def_f_n_train_Y)	264	0	264	45	-5259774693791239179
/cb-target/python/c1/1e/a00af49a046597e162369fbd3b8cc856e1afcada9854a230d6fb79913202.py	LogisticRegression	LogisticRegression(warm_start=b_param['warm_start'], C= b_param['C'], max_iter= b_param['max_iter'], solver= b_param['solver'])	353	11	353	138	-923383601363796115	logit_best.fit(def_u_train_X,def_u_train_Y)	354	0	354	43	-2538934240092147166
/cb-target/python/c1/1e/a00af49a046597e162369fbd3b8cc856e1afcada9854a230d6fb79913202.py	LogisticRegression	LogisticRegression(warm_start=b_param['warm_start'], C= b_param['C'], max_iter= b_param['max_iter'], solver= b_param['solver'])	363	11	363	138	8484442901980185618	logit_best.fit(def_f_u_train_X,def_f_u_train_Y)	364	0	364	47	1505725364557795802
/cb-target/python/c1/1e/a00af49a046597e162369fbd3b8cc856e1afcada9854a230d6fb79913202.py	LogisticRegression	LogisticRegression(warm_start=b_param['warm_start'], C= b_param['C'], max_iter= b_param['max_iter'], solver= b_param['solver'])	373	11	373	138	6086217249160682642	logit_best.fit(def_n_train_X,def_n_train_Y)	374	0	374	43	7906777310046470491
/cb-target/python/c1/1e/a00af49a046597e162369fbd3b8cc856e1afcada9854a230d6fb79913202.py	LogisticRegression	LogisticRegression(warm_start=b_param['warm_start'], C= b_param['C'], max_iter= b_param['max_iter'], solver= b_param['solver'])	383	11	383	138	-6234323017660736895	logit_best.fit(def_f_n_train_X,def_f_n_train_Y)	384	0	384	47	5509627815931211870
/cb-target/python/c1/1e/a00af49a046597e162369fbd3b8cc856e1afcada9854a230d6fb79913202.py	DecisionTreeClassifier	DecisionTreeClassifier(criterion = b_param['criterion'],max_depth=b_param['max_depth'])	153	9	153	96	7692294634005304754	ID3_best.fit(def_u_train_X,def_u_train_Y)	154	0	154	41	-1636827506776742253
/cb-target/python/c1/1e/a00af49a046597e162369fbd3b8cc856e1afcada9854a230d6fb79913202.py	DecisionTreeClassifier	DecisionTreeClassifier(criterion = b_param['criterion'],max_depth=b_param['max_depth'])	163	9	163	96	602400943831500692	ID3_best.fit(def_f_u_train_X,def_f_u_train_Y)	164	0	164	45	-7595898962073927125
/cb-target/python/c1/1e/a00af49a046597e162369fbd3b8cc856e1afcada9854a230d6fb79913202.py	DecisionTreeClassifier	DecisionTreeClassifier(criterion = b_param['criterion'],max_depth=b_param['max_depth'])	173	9	173	96	-4601563550434069199	ID3_best.fit(def_n_train_X,def_n_train_Y)	174	0	174	41	-2227086188381976866
/cb-target/python/c1/1e/a00af49a046597e162369fbd3b8cc856e1afcada9854a230d6fb79913202.py	DecisionTreeClassifier	DecisionTreeClassifier(criterion = b_param['criterion'],max_depth=b_param['max_depth'])	183	9	183	96	-6282832370262355654	ID3_best.fit(def_f_n_train_X,def_f_n_train_Y)	184	0	184	45	7840451184923648083
/cb-target/python/c1/1e/a00af49a046597e162369fbd3b8cc856e1afcada9854a230d6fb79913202.py	BaggingClassifier	BaggingClassifier(ID3_best,max_features= b_param['max_features'], max_samples= b_param['max_samples'], n_estimators= b_param['n_estimators'], bootstrap_features= b_param['bootstrap_features'])	313	9	313	201	-5523347101297891922	bag_best.fit(def_u_train_X,def_u_train_Y)	314	0	314	41	-2541140786624054021
/cb-target/python/c1/1e/a00af49a046597e162369fbd3b8cc856e1afcada9854a230d6fb79913202.py	BaggingClassifier	BaggingClassifier(ID3_best,max_features= b_param['max_features'], max_samples= b_param['max_samples'], n_estimators= b_param['n_estimators'], bootstrap_features= b_param['bootstrap_features'])	323	9	323	201	-5619200159919094998	bag_best.fit(def_f_u_train_X,def_f_u_train_Y)	324	0	324	45	-4392799196890077908
/cb-target/python/c1/1e/a00af49a046597e162369fbd3b8cc856e1afcada9854a230d6fb79913202.py	BaggingClassifier	BaggingClassifier(ID3_best,max_features= b_param['max_features'], max_samples= b_param['max_samples'], n_estimators= b_param['n_estimators'], bootstrap_features= b_param['bootstrap_features'])	333	9	333	201	-2174064632405917172	bag_best.fit(def_n_train_X,def_n_train_Y)	334	0	334	41	5475539203963949403
/cb-target/python/c1/1e/a00af49a046597e162369fbd3b8cc856e1afcada9854a230d6fb79913202.py	BaggingClassifier	BaggingClassifier(ID3_best,max_features= b_param['max_features'], max_samples= b_param['max_samples'], n_estimators= b_param['n_estimators'], bootstrap_features= b_param['bootstrap_features'])	343	9	343	201	-7861680960269741761	bag_best.fit(def_f_n_train_X,def_f_n_train_Y)	344	0	344	45	-2758765072724809031
/cb-target/python/c1/1e/a00af49a046597e162369fbd3b8cc856e1afcada9854a230d6fb79913202.py	AdaBoostClassifier	AdaBoostClassifier(ID3_best, n_estimators= b_param['n_estimators'], learning_rate=b_param['learning_rate'])	273	9	273	116	4529541539333855608	ada_best.fit(def_u_train_X,def_u_train_Y)	274	0	274	41	4262232497154539950
/cb-target/python/c1/1e/a00af49a046597e162369fbd3b8cc856e1afcada9854a230d6fb79913202.py	AdaBoostClassifier	AdaBoostClassifier(ID3_best, n_estimators= b_param['n_estimators'], learning_rate=b_param['learning_rate'])	283	9	283	116	8043508999051740138	ada_best.fit(def_f_u_train_X,def_f_u_train_Y)	284	0	284	45	7142388762256649573
/cb-target/python/c1/1e/a00af49a046597e162369fbd3b8cc856e1afcada9854a230d6fb79913202.py	AdaBoostClassifier	AdaBoostClassifier(ID3_best, n_estimators= b_param['n_estimators'], learning_rate=b_param['learning_rate'])	293	9	293	116	-2718385223216990071	ada_best.fit(def_n_train_X,def_n_train_Y)	294	0	294	41	600291516656405533
/cb-target/python/c1/1e/a00af49a046597e162369fbd3b8cc856e1afcada9854a230d6fb79913202.py	AdaBoostClassifier	AdaBoostClassifier(ID3_best, n_estimators= b_param['n_estimators'], learning_rate=b_param['learning_rate'])	303	9	303	116	-4552132342932789764	ada_best.fit(def_f_n_train_X,def_f_n_train_Y)	304	0	304	45	2197888185144462768
/cb-target/python/c1/1e/a00af49a046597e162369fbd3b8cc856e1afcada9854a230d6fb79913202.py	LinearSVC	svm.LinearSVC(penalty= b_param['penalty'], loss= b_param['loss'], dual= b_param['dual'])	193	9	193	97	-3305614724930026434	SVM_best.fit(def_u_train_X,def_u_train_Y)	194	0	194	41	-3977993174352993355
/cb-target/python/c1/1e/a00af49a046597e162369fbd3b8cc856e1afcada9854a230d6fb79913202.py	LinearSVC	svm.LinearSVC(penalty= b_param['penalty'], loss= b_param['loss'], dual= b_param['dual'])	203	9	203	97	-279739252441103100	SVM_best.fit(def_f_u_train_X,def_f_u_train_Y)	204	0	204	45	3133536627577194855
/cb-target/python/c1/1e/a00af49a046597e162369fbd3b8cc856e1afcada9854a230d6fb79913202.py	LinearSVC	svm.LinearSVC(penalty= b_param['penalty'], loss= b_param['loss'], dual= b_param['dual'])	213	9	213	97	5471328472533531629	SVM_best.fit(def_n_train_X,def_n_train_Y)	214	0	214	41	-3032921293870996216
/cb-target/python/c1/1e/a00af49a046597e162369fbd3b8cc856e1afcada9854a230d6fb79913202.py	LinearSVC	svm.LinearSVC(penalty= b_param['penalty'], loss= b_param['loss'], dual= b_param['dual'])	223	9	223	97	-8945719631531475588	SVM_best.fit(def_f_n_train_X,def_f_n_train_Y)	224	0	224	45	6320603467459943380
/cb-target/python/c1/1e/a00af49a046597e162369fbd3b8cc856e1afcada9854a230d6fb79913202.py	RFECV	RFECV(estimator, 5,cv=5)	56	11	56	35	-7820783882726895285	selector.fit(def_n_train_X, def_n_train_Y)	57	11	57	53	-5644070161811989443
/cb-target/python/c1/1e/a00af49a046597e162369fbd3b8cc856e1afcada9854a230d6fb79913202.py	RFECV	RFECV(estimator, 5,cv=5)	88	11	88	35	2291703171545923047	selector.fit(def_u_train_X, def_u_train_Y)	89	11	89	53	-7102572561657676905
/cb-target/python/b9/86/b58ca449b4a152f54697a835114e1cc3d4d74cefbdfd5acb40ebd21baea9.py	LinearRegression	LinearRegression()	16	8	16	26	-8799382167364028173	model.fit(bmi_life_data[['BMI']], bmi_life_data[['Life expectancy']])	22	0	22	69	690882771335869118
/cb-target/python/b9/86/b58ca449b4a152f54697a835114e1cc3d4d74cefbdfd5acb40ebd21baea9.py	LinearRegression	LinearRegression()	49	14	49	32	4451300111763620201	house_model.fit(x, y)	50	0	50	21	6745459939958857612
/cb-target/python/b7/46/24c7d684b790554a77cb26e31bdf0c7b5da682f5013f7fdf48419581b2a0.py	GridSearchCV	GridSearchCV(knn, params_grid2, cv=10, scoring='roc_auc', n_jobs=-1)	76	7	76	75	-3109229751604027469	grid.fit(X_train, y_train)	77	0	77	26	-3478763005169032610
/cb-target/python/53/2c/2dca2e374d0991fd698e211fe635ba8a8751d177fc062917f4acd0e5a2be.py	GaussianNB	GaussianNB()	268	5	268	17	-8744418964950061986	GNB.fit(tr[cols],tr['crrt'])	269	0	269	28	8235537441106588597
/cb-target/python/53/2c/2dca2e374d0991fd698e211fe635ba8a8751d177fc062917f4acd0e5a2be.py	RandomForestClassifier	RandomForestClassifier(n_estimators=100)	233	4	233	44	-4180082790774747235	rfx.fit(tr[cols],tr['crrt'])	234	0	234	28	-6192193169321389116
/cb-target/python/53/2c/2dca2e374d0991fd698e211fe635ba8a8751d177fc062917f4acd0e5a2be.py	RandomForestClassifier	RandomForestClassifier(n_estimators=100)	468	4	468	44	1973809489085018920	rfx.fit(tr[cols5x],tr['crrt'])	469	0	469	30	-5987189563902003326
/cb-target/python/53/2c/2dca2e374d0991fd698e211fe635ba8a8751d177fc062917f4acd0e5a2be.py	RandomForestClassifier	RandomForestClassifier(n_estimators=100)	503	4	503	44	-515366148689723794	rfx.fit(tr[cols4x],tr['crrt'])	504	0	504	30	-5291809484890834691
/cb-target/python/53/2c/2dca2e374d0991fd698e211fe635ba8a8751d177fc062917f4acd0e5a2be.py	RandomForestClassifier	RandomForestClassifier(n_estimators=100)	537	4	537	44	-7044960908631295876	rfx.fit(tr[cols3x],tr['crrt'])	538	0	538	30	653891528551797871
/cb-target/python/53/2c/2dca2e374d0991fd698e211fe635ba8a8751d177fc062917f4acd0e5a2be.py	RandomForestClassifier	RandomForestClassifier(n_estimators=100)	572	4	572	44	4729345757566871889	rfx.fit(tr[cols2x],tr['crrt'])	573	0	573	30	-7552922845945629211
/cb-target/python/53/2c/2dca2e374d0991fd698e211fe635ba8a8751d177fc062917f4acd0e5a2be.py	RandomForestClassifier	RandomForestClassifier(n_estimators=i)	219	8	219	46	-1115918259942365607	rfx.fit(tr[cols],tr['crrt'])	220	4	220	32	-6749398817741408529
/cb-target/python/53/2c/2dca2e374d0991fd698e211fe635ba8a8751d177fc062917f4acd0e5a2be.py	LogisticRegression	LogisticRegression()	249	5	249	25	-1989309084158740766	LR.fit(tr[cols],tr['crrt'])	250	0	250	27	4186841153545394759
/cb-target/python/53/2c/2dca2e374d0991fd698e211fe635ba8a8751d177fc062917f4acd0e5a2be.py	LogisticRegression	LogisticRegression()	588	5	588	25	-7785135197627704890	LR.fit(tr[cols2x],tr['crrt'])	589	0	589	29	5798754587250105461
/cb-target/python/53/2c/2dca2e374d0991fd698e211fe635ba8a8751d177fc062917f4acd0e5a2be.py	DBSCAN	DBSCAN()	397	4	397	12	3469916856266855142	dbs.fit(df[cols1])	398	0	398	18	-9185729401519662332
/cb-target/python/53/2c/2dca2e374d0991fd698e211fe635ba8a8751d177fc062917f4acd0e5a2be.py	KMeans	KMeans(n_clusters=5)	311	3	311	23	2073652394886249750	km.fit(df[cols])	312	0	312	16	-6355772922738131589
/cb-target/python/53/2c/2dca2e374d0991fd698e211fe635ba8a8751d177fc062917f4acd0e5a2be.py	LinearSVC	LinearSVC()	286	6	286	17	2008676870646793213	svm.fit(tr[cols],tr['crrt'])	287	12	287	40	3541715165307204135
/cb-target/python/7c/8a/48373b57e822768609f5f806b2b4e60edcd74bf47c958b28a0a61432afb4.py	DecisionTreeClassifier	DecisionTreeClassifier(max_depth=3, random_state=1)	89	11	89	62	-5443905700845693725	tree_clf.fit(X, y)	90	0	90	18	-6555092312617401760
/cb-target/python/96/8b/bdca1f7781a72b3a5d21961befd79825c4587ead907c1cc2d29f713b9344.py	LinearDiscriminantAnalysis	LinearDiscriminantAnalysis(solver='lsqr', shrinkage='auto')	90	7	90	66	-8789960063141863142	LinearDiscriminantAnalysis(solver='lsqr', shrinkage='auto').fit(X.values, y.values)	90	7	90	90	-3729615045159328845
/cb-target/python/96/8b/bdca1f7781a72b3a5d21961befd79825c4587ead907c1cc2d29f713b9344.py	LinearDiscriminantAnalysis	LinearDiscriminantAnalysis(solver='lsqr', shrinkage=None)	91	7	91	64	8092344941590912323	LinearDiscriminantAnalysis(solver='lsqr', shrinkage=None).fit(X.values, y.values)	91	7	91	88	7704271897518014400
/cb-target/python/b4/9a/d720aaa6845cf31be7778d641016e8d53743c2324690a0b30be0f1cf8839.py	LinearRegression	LinearRegression()	176	6	176	24	-6508974371566549307	slr.fit(X, y)	177	0	177	13	-4331827866735540908
/cb-target/python/b4/9a/d720aaa6845cf31be7778d641016e8d53743c2324690a0b30be0f1cf8839.py	LinearRegression	LinearRegression()	199	6	199	24	-7625230751789023261	slr.fit(X_train, y_train)	201	0	201	25	4757195146155001572
/cb-target/python/b4/9a/d720aaa6845cf31be7778d641016e8d53743c2324690a0b30be0f1cf8839.py	LinearRegression	LinearRegression()	345	12	345	30	-6874475046879687444	regressor.fit(X_train, y_train)	346	0	346	31	5496000223901402602
/cb-target/python/b4/9a/d720aaa6845cf31be7778d641016e8d53743c2324690a0b30be0f1cf8839.py	Ridge	Ridge(alpha=1.0)	241	8	241	24	-4279812981287894192	ridge.fit(X_train, y_train)	242	0	242	27	6563362540479504603
/cb-target/python/b4/9a/d720aaa6845cf31be7778d641016e8d53743c2324690a0b30be0f1cf8839.py	RandomForestRegressor	RandomForestRegressor(n_estimators=1000,\n                               criterion='mse',\n                               random_state=1,\n                               n_jobs=-1)	280	9	283	41	-3260179875970310366	forest.fit(X_train, y_train)	284	0	284	28	1529235680162722858
/cb-target/python/b4/9a/d720aaa6845cf31be7778d641016e8d53743c2324690a0b30be0f1cf8839.py	Lasso	Lasso(alpha=0.1)	221	8	221	24	-6701491370298447771	lasso.fit(X_train, y_train)	222	0	222	27	6039308413817740300
/cb-target/python/b4/9a/d720aaa6845cf31be7778d641016e8d53743c2324690a0b30be0f1cf8839.py	DecisionTreeRegressor	DecisionTreeRegressor(max_depth=3)	262	7	262	41	-7050645463739633204	tree.fit(X_train, y_train)	263	0	263	26	2219873901249646844
/cb-target/python/b4/9a/d720aaa6845cf31be7778d641016e8d53743c2324690a0b30be0f1cf8839.py	StandardScaler	StandardScaler()	447	10	447	26	-6073603773801246372	StandardScaler().fit(X_train)	447	10	447	39	2922162344436240664
/cb-target/python/b4/9a/d720aaa6845cf31be7778d641016e8d53743c2324690a0b30be0f1cf8839.py	StandardScaler	StandardScaler()	448	10	448	26	238652895183444605	StandardScaler().fit(y_train)	448	10	448	39	3720774295291551168
/cb-target/python/b4/9a/d720aaa6845cf31be7778d641016e8d53743c2324690a0b30be0f1cf8839.py	ElasticNet	ElasticNet(alpha=1.0, l1_ratio=0.5)	251	5	251	40	-1790894512398656653	en.fit(X_train, y_train)	252	0	252	24	8788708771316105354
/cb-target/python/af/82/959ce0dd57d04d152ad9a9c77509f50d35e99f0cd9f3125fc9db4c18b4fd.py	LinearRegression	LinearRegression()	78	5	78	23	1409132302737108817	lm.fit(df[['day_hour','weekday','Is_Traffic_Related']], df.uber_estimate)	79	0	79	73	5522495456982740419
/cb-target/python/af/82/959ce0dd57d04d152ad9a9c77509f50d35e99f0cd9f3125fc9db4c18b4fd.py	LinearRegression	LinearRegression()	175	5	175	23	7754014305054328427	lm.fit(df1[['day_hour','Is_weekend','Is_Traffic_Related','Neighbourhood_code']], df1.uber_estimate)	176	0	176	99	-3725606594459307791
/cb-target/python/b9/2c/55081c3308e31136622ac6ed21d498085c65aaece9392a73a28d545240f1.py	KNeighborsClassifier	KNeighborsClassifier(n_neighbors=1)	91	6	91	41	-1105594127668801150	knn.fit(train1,target1)	96	0	96	23	-9040954798747619417
/cb-target/python/cd/9b/f0747284b68ea837955dd54a0bedf0368c675f0f5b2d592c02b01badd78a.py	KNeighborsClassifier	KNeighborsClassifier()	45	6	45	28	4343959254893217233	knn.fit(X, np.random.randint(2, size=24323))	46	0	46	44	8167060446399314484
/cb-target/python/cd/9b/f0747284b68ea837955dd54a0bedf0368c675f0f5b2d592c02b01badd78a.py	PCA	PCA()	162	6	162	11	-8674747510460486874	PCA().fit(X.iloc[:,0:11].corr())	162	6	162	38	1444510785785888150
/cb-target/python/cd/9b/f0747284b68ea837955dd54a0bedf0368c675f0f5b2d592c02b01badd78a.py	KMeans	cluster.KMeans(n_clusters=10)	61	9	61	38	8290821135830578343	kmeans.fit(X.iloc[:,0:11])	62	0	62	26	6451708054659756963
/cb-target/python/6f/6e/42ef78e7ba51b696f401d4dccecd9d31f08edb90aa66377f93470b7967ab.py	KMeans	cluster.KMeans(n_clusters=3)	379	9	379	37	3986042603074428349	cluster.KMeans(n_clusters=3).fit(df)	379	9	379	45	972458649945175245
/cb-target/python/6f/6e/42ef78e7ba51b696f401d4dccecd9d31f08edb90aa66377f93470b7967ab.py	KMeans	cluster.KMeans(n_clusters=10)	144	9	144	38	3216328830534090020	cluster.KMeans(n_clusters=10).fit(X)	144	9	144	45	5239964079347862392
/cb-target/python/6f/6e/42ef78e7ba51b696f401d4dccecd9d31f08edb90aa66377f93470b7967ab.py	KMeans	cluster.KMeans(n_clusters=k)	561	13	561	41	3773691355224864616	cluster.KMeans(n_clusters=k).fit(a1)	561	13	561	49	-6025778912251451985
/cb-target/python/6f/6e/42ef78e7ba51b696f401d4dccecd9d31f08edb90aa66377f93470b7967ab.py	KMeans	cluster.KMeans(n_clusters=2)	498	9	498	37	7820921561989849323	cluster.KMeans(n_clusters=2).fit(a1)	498	9	498	45	-5990725402095087948
/cb-target/python/6f/6e/42ef78e7ba51b696f401d4dccecd9d31f08edb90aa66377f93470b7967ab.py	KMeans	cluster.KMeans(n_clusters=2)	548	9	548	37	5267866985186849119	cluster.KMeans(n_clusters=2).fit(a1)	548	9	548	45	5227935767822413858
/cb-target/python/6f/6e/42ef78e7ba51b696f401d4dccecd9d31f08edb90aa66377f93470b7967ab.py	GaussianMixture	mixture.GaussianMixture(n_components=3, covariance_type='full',max_iter =1000)	905	6	905	84	-7731745641416932758	clf.fit(df)	906	0	906	11	4566779439280252980
/cb-target/python/5c/e0/956d09bf1e5795efcf0ce35aa680643620092d4ee72989423598df8b2598.py	RandomForestClassifier	RandomForestClassifier(n_estimators = 100)	158	7	158	49	700449486830753047	"forest.fit(train_data_features,train[""sentiment""].values)"	202	0	202	57	-2954862212103425369
/cb-target/python/5c/e0/956d09bf1e5795efcf0ce35aa680643620092d4ee72989423598df8b2598.py	LogisticRegression	LogisticRegression(random_state=0)	182	3	182	37	-2868962455428402060	"lr.fit(train_data_features,train[""sentiment""].values)"	203	0	203	53	-5442520274461373702
/cb-target/python/4b/a8/e60d84179dae6f916b594e1eb8c4c3c59dde479e13147827c3b26298e8e9.py	GridSearchCV	GridSearchCV(forest,\n                           param_grid=parameter_grid,\n                           cv=cross_validation)	342	14	344	47	-4303262324597723427	grid_search.fit(train_new, targets)	346	0	346	35	-4840797897492752655
/cb-target/python/4b/a8/e60d84179dae6f916b594e1eb8c4c3c59dde479e13147827c3b26298e8e9.py	ExtraTreesClassifier	ExtraTreesClassifier(n_estimators=200)	317	6	317	44	665957582045116322	clf.fit(train, targets)	318	6	318	29	4786308117096626081
/cb-target/python/68/55/064bbf681fecd0cb931da94e921ac02834067d01c14a26efc33283d8785f.py	RandomForestRegressor	ensemble.RandomForestRegressor()	174	10	174	42	-6213646058635777899	randFor.fit(X_fit, Y_fit)	175	0	175	25	6390733303707894739
/cb-target/python/68/55/064bbf681fecd0cb931da94e921ac02834067d01c14a26efc33283d8785f.py	Lasso	linear_model.Lasso()	101	13	101	33	-969628153815730590	modelLasso.fit(X_fit, Y_fit)	102	0	102	28	-3042548206591708178
/cb-target/python/68/55/064bbf681fecd0cb931da94e921ac02834067d01c14a26efc33283d8785f.py	Pipeline	pipeline.Pipeline(steps = [\n    ('feature_processing', pipeline.FeatureUnion(transformer_list = [\n            #binary\n            ('binary_variables_processing', preprocessing.FunctionTransformer(lambda data: data[:, binary_data_indices])),\n\n            #numeric\n            ('numeric_variables_processing', pipeline.Pipeline(steps = [\n                ('selecting', preprocessing.FunctionTransformer(lambda data: data[:, numeric_data_indices])),\n                ('scaling', preprocessing.StandardScaler())\n                        ])),\n\n        ])),\n    ('model_fitting', model)\n    ]\n)	137	12	151	1	-5384662885400116269	estimator.fit(train_data, train_labels)	154	0	154	39	-8826999376974465179
/cb-target/python/68/55/064bbf681fecd0cb931da94e921ac02834067d01c14a26efc33283d8785f.py	StandardScaler	preprocessing.StandardScaler()	84	9	84	39	3080389386611095519	scaler.fit(X)	85	0	85	13	-6008399048705291711
/cb-target/python/68/55/064bbf681fecd0cb931da94e921ac02834067d01c14a26efc33283d8785f.py	SGDRegressor	linear_model.SGDRegressor()	95	11	95	38	6113172183192083550	modelSGD.fit(X_fit, Y_fit)	96	0	96	26	3881194060129349564
/cb-target/python/73/b7/9404838cf973b0c29c682c232103704f5e00a4aff83983d14e0060b33e36.py	Ridge	Ridge(alpha=1.0)	299	6	299	22	-6876211198376897397	Ridge(alpha=1.0).fit(X_sub, y_train)	299	6	299	42	1315437770087016944
/cb-target/python/73/b7/9404838cf973b0c29c682c232103704f5e00a4aff83983d14e0060b33e36.py	GridSearchCV	GridSearchCV(estimator = ElasticNet(),\n                       param_grid=param_grid,\n                       scoring=model_scorer,\n                       n_jobs=1,\n                       cv=GrowingWindow(10),\n                       verbose=1)	233	10	238	33	-7003978709811884245	GridSearchCV(estimator = ElasticNet(),\n                       param_grid=param_grid,\n                       scoring=model_scorer,\n                       n_jobs=1,\n                       cv=GrowingWindow(10),\n                       verbose=1).fit(X_train, y_train)	233	10	238	55	4306168655004538489
/cb-target/python/73/b7/9404838cf973b0c29c682c232103704f5e00a4aff83983d14e0060b33e36.py	GridSearchCV	GridSearchCV(estimator = Ridge(),\n                       param_grid=param_grid,\n                       scoring=model_scorer,\n                       n_jobs=1,\n                       cv=GrowingWindow(10),\n                       verbose=1)	209	11	214	33	9096921233817163506	GridSearchCV(estimator = Ridge(),\n                       param_grid=param_grid,\n                       scoring=model_scorer,\n                       n_jobs=1,\n                       cv=GrowingWindow(10),\n                       verbose=1).fit(X_train, y_train)	209	11	214	55	217355086568393876
/cb-target/python/73/b7/9404838cf973b0c29c682c232103704f5e00a4aff83983d14e0060b33e36.py	Pipeline	"Pipeline([\n        (""lm"", linear_regression)\n    ])"	175	11	177	6	8662794570824659836	pipeline.fit(X_train, y_train)	250	16	250	46	-212031184038954231
/cb-target/python/73/b7/9404838cf973b0c29c682c232103704f5e00a4aff83983d14e0060b33e36.py	Pipeline	"Pipeline([\n        (""lm"", linear_regression)\n    ])"	175	11	177	6	8662794570824659836	pipeline.fit(X_train, y_train)	251	16	251	46	9204394409576328315
/cb-target/python/73/b7/9404838cf973b0c29c682c232103704f5e00a4aff83983d14e0060b33e36.py	RFE	RFE(Ridge(alpha=1.0), step=5, n_features_to_select = 1)	274	10	274	65	-4035464169782667400	RFE(Ridge(alpha=1.0), step=5, n_features_to_select = 1).fit(X_train, y_train)	274	10	274	87	8584724954775767911
/cb-target/python/f0/99/a963ba2ef8bdf9dda936590f06872a7e5c3cc81dd66b1f334eb0de0e93b1.py	KNeighborsClassifier	neighbors.KNeighborsClassifier(n_neighbors, weights='distance')	409	6	409	69	833275140981557996	clf.fit(train, train_y)	417	4	417	27	-6881473114548040550
/cb-target/python/f0/99/a963ba2ef8bdf9dda936590f06872a7e5c3cc81dd66b1f334eb0de0e93b1.py	GridSearchCV	GridSearchCV(estimator=clf, param_grid = param_test1, scoring='accuracy', n_jobs=-1,cv=2, verbose=True)	387	15	387	118	-1863019011831783678	gsearch1.fit(train_SGD, train_y)	388	4	388	36	-7535303527532758388
/cb-target/python/f0/99/a963ba2ef8bdf9dda936590f06872a7e5c3cc81dd66b1f334eb0de0e93b1.py	GridSearchCV	GridSearchCV(estimator=clf, param_grid = param_test1, scoring='accuracy', n_jobs=-1,cv=2, verbose=True)	412	15	412	118	-5928523317036996557	gsearch1.fit(train, train_y)	413	4	413	32	1648770003171054668
/cb-target/python/f0/99/a963ba2ef8bdf9dda936590f06872a7e5c3cc81dd66b1f334eb0de0e93b1.py	SGDClassifier	"SGDClassifier(loss='modified_huber', alpha=0.01, n_iter=100, class_weight=""balanced"", random_state=27)"	384	6	384	108	7682295185693834112	clf.fit(train_SGD, train_y)	392	4	392	31	-2638399566371143604
/cb-target/python/62/74/759ad741da8f814d82d8744071ff115898e75e93df9f2cef6fdf4c25f6ec.py	GridSearchCV	GridSearchCV(model, param_grid=params, cv=5)	147	9	147	53	-5295078605981425588	gs.fit(X,y)	148	4	148	15	-7681882826416847937
/cb-target/python/62/74/759ad741da8f814d82d8744071ff115898e75e93df9f2cef6fdf4c25f6ec.py	PCA	PCA(n_components=2)	85	6	85	25	-53820501493936579	pca.fit(mat.toarray())	86	0	86	22	-8146978389670898131
/cb-target/python/62/74/759ad741da8f814d82d8744071ff115898e75e93df9f2cef6fdf4c25f6ec.py	KMeans	KMeans(n_clusters=k)	300	9	300	29	-1868809484147718898	km.fit(df_et_schools_T)	301	4	301	27	5501055338719111774
/cb-target/python/62/74/759ad741da8f814d82d8744071ff115898e75e93df9f2cef6fdf4c25f6ec.py	KMeans	KMeans(n_clusters=6,random_state=123)	321	5	321	42	-8742234289742539510	km.fit(pca_schools)	322	0	322	19	4754161107411165782
/cb-target/python/62/74/759ad741da8f814d82d8744071ff115898e75e93df9f2cef6fdf4c25f6ec.py	LatentDirichletAllocation	LatentDirichletAllocation(n_topics=7, max_iter=50)	469	6	469	56	4796767437493829013	lda.fit(count_mat)	470	0	470	18	3211404524260044295
/cb-target/python/62/74/759ad741da8f814d82d8744071ff115898e75e93df9f2cef6fdf4c25f6ec.py	NMF	NMF(n_components=7, random_state=100)	123	6	123	43	-2787737027876902434	nmf.fit(mat)	124	0	124	12	6986307122754470633
/cb-target/python/99/78/c8e85cdead3c44cae55c31a1594d05e7c4d2641f0d63d9a87c8b06b8eef1.py	LinearRegression	LinearRegression()	97	9	97	27	-2293223324391707533	linreg.fit(X_train,y)	98	0	98	21	-3868887447641573933
/cb-target/python/99/78/c8e85cdead3c44cae55c31a1594d05e7c4d2641f0d63d9a87c8b06b8eef1.py	RandomForestRegressor	RandomForestRegressor(n_estimators=1000,random_state=0,n_jobs=5)	117	5	117	69	-2087713239445750723	rf.fit(X_train,y)	118	0	118	17	-2352671562981624308
/cb-target/python/c3/0e/552ff66555cd194cb0c5d152415d9affebc003485e862d2d35eaf5275b59.py	DecisionTreeClassifier	DecisionTreeClassifier()	20	6	20	30	821613064066478266	clf.fit(X, y)	21	0	21	13	-6226839725447360001
/cb-target/python/c3/0e/552ff66555cd194cb0c5d152415d9affebc003485e862d2d35eaf5275b59.py	DecisionTreeClassifier	tree.DecisionTreeClassifier()	39	6	39	35	5543740910720691288	clf.fit(iris.data, iris.target)	40	6	40	37	3093358900578808526
/cb-target/python/c3/0e/552ff66555cd194cb0c5d152415d9affebc003485e862d2d35eaf5275b59.py	DecisionTreeClassifier	DecisionTreeClassifier(random_state = 241)	88	7	88	49	-8893382543502367084	clf2.fit(data1, target)	89	0	89	23	7912081296312733524
/cb-target/python/f9/e1/adbf7c1cbcac3a9551b91734c6b1b51c0f9dd47f6e04941214b44553acb5.py	LabelEncoder	preprocessing.LabelEncoder()	38	12	38	40	-5741257359334925501	encode_ae.fit(y_ae_lab)	39	0	39	23	1678116623403720839
/cb-target/python/f9/e1/adbf7c1cbcac3a9551b91734c6b1b51c0f9dd47f6e04941214b44553acb5.py	LabelEncoder	preprocessing.LabelEncoder()	48	13	48	41	535186143247686170	encode_pca.fit(y_pca_lab)	49	0	49	25	2037239813415324415
/cb-target/python/f9/e1/adbf7c1cbcac3a9551b91734c6b1b51c0f9dd47f6e04941214b44553acb5.py	LabelEncoder	preprocessing.LabelEncoder()	55	13	55	41	840070434405983865	encode_pca.fit(o_lab)	56	0	56	21	266154203316501166
/cb-target/python/6d/c9/c5c7dec978026e1eeb061c9fe4289d0d1c19ba8b0a14c5296fb3d6e5d98a.py	KMeans	KMeans(n_clusters=num_clusters)	190	9	190	40	7745776995450769038	kmeans.fit(point_guards[['ppg', 'atr']])	191	0	191	40	-8907490630908958474
/cb-target/python/4e/cc/991b6a6b489fddcd96e0224e72292fa96bc4259f427fc9ae3be78e04235c.py	GridSearchCV	GridSearchCV(hyper_svc_dm, param_grid, cv=5, scoring='accuracy', verbose=5)	434	6	434	81	-1464412645791615078	clf.fit(skip_train_vecs, skip_y_train)	436	0	436	38	-8118477329744816417
/cb-target/python/3a/aa/b9519e402dc03f4970682b0a8854e036962e6e3b2a409c54797e7d95e564.py	GMM	GMM(n_components=components,random_state=42)	368	16	368	60	4926173920301451668	clusterer.fit(reduced_data)	369	4	369	31	4047207474912079335
/cb-target/python/3a/aa/b9519e402dc03f4970682b0a8854e036962e6e3b2a409c54797e7d95e564.py	GMM	GMM(n_components=components,random_state=42)	397	12	397	56	-4172562570042035411	clusterer.fit(reduced_data)	398	0	398	27	1664444360654550740
/cb-target/python/3a/aa/b9519e402dc03f4970682b0a8854e036962e6e3b2a409c54797e7d95e564.py	PCA	PCA(n_components=2)	343	6	343	25	-4459182463263189600	pca.fit(good_data)	344	0	344	18	-195124367733128620
/cb-target/python/3a/aa/b9519e402dc03f4970682b0a8854e036962e6e3b2a409c54797e7d95e564.py	PCA	PCA(n_components=6)	319	6	319	25	-2002380893661487063	pca.fit(good_data)	320	0	320	18	6078954256195170143
/cb-target/python/3a/aa/b9519e402dc03f4970682b0a8854e036962e6e3b2a409c54797e7d95e564.py	DecisionTreeRegressor	DecisionTreeRegressor(max_features = 1, random_state = 42)	111	12	111	70	-5861400435422006598	regressor.fit(X_train, y_train)	112	0	112	31	-1782949477263979193
/cb-target/python/3a/aa/b9519e402dc03f4970682b0a8854e036962e6e3b2a409c54797e7d95e564.py	DecisionTreeRegressor	DecisionTreeRegressor(random_state = 42)	161	16	161	56	8797512410571437127	regressor.fit(X_train, y_train)	162	4	162	35	-3426124857315160310
/cb-target/python/89/58/68e3acfce39690e2378982d66bdae67638104349d6a39c6baf446fc31a62.py	Ridge	linear_model.Ridge(alpha=l2_small_penalty, normalize=True)	44	8	44	66	-3053752046656468998	model.fit(poly15_data, sales['price'])	45	0	45	38	-6536029938206058064
/cb-target/python/89/58/68e3acfce39690e2378982d66bdae67638104349d6a39c6baf446fc31a62.py	Ridge	linear_model.Ridge(alpha=l2_small_penalty, normalize=True)	72	8	72	66	7598713182676118918	model.fit(poly15_data, set_1['price'])	73	0	73	38	6786959333670832550
/cb-target/python/89/58/68e3acfce39690e2378982d66bdae67638104349d6a39c6baf446fc31a62.py	Ridge	linear_model.Ridge(alpha=l2_small_penalty, normalize=True)	87	8	87	66	-6750361166044868740	model.fit(poly15_data, set_2['price'])	88	0	88	38	5537680430889852948
/cb-target/python/89/58/68e3acfce39690e2378982d66bdae67638104349d6a39c6baf446fc31a62.py	Ridge	linear_model.Ridge(alpha=l2_small_penalty, normalize=True)	97	8	97	66	-5077009384772055893	model.fit(poly15_data, set_3['price'])	98	0	98	38	7344276292815695334
/cb-target/python/89/58/68e3acfce39690e2378982d66bdae67638104349d6a39c6baf446fc31a62.py	Ridge	linear_model.Ridge(alpha=l2_small_penalty, normalize=True)	107	8	107	66	1901829854900050197	model.fit(poly15_data, set_4['price'])	108	0	108	38	3037619678928489125
/cb-target/python/89/58/68e3acfce39690e2378982d66bdae67638104349d6a39c6baf446fc31a62.py	Ridge	linear_model.Ridge(alpha=l2_large_penalty, normalize=True)	133	8	133	66	38893082769302496	model.fit(poly15_data, set_1['price'])	134	0	134	38	3391700456373723120
/cb-target/python/89/58/68e3acfce39690e2378982d66bdae67638104349d6a39c6baf446fc31a62.py	Ridge	linear_model.Ridge(alpha=l2_large_penalty, normalize=True)	143	8	143	66	9036160127161868218	model.fit(poly15_data, set_2['price'])	144	0	144	38	1626662606297384115
/cb-target/python/89/58/68e3acfce39690e2378982d66bdae67638104349d6a39c6baf446fc31a62.py	Ridge	linear_model.Ridge(alpha=l2_large_penalty, normalize=True)	153	8	153	66	7732435596731237108	model.fit(poly15_data, set_3['price'])	154	0	154	38	131088596349134174
/cb-target/python/89/58/68e3acfce39690e2378982d66bdae67638104349d6a39c6baf446fc31a62.py	Ridge	linear_model.Ridge(alpha=l2_large_penalty, normalize=True)	163	8	163	66	-2974510217042958869	model.fit(poly15_data, set_4['price'])	164	0	164	38	-8308873491050933111
/cb-target/python/89/58/68e3acfce39690e2378982d66bdae67638104349d6a39c6baf446fc31a62.py	Ridge	linear_model.Ridge(alpha=31622.77, normalize=True)	287	8	287	58	-2538914340416687438	model.fit(poly15_data, train_all['price'])	288	0	288	42	-5140932982954030641
/cb-target/python/89/58/68e3acfce39690e2378982d66bdae67638104349d6a39c6baf446fc31a62.py	Ridge	linear_model.Ridge(alpha=l2_penalty, normalize=True)	220	16	220	68	1568887020347575172	model.fit(poly15_data, train[output_name])	221	8	221	50	6215687592494300919
/cb-target/python/7a/bb/4f94b2c7ab042d5128600a6586c4a86305b6d76e2e362d9633d60dd1e6bb.py	LinearRegression	linear_model.LinearRegression()	123	7	123	38	-4665116233020434016	regr.fit(X, y)	126	0	126	14	-8877083721623740141
/cb-target/python/7a/bb/4f94b2c7ab042d5128600a6586c4a86305b6d76e2e362d9633d60dd1e6bb.py	LinearRegression	linear_model.LinearRegression()	173	7	173	38	-8857974639591664677	regr.fit(df2_X, df2_y)	176	0	176	22	1959792900515421637
/cb-target/python/fd/1e/31268ea804a3043b4c52dbb8c2fdb0df4f933ebe55f99dbdc9cb78c5cd32.py	DecisionTreeClassifier	DecisionTreeClassifier(random_state=1)	80	10	80	48	494464724532573090	treereg.fit(X_train, y_train)	81	0	81	29	2196726459470451266
/cb-target/python/fd/1e/31268ea804a3043b4c52dbb8c2fdb0df4f933ebe55f99dbdc9cb78c5cd32.py	GridSearchCV	GridSearchCV(model, PARAMETERS, verbose=True, n_jobs = -1)	154	6	154	64	1356931520837932424	clf.fit(X,y)	155	0	155	12	-1066382656116063250
/cb-target/python/fd/1e/31268ea804a3043b4c52dbb8c2fdb0df4f933ebe55f99dbdc9cb78c5cd32.py	DecisionTreeRegressor	DecisionTreeRegressor(random_state=1)	210	10	210	47	-2070522690178230973	treereg.fit(X_train, y_train)	211	0	211	29	-1846103288612453128
/cb-target/python/36/69/5932de4bf3f297507f6d8fb266cabd47d62ab55e279f3dbc2ea68a55b711.py	SVC	svm.SVC(C=1.0, kernel='rbf', degree=3, gamma='auto', coef0=0.0,\n              shrinking=True, probability=False, tol=0.001, cache_size=200,\n              class_weight='balanced', verbose=False, max_iter=-1,\n              decision_function_shape=None, random_state=128)	443	6	446	61	-6800502746118683150	est.fit(X_train, y_train)	452	0	452	25	5981613601862489479
/cb-target/python/36/69/5932de4bf3f297507f6d8fb266cabd47d62ab55e279f3dbc2ea68a55b711.py	LogisticRegression	LogisticRegression(random_state=128)	459	6	459	42	-6115605289317648282	est.fit(X_train, y_train)	464	0	464	25	-761488670244214034
/cb-target/python/36/69/5932de4bf3f297507f6d8fb266cabd47d62ab55e279f3dbc2ea68a55b711.py	GridSearchCV	grid_search.GridSearchCV(est, parameters, scoring=auc_scorer, cv=3)	545	6	545	73	4640903283217118823	reg.fit(X_train, y_train)	546	0	546	25	8373545950223041342
/cb-target/python/36/69/5932de4bf3f297507f6d8fb266cabd47d62ab55e279f3dbc2ea68a55b711.py	PCA	PCA(n_components=3, copy=True, whiten=False)	274	6	274	50	-2280774520580337913	pca.fit(df_all)	277	0	277	15	7989892965160758344
/cb-target/python/36/69/5932de4bf3f297507f6d8fb266cabd47d62ab55e279f3dbc2ea68a55b711.py	ExtraTreesClassifier	ExtraTreesClassifier(n_estimators=128,max_features= 30,criterion= 'entropy',\n                           min_samples_split= 2,max_depth= 30, min_samples_leaf= 2,\n                           n_jobs = -1, random_state=512)	429	6	431	57	-1172106134871684470	est.fit(X_train, y_train)	435	0	435	25	-8652042562156265443
/cb-target/python/8b/e9/ab4883e11ed3d2e0a32070ae8cc4855e89d588a855c0f2b142134692fd99.py	GridSearchCV	GridSearchCV(ExtraTreesClassifier(random_state=0), hyperparameters, cv=10, n_jobs=-1)	430	27	430	112	-8874143333364382598	optimized_kaggle_cv10_ET.fit(X_kaggle, y_train)	431	0	431	47	-2705504952120428428
/cb-target/python/8b/e9/ab4883e11ed3d2e0a32070ae8cc4855e89d588a855c0f2b142134692fd99.py	GridSearchCV	GridSearchCV(ExtraTreesClassifier(random_state=0), hyperparameters, cv=10, n_jobs=-1)	453	25	453	110	9104299500547875210	optimized_base_cv10_ET.fit(X_base, y_train)	454	0	454	43	-4217302610964974310
/cb-target/python/8b/e9/ab4883e11ed3d2e0a32070ae8cc4855e89d588a855c0f2b142134692fd99.py	GridSearchCV	GridSearchCV(ExtraTreesClassifier(random_state=0), hyperparameters, cv=10, n_jobs=-1)	476	24	476	109	5868572558423005543	optimized_100_cv10_ET.fit(X_100, y_train)	477	0	477	41	-2900993261656054408
/cb-target/python/8b/e9/ab4883e11ed3d2e0a32070ae8cc4855e89d588a855c0f2b142134692fd99.py	GridSearchCV	GridSearchCV(RandomForestClassifier(random_state=0), hyperparameters, cv=5, n_jobs=-1)	287	26	287	112	3071297268452550081	optimized_kaggle_cv5_RF.fit(X_kaggle, y_train)	288	0	288	46	893819456728701058
/cb-target/python/8b/e9/ab4883e11ed3d2e0a32070ae8cc4855e89d588a855c0f2b142134692fd99.py	GridSearchCV	GridSearchCV(RandomForestClassifier(random_state=0), hyperparameters, cv=5, n_jobs=-1)	335	24	335	110	-6996170918864383969	optimized_base_cv5_RF.fit(X_base, y_train)	336	0	336	42	-4810331837791255125
/cb-target/python/8b/e9/ab4883e11ed3d2e0a32070ae8cc4855e89d588a855c0f2b142134692fd99.py	GridSearchCV	GridSearchCV(RandomForestClassifier(random_state=0), hyperparameters, cv=5, n_jobs=-1)	383	23	383	109	-8486977061449381213	optimized_100_cv5_RF.fit(X_100, y_train)	384	0	384	40	6079326018195887677
/cb-target/python/8b/e9/ab4883e11ed3d2e0a32070ae8cc4855e89d588a855c0f2b142134692fd99.py	GridSearchCV	GridSearchCV(xgb.XGBClassifier(**ind_params), cv_params, scoring = 'accuracy', cv = 10, n_jobs = -1)	125	28	125	128	-2171418488649409497	optimized_kaggle_cv10_GBM.fit(X_kaggle, y_train)	126	0	126	48	-3113823027852442100
/cb-target/python/8b/e9/ab4883e11ed3d2e0a32070ae8cc4855e89d588a855c0f2b142134692fd99.py	GridSearchCV	GridSearchCV(xgb.XGBClassifier(**ind_params), cv_params, scoring = 'accuracy', cv = 10, n_jobs = -1)	189	26	189	126	5517732317304734064	optimized_base_cv10_GBM.fit(X_base, y_train)	190	0	190	44	6085613715016671084
/cb-target/python/8b/e9/ab4883e11ed3d2e0a32070ae8cc4855e89d588a855c0f2b142134692fd99.py	GridSearchCV	GridSearchCV(xgb.XGBClassifier(**ind_params), cv_params, scoring = 'accuracy', cv = 10, n_jobs = -1)	250	25	250	125	-8130428583213808442	optimized_100_cv10_GBM.fit(X_100, y_train)	251	0	251	42	3256410159622915635
/cb-target/python/8b/e9/ab4883e11ed3d2e0a32070ae8cc4855e89d588a855c0f2b142134692fd99.py	GridSearchCV	GridSearchCV(RandomForestClassifier(random_state=0), hyperparameters, cv=10, n_jobs=-1)	311	27	311	114	-6260573373209571626	optimized_kaggle_cv10_RF.fit(X_kaggle, y_train)	312	0	312	47	-5865525984699021486
/cb-target/python/8b/e9/ab4883e11ed3d2e0a32070ae8cc4855e89d588a855c0f2b142134692fd99.py	GridSearchCV	GridSearchCV(RandomForestClassifier(random_state=0), hyperparameters, cv=10, n_jobs=-1)	359	25	359	112	-7841589762250556590	optimized_base_cv10_RF.fit(X_base, y_train)	360	0	360	43	3153828053733573281
/cb-target/python/8b/e9/ab4883e11ed3d2e0a32070ae8cc4855e89d588a855c0f2b142134692fd99.py	GridSearchCV	GridSearchCV(RandomForestClassifier(random_state=0), hyperparameters, cv=10, n_jobs=-1)	407	24	407	111	1184295795246820261	optimized_100_cv10_RF.fit(X_100, y_train)	408	0	408	41	-2267712083122708733
/cb-target/python/8b/e9/ab4883e11ed3d2e0a32070ae8cc4855e89d588a855c0f2b142134692fd99.py	GridSearchCV	GridSearchCV(xgb.XGBClassifier(**ind_params), cv_params, scoring = 'accuracy', cv = 5, n_jobs = -1)	167	21	167	120	3067195636446961688	optimized_base_GBM.fit(X_base, y_train)	168	0	168	39	-4546381417993230391
/cb-target/python/8b/e9/ab4883e11ed3d2e0a32070ae8cc4855e89d588a855c0f2b142134692fd99.py	GridSearchCV	GridSearchCV(xgb.XGBClassifier(**ind_params), cv_params, scoring = 'accuracy', cv = 5, n_jobs = -1)	228	24	228	123	474335695685028596	optimized_100_cv5_GBM.fit(X_100, y_train)	229	0	229	41	1227409373233084170
/cb-target/python/8b/e9/ab4883e11ed3d2e0a32070ae8cc4855e89d588a855c0f2b142134692fd99.py	GridSearchCV	GridSearchCV(xgb.XGBClassifier(**ind_params), cv_params, scoring = 'accuracy', cv = 5)	103	27	103	113	4662934878881371032	optimized_kaggle_cv5_GBM.fit(X_kaggle, y_train)	104	0	104	47	7216461697998389033
/cb-target/python/d2/f2/82f10676f88f1073663707e73083ec708e9bed0435581c161a843046a39b.py	LinearRegression	LinearRegression()	60	6	60	24	-5921421229185655124	alg.fit(train_predictors, train_target)	73	4	73	43	-4066002407507946872
/cb-target/python/d2/f2/82f10676f88f1073663707e73083ec708e9bed0435581c161a843046a39b.py	LogisticRegression	LogisticRegression(random_state=1)	130	6	130	40	-7946757346996054513	"alg.fit(titanic[predictors], titanic[""Survived""])"	133	0	133	49	7028877740240257657
/cb-target/python/cd/a9/3e650b1cdf6ca706b2ef9ed53c0e322234d16d14e33f43fb46e46e687abe.py	MultinomialNB	naive_bayes.MultinomialNB()	76	6	76	33	-197848823233245676	clf.fit(X_train, y_train)	77	0	77	25	-3122484867235414726
/cb-target/python/6e/4d/977df51440a45e7c505e2c3f362d70f6307ad4f073b639bb3f964eedcfc1.py	LogisticRegression	LogisticRegression()	77	5	77	25	1267122955793677074	lm.fit(df.loc[:, features], df[label])	101	0	101	38	-7058460182361488070
/cb-target/python/6e/4d/977df51440a45e7c505e2c3f362d70f6307ad4f073b639bb3f964eedcfc1.py	LogisticRegression	LogisticRegression()	77	5	77	25	1267122955793677074	lm.fit(df[['gre']], df['admit'])	83	0	83	32	715996337523874683
/cb-target/python/81/b7/e26f91b27deae17ca958c27d752106e6abff2cc5520960f4d06521b1028a.py	RandomForestRegressor	RandomForestRegressor()	534	6	534	29	3949213402855710029	rfr.fit(X_train, y_train)	535	0	535	25	-1536953616132214772
/cb-target/python/81/b7/e26f91b27deae17ca958c27d752106e6abff2cc5520960f4d06521b1028a.py	RandomForestRegressor	RandomForestRegressor(n_estimators=200, max_features='auto', bootstrap=True)	710	11	710	87	-5587997786013617779	etr_best.fit(X_train3, y_train3)	711	0	711	32	7440559153223182470
/cb-target/python/81/b7/e26f91b27deae17ca958c27d752106e6abff2cc5520960f4d06521b1028a.py	Lasso	Lasso()	615	5	615	12	-2646195151798738895	lr.fit(X_train, y_train)	616	0	616	24	8362579336590634266
/cb-target/python/81/b7/e26f91b27deae17ca958c27d752106e6abff2cc5520960f4d06521b1028a.py	GridSearchCV	GridSearchCV(estimator=etr, param_grid=param_grid3, cv= 5)	702	9	702	67	-6435793057796163192	CV_etr.fit(X_train3, y_train3)	703	0	703	30	-8639676077771514917
/cb-target/python/46/6a/071446bfc791aa649dd5a3454a46ab2c3cc3528d6f7c6a218b2ece7cb3b0.py	KNeighborsClassifier	KNeighborsClassifier(n_neighbors=k)	112	10	112	45	5620576944989359269	knn.fit(X_train, y_train)	113	4	113	29	7971649432036723011
/cb-target/python/46/6a/071446bfc791aa649dd5a3454a46ab2c3cc3528d6f7c6a218b2ece7cb3b0.py	KNeighborsClassifier	KNeighborsClassifier(n_neighbors=5)	97	6	97	41	-1938579979767506305	knn.fit(X_train, y_train)	98	0	98	25	4639919633345124679
/cb-target/python/46/6a/071446bfc791aa649dd5a3454a46ab2c3cc3528d6f7c6a218b2ece7cb3b0.py	KNeighborsClassifier	KNeighborsClassifier(n_neighbors=5)	127	6	127	41	-1222735135251249497	knn.fit(X_train, y_train)	128	0	128	25	-7902379101369640392
/cb-target/python/46/6a/071446bfc791aa649dd5a3454a46ab2c3cc3528d6f7c6a218b2ece7cb3b0.py	KNeighborsClassifier	KNeighborsClassifier(n_neighbors=5)	138	6	138	41	6900420237444848955	knn.fit(X_train, y_train)	139	0	139	25	3484635736932395954
/cb-target/python/46/6a/071446bfc791aa649dd5a3454a46ab2c3cc3528d6f7c6a218b2ece7cb3b0.py	LogisticRegression	LogisticRegression()	84	9	84	29	6800080420584553900	logreg.fit(X_train, y_train)	85	0	85	28	-447996207728267175
/cb-target/python/00/14/4337a9cda6ac0199f6f64e055b35e184e53e7402413b99067bab688ce198.py	LogisticRegression	LogisticRegression()	81	9	81	29	-3424726765301930313	logReg.fit(df[predictors],df['Loan_Status'])	82	0	82	44	-6030897839993665477
/cb-target/python/a4/c7/296dd290f9f818200795e750424ccf67a46eaaef2c1cc7b5bcac419be48a.py	BernoulliNB	BernoulliNB()	475	6	475	19	-6017696930251158943	bNB.fit(train_counts, labels)	476	0	476	29	2374213838175486404
/cb-target/python/a4/c7/296dd290f9f818200795e750424ccf67a46eaaef2c1cc7b5bcac419be48a.py	MultinomialNB	MultinomialNB()	470	6	470	21	-3501817903528981803	mNB.fit(train_counts, labels)	471	0	471	29	-9062194874864323556
/cb-target/python/88/96/37b1a845c0fdda10ddc41edcd02b499704d98b947c52ed5a7dc9b5708d90.py	MultinomialNB	MultinomialNB()	293	6	293	21	-7888726664988338225	clf.fit(X_train_std, y_train)	294	0	294	29	-3140650264016403700
/cb-target/python/88/96/37b1a845c0fdda10ddc41edcd02b499704d98b947c52ed5a7dc9b5708d90.py	MultinomialNB	MultinomialNB()	293	6	293	21	-7888726664988338225	clf.fit(X_train_std, y_train)	295	9	295	38	5295624108272555052
/cb-target/python/88/96/37b1a845c0fdda10ddc41edcd02b499704d98b947c52ed5a7dc9b5708d90.py	MultinomialNB	MultinomialNB()	530	6	530	21	-6321527427203306435	clf.fit(X_train_std, y_train)	531	0	531	29	9025675415428266620
/cb-target/python/88/96/37b1a845c0fdda10ddc41edcd02b499704d98b947c52ed5a7dc9b5708d90.py	MultinomialNB	MultinomialNB()	530	6	530	21	-6321527427203306435	clf.fit(X_train_std, y_train)	532	9	532	38	3465205823688664375
/cb-target/python/88/96/37b1a845c0fdda10ddc41edcd02b499704d98b947c52ed5a7dc9b5708d90.py	StandardScaler	StandardScaler(with_mean=False)	250	5	250	36	-2014314078116865620	sc.fit(X_train)	251	0	251	15	-3782388000914300500
/cb-target/python/88/96/37b1a845c0fdda10ddc41edcd02b499704d98b947c52ed5a7dc9b5708d90.py	StandardScaler	StandardScaler(with_mean=False)	487	5	487	36	-5547733802444557457	sc.fit(X_train)	488	0	488	15	4227600779564984013
/cb-target/python/88/96/37b1a845c0fdda10ddc41edcd02b499704d98b947c52ed5a7dc9b5708d90.py	SGDClassifier	linear_model.SGDClassifier()	271	6	271	34	-8073201149798582118	clf.fit(X_train_std, y_train)	272	0	272	29	-4719779974930287420
/cb-target/python/88/96/37b1a845c0fdda10ddc41edcd02b499704d98b947c52ed5a7dc9b5708d90.py	SGDClassifier	linear_model.SGDClassifier()	271	6	271	34	-8073201149798582118	clf.fit(X_train_std, y_train)	273	9	273	38	8711732456543115659
/cb-target/python/88/96/37b1a845c0fdda10ddc41edcd02b499704d98b947c52ed5a7dc9b5708d90.py	SGDClassifier	linear_model.SGDClassifier()	282	6	282	34	-7048288217160231216	clf.fit(X_train_std, y_train)	283	0	283	29	8728154340982615713
/cb-target/python/88/96/37b1a845c0fdda10ddc41edcd02b499704d98b947c52ed5a7dc9b5708d90.py	SGDClassifier	linear_model.SGDClassifier()	282	6	282	34	-7048288217160231216	clf.fit(X_train_std, y_train)	284	9	284	38	-4517084818403990351
/cb-target/python/88/96/37b1a845c0fdda10ddc41edcd02b499704d98b947c52ed5a7dc9b5708d90.py	SGDClassifier	linear_model.SGDClassifier()	508	6	508	34	-7702902529939228234	clf.fit(X_train_std, y_train)	509	0	509	29	-4136138729421363461
/cb-target/python/88/96/37b1a845c0fdda10ddc41edcd02b499704d98b947c52ed5a7dc9b5708d90.py	SGDClassifier	linear_model.SGDClassifier()	508	6	508	34	-7702902529939228234	clf.fit(X_train_std, y_train)	510	9	510	38	7582766983940895755
/cb-target/python/88/96/37b1a845c0fdda10ddc41edcd02b499704d98b947c52ed5a7dc9b5708d90.py	SGDClassifier	linear_model.SGDClassifier(loss='perceptron')	304	6	304	51	7101438045232066438	clf.fit(X_train_std, y_train)	305	0	305	29	-6437425267016673254
/cb-target/python/88/96/37b1a845c0fdda10ddc41edcd02b499704d98b947c52ed5a7dc9b5708d90.py	SGDClassifier	linear_model.SGDClassifier(loss='perceptron')	304	6	304	51	7101438045232066438	clf.fit(X_train_std, y_train)	306	9	306	38	-4527828439240244125
/cb-target/python/88/96/37b1a845c0fdda10ddc41edcd02b499704d98b947c52ed5a7dc9b5708d90.py	SGDClassifier	linear_model.SGDClassifier(loss='perceptron')	541	6	541	51	7398097180113250244	clf.fit(X_train_std, y_train)	542	0	542	29	3209447525725322688
/cb-target/python/88/96/37b1a845c0fdda10ddc41edcd02b499704d98b947c52ed5a7dc9b5708d90.py	SGDClassifier	linear_model.SGDClassifier(loss='perceptron')	541	6	541	51	7398097180113250244	clf.fit(X_train_std, y_train)	543	9	543	38	-3678439986156738775
/cb-target/python/88/96/37b1a845c0fdda10ddc41edcd02b499704d98b947c52ed5a7dc9b5708d90.py	SGDClassifier	linear_model.SGDClassifier(loss='log', n_iter=50, alpha=0.00001)	519	6	519	70	-7716158948636219130	clf.fit(X_train_std, y_train)	520	0	520	29	6036227287895071743
/cb-target/python/88/96/37b1a845c0fdda10ddc41edcd02b499704d98b947c52ed5a7dc9b5708d90.py	SGDClassifier	linear_model.SGDClassifier(loss='log', n_iter=50, alpha=0.00001)	519	6	519	70	-7716158948636219130	clf.fit(X_train_std, y_train)	521	9	521	38	5570455803863953487
/cb-target/python/a5/28/d4198ea3bca2c48bab740a99afc2aa91d51f6823b96c6e0a53334f69619b.py	LinearRegression	LinearRegression()	34	6	34	24	-1379243892691356989	clf.fit(X,y)	104	8	104	20	-5101878870720068853
/cb-target/python/a5/28/d4198ea3bca2c48bab740a99afc2aa91d51f6823b96c6e0a53334f69619b.py	LinearRegression	LinearRegression()	34	6	34	24	-1379243892691356989	clf.fit(Xtrain,ytrain)	43	4	43	26	-6227913589311101413
/cb-target/python/a5/28/d4198ea3bca2c48bab740a99afc2aa91d51f6823b96c6e0a53334f69619b.py	LinearRegression	LinearRegression()	52	10	52	28	-2862296377455431840	clf.fit(X,y)	53	4	53	16	-4351192659250345479
/cb-target/python/a5/28/d4198ea3bca2c48bab740a99afc2aa91d51f6823b96c6e0a53334f69619b.py	LinearRegression	LinearRegression()	81	10	81	28	-7676807731417096733	clf.fit(X,y)	82	4	82	16	1079065396860526117
/cb-target/python/a5/28/d4198ea3bca2c48bab740a99afc2aa91d51f6823b96c6e0a53334f69619b.py	LinearRegression	LinearRegression()	81	10	81	28	-7676807731417096733	clf.fit(X,y)	104	8	104	20	-5101878870720068853
/cb-target/python/a5/28/d4198ea3bca2c48bab740a99afc2aa91d51f6823b96c6e0a53334f69619b.py	LinearRegression	LinearRegression()	129	14	129	32	3009235000036217438	clf.fit(X,y)	130	8	130	20	4751661919511252962
/cb-target/python/0c/8b/c5ca2822daa6ba538f04fbb93709c9c5dcbcad752469c6678ce0b76d1a68.py	GridSearchCV	GridSearchCV(estimator=clf, param_grid=parameters, scoring=f1_scorer, verbose=1)	239	11	239	91	-6944250565576190931	grid_obj.fit(X_train, y_train)	243	11	243	41	1848299596173374003
/cb-target/python/0f/3f/22c08ad5cfb323e4949f0c1cedb439abe767a9998c38cd198e464adf2ac2.py	RandomForestClassifier	ensemble.RandomForestClassifier(n_jobs = -1,n_estimators = 1000)	254	6	254	70	6890593449940541785	clf.fit(train_Array , labels)	255	0	255	29	8114237125188106965
/cb-target/python/0f/3f/22c08ad5cfb323e4949f0c1cedb439abe767a9998c38cd198e464adf2ac2.py	LogisticRegression	lm.LogisticRegression(C = 1e5)	260	9	260	39	4909804738397614645	logreg.fit(train_Array,labels)	261	0	261	30	32860951530209862
/cb-target/python/4d/7d/5e928649f988602538d89f7ff384f981651b293d0e13e8d723f452d0ae4c.py	ExtraTreesClassifier	ExtraTreesClassifier()	128	10	128	32	-254401071060289527	clf.fit(dtrain[0], dtrain[1])	131	8	131	37	-4055643835713763155
/cb-target/python/4d/7d/5e928649f988602538d89f7ff384f981651b293d0e13e8d723f452d0ae4c.py	ExtraTreesClassifier	ExtraTreesClassifier()	128	10	128	32	-254401071060289527	clf.fit(dtrain[0], dtrain[1])	136	8	136	37	8623707316173703036
/cb-target/python/4d/7d/5e928649f988602538d89f7ff384f981651b293d0e13e8d723f452d0ae4c.py	ExtraTreesClassifier	ExtraTreesClassifier()	216	6	216	28	1753271005938751533	clf.fit(X_train, y_train_cls)	218	0	218	29	2111323183103919550
/cb-target/python/4d/7d/5e928649f988602538d89f7ff384f981651b293d0e13e8d723f452d0ae4c.py	LabelEncoder	preprocessing.LabelEncoder()	47	18	47	46	-8074327919689720560	lbl.fit(list(basic_feat[f].values))	48	12	48	47	6958236923104165383
/cb-target/python/45/0b/ad27f368e122e922879f3b6b0da56344937373bfa3571f98ac9357e3e517.py	LinearRegression	linear_model.LinearRegression()	303	6	303	37	-2556699902673427519	ols.fit(X, y)	309	0	309	13	8370902187091534799
/cb-target/python/45/0b/ad27f368e122e922879f3b6b0da56344937373bfa3571f98ac9357e3e517.py	LinearRegression	linear_model.LinearRegression()	303	6	303	37	-2556699902673427519	ols.fit(X, y)	360	0	360	13	-2849955649218311758
/cb-target/python/45/0b/ad27f368e122e922879f3b6b0da56344937373bfa3571f98ac9357e3e517.py	LinearRegression	linear_model.LinearRegression()	322	10	322	41	127574676725901853	ols_vol.fit(X, y)	330	0	330	17	3072527201781155515
/cb-target/python/45/0b/ad27f368e122e922879f3b6b0da56344937373bfa3571f98ac9357e3e517.py	RandomForestRegressor	RandomForestRegressor()	428	7	428	30	-5643573949535607355	model.fit(X_train, y_train.reshape([-1, 1]))	435	0	435	44	-2956559834563800306
/cb-target/python/b2/76/99dc8bded1d009bc86e3f15b203ab18740da431d68abd19aac9d68ca1a44.py	GradientBoostingRegressor	GradientBoostingRegressor(n_estimators = 100,max_depth=20,subsample = .7)	252	17	252	90	4052374700554194406	clf.fit(X,y)	253	0	253	12	-4009706008859866709
/cb-target/python/b5/b0/eaceb2f452a826bd3edf635d713e54bffc3a59e34f55bc9ef9f6ce71dba4.py	LabelEncoder	LabelEncoder()	246	16	246	30	-3467538778019975683	LabelEncoder().fit(phone_brand_master.group)	246	16	246	60	-3776099020577503124
/cb-target/python/72/e7/e0f60bc5cd486f3b6a656620d908a38bfd16ba02766b68af7d8a8ad819fc.py	GridSearchCV	GridSearchCV(dt,\n                    params, n_jobs=-1,\n                    cv=KFold(len(y), n_folds=3, shuffle=True))	280	7	282	62	-4787644845970011405	gsdt.fit(Xs, y)	294	0	294	15	7771520392479823256
/cb-target/python/72/e7/e0f60bc5cd486f3b6a656620d908a38bfd16ba02766b68af7d8a8ad819fc.py	GridSearchCV	GridSearchCV(dt,\n                    params, n_jobs=-1,\n                    cv=KFold(len(y), n_folds=3, shuffle=True))	280	7	282	62	-4787644845970011405	gsdt.fit(X, y)	284	0	284	14	6757898413398234453
/cb-target/python/72/e7/e0f60bc5cd486f3b6a656620d908a38bfd16ba02766b68af7d8a8ad819fc.py	GridSearchCV	GridSearchCV(KNeighborsClassifier(),\n                     params, n_jobs=-1,\n                     cv=KFold(len(y), n_folds=3, shuffle=True))	127	8	129	63	1273182965297514686	gsknn.fit(X, y)	132	0	132	15	-6733301780723354045
/cb-target/python/72/e7/e0f60bc5cd486f3b6a656620d908a38bfd16ba02766b68af7d8a8ad819fc.py	GridSearchCV	GridSearchCV(KNeighborsClassifier(),\n                     params, n_jobs=-1,\n                     cv=KFold(len(y), n_folds=3, shuffle=True))	127	8	129	63	1273182965297514686	gsknn.fit(Xs,ys)	140	0	140	16	-451990988003580559
/cb-target/python/72/e7/e0f60bc5cd486f3b6a656620d908a38bfd16ba02766b68af7d8a8ad819fc.py	GridSearchCV	GridSearchCV(BaggingClassifier(gslr.best_estimator_),\n                           bagging_params, n_jobs=-1,\n                           cv=KFold(len(y), n_folds=3, shuffle=True))	245	14	247	69	1756687401416505694	gsbagginglr.fit(X, y)	249	0	249	21	-8543556134433336252
/cb-target/python/72/e7/e0f60bc5cd486f3b6a656620d908a38bfd16ba02766b68af7d8a8ad819fc.py	GridSearchCV	GridSearchCV(baggingknn,\n                            bagging_params, n_jobs=-1,\n                            cv=KFold(len(y), n_folds=3, shuffle=True))	183	15	185	70	3622221808566348316	gsbaggingknn.fit(X,y)	190	0	190	21	5579825141712363832
/cb-target/python/72/e7/e0f60bc5cd486f3b6a656620d908a38bfd16ba02766b68af7d8a8ad819fc.py	GridSearchCV	GridSearchCV(lr,\n                    params, n_jobs=-1,\n                    cv=KFold(len(y), n_folds=3, shuffle=True))	217	7	219	62	3688126054949006017	gslr.fit(Xs, y)	232	0	232	15	8014530462170792792
/cb-target/python/72/e7/e0f60bc5cd486f3b6a656620d908a38bfd16ba02766b68af7d8a8ad819fc.py	GridSearchCV	GridSearchCV(lr,\n                    params, n_jobs=-1,\n                    cv=KFold(len(y), n_folds=3, shuffle=True))	217	7	219	62	3688126054949006017	gslr.fit(X, y)	221	0	221	14	5104592562811665618
/cb-target/python/9a/38/f7edf38da55db29d48a9f9b5ed58ad2cddd6921255a67dc1974f2646751f.py	GMM	GMM(n_components=n_cluster, random_state=0)	174	20	174	63	4126689735867551932	GMM(n_components=n_cluster, random_state=0).fit(reduced_data)	174	20	174	81	-7559069399533299058
/cb-target/python/9a/38/f7edf38da55db29d48a9f9b5ed58ad2cddd6921255a67dc1974f2646751f.py	PCA	PCA(n_components=2)	147	6	147	25	-1320291056034562818	PCA(n_components=2).fit(good_data)	147	6	147	40	7937097413242986444
/cb-target/python/9a/38/f7edf38da55db29d48a9f9b5ed58ad2cddd6921255a67dc1974f2646751f.py	PCA	PCA(n_components=6)	126	6	126	25	5009214958123412364	PCA(n_components=6).fit(good_data)	126	6	126	40	4605421372650011896
/cb-target/python/9a/38/f7edf38da55db29d48a9f9b5ed58ad2cddd6921255a67dc1974f2646751f.py	DecisionTreeRegressor	tree.DecisionTreeRegressor(random_state=0, max_depth=3)	58	16	58	71	7277701536390808410	regressor.fit(X_train, y_train)	59	4	59	35	-6017252430914616659
/cb-target/python/9a/38/f7edf38da55db29d48a9f9b5ed58ad2cddd6921255a67dc1974f2646751f.py	KMeans	KMeans(n_clusters=n_cluster, random_state=0)	175	23	175	67	-1446381811664265876	KMeans(n_clusters=n_cluster, random_state=0).fit(reduced_data)	175	23	175	85	-1054924307051863506
/cb-target/python/b3/4b/42759b1df0df36e430e07e2e010a471c245d4c638e00f5ccbc6a07b3fda5.py	SVC	SVC(kernel='linear', class_weight='auto', C=.01)	1524	18	1524	66	-6763293051778311827	clf_tmp.fit(select_x,encoder.transform(y[train]))	1527	8	1527	57	-6124162042381016215
/cb-target/python/b3/4b/42759b1df0df36e430e07e2e010a471c245d4c638e00f5ccbc6a07b3fda5.py	RandomForestClassifier	RandomForestClassifier(n_estimators=5,max_depth=10)	1202	11	1202	62	-4387725582121171103	cls2.fit(scaler.transform(data_all[train,:]),y[train])	1217	4	1217	58	-7603118422389066483
/cb-target/python/b3/4b/42759b1df0df36e430e07e2e010a471c245d4c638e00f5ccbc6a07b3fda5.py	BaggingClassifier	BaggingClassifier(KNeighborsClassifier(), n_estimators=1500 ,\n                               max_samples=1., max_features=0.02)	1272	11	1273	65	-8399111771611758641	cls2.fit(scaler.transform(data_all[train,:])[:,candidat_f],y[train])	1285	4	1285	72	3336168933185201782
/cb-target/python/b3/4b/42759b1df0df36e430e07e2e010a471c245d4c638e00f5ccbc6a07b3fda5.py	BaggingClassifier	BaggingClassifier(KNeighborsClassifier(), n_estimators=1000 ,\n                                max_samples=1., max_features=0.02)	1136	11	1137	66	-1034856985616944785	cls2.fit(scaler.transform(data_all[train,:]),y[train])	1149	4	1149	58	-8710804832132221142
/cb-target/python/b3/4b/42759b1df0df36e430e07e2e010a471c245d4c638e00f5ccbc6a07b3fda5.py	StandardScaler	preprocessing.StandardScaler()	150	9	150	39	-7864383621086611314	preprocessing.StandardScaler().fit(data_all)	150	9	150	53	-1894713438270769665
/cb-target/python/b3/4b/42759b1df0df36e430e07e2e010a471c245d4c638e00f5ccbc6a07b3fda5.py	StandardScaler	preprocessing.StandardScaler()	213	9	213	39	-1630044476098112141	preprocessing.StandardScaler().fit(data_all)	213	9	213	53	6914202625229999842
/cb-target/python/b3/4b/42759b1df0df36e430e07e2e010a471c245d4c638e00f5ccbc6a07b3fda5.py	StandardScaler	preprocessing.StandardScaler()	283	9	283	39	-1970087378833017856	preprocessing.StandardScaler().fit(data_all)	283	9	283	53	-810695731712605212
/cb-target/python/b3/4b/42759b1df0df36e430e07e2e010a471c245d4c638e00f5ccbc6a07b3fda5.py	StandardScaler	preprocessing.StandardScaler()	370	9	370	39	2503203540381625321	preprocessing.StandardScaler().fit(data_all)	370	9	370	53	-6924886110634642155
/cb-target/python/b3/4b/42759b1df0df36e430e07e2e010a471c245d4c638e00f5ccbc6a07b3fda5.py	StandardScaler	preprocessing.StandardScaler()	440	9	440	39	-523247485080492799	preprocessing.StandardScaler().fit(data_all)	440	9	440	53	-7123075149026267961
/cb-target/python/b3/4b/42759b1df0df36e430e07e2e010a471c245d4c638e00f5ccbc6a07b3fda5.py	StandardScaler	preprocessing.StandardScaler()	531	9	531	39	-256337834111094029	preprocessing.StandardScaler().fit(data_all)	531	9	531	53	-6154103423568637827
/cb-target/python/b3/4b/42759b1df0df36e430e07e2e010a471c245d4c638e00f5ccbc6a07b3fda5.py	StandardScaler	preprocessing.StandardScaler()	628	9	628	39	-5951529243059625711	preprocessing.StandardScaler().fit(data_all)	628	9	628	53	7507859683987758201
/cb-target/python/b3/4b/42759b1df0df36e430e07e2e010a471c245d4c638e00f5ccbc6a07b3fda5.py	StandardScaler	preprocessing.StandardScaler()	718	9	718	39	2410619015997954231	preprocessing.StandardScaler().fit(data_all)	718	9	718	53	-2798398098244909692
/cb-target/python/b3/4b/42759b1df0df36e430e07e2e010a471c245d4c638e00f5ccbc6a07b3fda5.py	StandardScaler	preprocessing.StandardScaler()	808	9	808	39	-4109590464833350637	preprocessing.StandardScaler().fit(data_all)	808	9	808	53	-5793385821775817033
/cb-target/python/b3/4b/42759b1df0df36e430e07e2e010a471c245d4c638e00f5ccbc6a07b3fda5.py	StandardScaler	preprocessing.StandardScaler()	898	9	898	39	3212573891974485121	preprocessing.StandardScaler().fit(data_all)	898	9	898	53	6655844514953673283
/cb-target/python/b3/4b/42759b1df0df36e430e07e2e010a471c245d4c638e00f5ccbc6a07b3fda5.py	StandardScaler	preprocessing.StandardScaler()	995	9	995	39	2177894341388194105	preprocessing.StandardScaler().fit(data_all)	995	9	995	53	-2162684813769921708
/cb-target/python/b3/4b/42759b1df0df36e430e07e2e010a471c245d4c638e00f5ccbc6a07b3fda5.py	StandardScaler	preprocessing.StandardScaler()	1053	9	1053	39	-2368617427774368711	preprocessing.StandardScaler().fit(data_all)	1053	9	1053	53	5285801636524541905
/cb-target/python/b3/4b/42759b1df0df36e430e07e2e010a471c245d4c638e00f5ccbc6a07b3fda5.py	StandardScaler	preprocessing.StandardScaler()	1117	9	1117	39	-6866686851267372492	preprocessing.StandardScaler().fit(data_all)	1117	9	1117	53	6926610646359586333
/cb-target/python/b3/4b/42759b1df0df36e430e07e2e010a471c245d4c638e00f5ccbc6a07b3fda5.py	StandardScaler	preprocessing.StandardScaler()	1184	9	1184	39	-3407497785492478432	preprocessing.StandardScaler().fit(data_all)	1184	9	1184	53	1255967217310676487
/cb-target/python/b3/4b/42759b1df0df36e430e07e2e010a471c245d4c638e00f5ccbc6a07b3fda5.py	StandardScaler	preprocessing.StandardScaler()	1252	9	1252	39	-3631872843970135916	preprocessing.StandardScaler().fit(data_all)	1252	9	1252	53	-6624497702024104679
/cb-target/python/b3/4b/42759b1df0df36e430e07e2e010a471c245d4c638e00f5ccbc6a07b3fda5.py	LabelEncoder	preprocessing.LabelEncoder()	1321	10	1321	38	1986003156417622331	encoder.fit(y)	1322	0	1322	14	7779494550109469016
/cb-target/python/b3/4b/42759b1df0df36e430e07e2e010a471c245d4c638e00f5ccbc6a07b3fda5.py	LabelEncoder	preprocessing.LabelEncoder()	1465	10	1465	38	322580233824011916	encoder.fit(y)	1466	0	1466	14	-8878381777310009824
/cb-target/python/b3/4b/42759b1df0df36e430e07e2e010a471c245d4c638e00f5ccbc6a07b3fda5.py	AdaBoostClassifier	"AdaBoostClassifier(base_estimator=cls2,\n                                learning_rate=learning_rate,\n                                n_estimators=n_estimators,\n                                algorithm=""SAMME.R"")"	1018	15	1021	52	6812059693064503150	ada_real.fit(scaler.transform(data_all[train,:])[:,candidat_f],y[train])	1023	4	1023	76	1425370191004017040
/cb-target/python/b3/4b/42759b1df0df36e430e07e2e010a471c245d4c638e00f5ccbc6a07b3fda5.py	SelectKBest	SelectKBest(f_classif , k=108)	1055	10	1055	40	-6316216284475552802	SelectKBest(f_classif , k=108).fit(data_all, y)	1055	10	1055	57	4275756708677427757
/cb-target/python/a8/4d/fcf2dde9b4cc53c46f92812e90d99e28f6711ffd1093e3b3ebf3bafd629e.py	KNeighborsClassifier	KNeighborsClassifier(n_neighbors=1)	25	6	25	41	-7899178617482507622	knn.fit(x, y)	28	0	28	13	8062701795962089310
/cb-target/python/a8/4d/fcf2dde9b4cc53c46f92812e90d99e28f6711ffd1093e3b3ebf3bafd629e.py	KNeighborsClassifier	KNeighborsClassifier(n_neighbors=1)	37	6	37	41	1669830636740730905	knn.fit(X_train, y_train)	38	0	38	25	3183484944983906749
/cb-target/python/a8/4d/fcf2dde9b4cc53c46f92812e90d99e28f6711ffd1093e3b3ebf3bafd629e.py	KNeighborsClassifier	KNeighborsClassifier(n_neighbors=5)	45	6	45	41	-645685264668806271	knn.fit(X_train, y_train)	46	0	46	25	-2223709562642695735
/cb-target/python/17/12/f9361d2b294b817e900ec510621cb8a98a0fed4841b305e75b38fecc45e2.py	SVC	SVC(kernel='precomputed', C=0.99)	382	8	382	41	-1659214195599672231	model.fit(G, y_train)	383	0	383	21	8262305381520578093
/cb-target/python/17/12/f9361d2b294b817e900ec510621cb8a98a0fed4841b305e75b38fecc45e2.py	SVC	SVC(kernel='precomputed', C=i)	364	12	364	42	9042721543727927756	model.fit(G, y_train)	365	4	365	25	-2801024077710493801
/cb-target/python/17/12/f9361d2b294b817e900ec510621cb8a98a0fed4841b305e75b38fecc45e2.py	GridSearchCV	GridSearchCV(svr, parameters)	44	10	44	39	-9132245472245351169	clf.fit(x, y)	45	4	45	17	1623840008623905276
/cb-target/python/17/12/f9361d2b294b817e900ec510621cb8a98a0fed4841b305e75b38fecc45e2.py	SVR	SVR(kernel='linear', C=max(err))	173	8	173	40	-8248850658002148919	model.fit(X.reshape(-1,1), y)	174	0	174	29	-7782392742398897278
/cb-target/python/17/12/f9361d2b294b817e900ec510621cb8a98a0fed4841b305e75b38fecc45e2.py	SVR	SVR(kernel='rbf', gamma=6, coef0=1, C=i)	200	12	200	52	-6580589914304514171	model.fit(X.reshape(-1,1), y)	201	4	201	33	-574488672546879149
/cb-target/python/17/12/f9361d2b294b817e900ec510621cb8a98a0fed4841b305e75b38fecc45e2.py	SVR	SVR(kernel='rbf', gamma=6, coef0=1, C=i)	207	8	207	48	4831434714762092663	model.fit(X.reshape(-1,1), y)	208	0	208	29	-3380229226805202371
/cb-target/python/17/12/f9361d2b294b817e900ec510621cb8a98a0fed4841b305e75b38fecc45e2.py	SVR	SVR(kernel='poly', degree=3, gamma=6, coef0=1, C=i)	183	12	183	63	5682345876997030284	model.fit(X.reshape(-1,1), y)	184	4	184	33	5896124046118152397
/cb-target/python/17/12/f9361d2b294b817e900ec510621cb8a98a0fed4841b305e75b38fecc45e2.py	SVR	SVR(kernel='poly', degree=3, gamma=6, coef0=1, C=i)	190	8	190	59	-2654055628941818431	model.fit(X.reshape(-1,1), y)	191	0	191	29	7130259625051483423
/cb-target/python/17/12/f9361d2b294b817e900ec510621cb8a98a0fed4841b305e75b38fecc45e2.py	SVR	SVR(kernel='linear', C=i)	166	12	166	37	1750999419679341946	model.fit(X.reshape(-1,1), y)	167	4	167	33	4083388294353726822
/cb-target/python/37/a3/785a40b410f40ff3f506057250c081f19cdd583ca60c9b91cdada4d90723.py	LinearRegression	LinearRegression(fit_intercept=True)	221	14	221	50	-4791918003742968169	modelGround.fit(X, y)	226	0	226	21	-3837395498805847784
/cb-target/python/37/a3/785a40b410f40ff3f506057250c081f19cdd583ca60c9b91cdada4d90723.py	LinearRegression	LinearRegression(fit_intercept=True)	251	11	251	47	-8550657145493015488	modelAir.fit(X, y)	256	0	256	18	-1948792826456527141
/cb-target/python/37/a3/785a40b410f40ff3f506057250c081f19cdd583ca60c9b91cdada4d90723.py	LinearRegression	LinearRegression(fit_intercept=True)	281	14	281	50	4080685359297943007	modelForest.fit(X, y)	286	0	286	21	-8617815559411480193
/cb-target/python/37/a3/785a40b410f40ff3f506057250c081f19cdd583ca60c9b91cdada4d90723.py	LinearRegression	LinearRegression(fit_intercept=True)	311	13	311	49	752425923352656879	modelWater.fit(X, y)	316	0	316	20	4858680299605394249
/cb-target/python/37/a3/785a40b410f40ff3f506057250c081f19cdd583ca60c9b91cdada4d90723.py	LinearRegression	LinearRegression(fit_intercept=True)	678	14	678	50	8723142928038977042	modelPWater.fit(X, y)	695	0	695	21	-9210636811876109392
/cb-target/python/37/a3/785a40b410f40ff3f506057250c081f19cdd583ca60c9b91cdada4d90723.py	LinearRegression	LinearRegression(fit_intercept=True)	679	14	679	50	6971505908761613137	modelTWater.fit(A, b)	696	0	696	21	215905971239743059
/cb-target/python/37/a3/785a40b410f40ff3f506057250c081f19cdd583ca60c9b91cdada4d90723.py	LinearRegression	LinearRegression(fit_intercept=True)	680	15	680	51	-7992262828634865856	modelTrWater.fit(L, m)	697	0	697	22	-7068874021057486231
/cb-target/python/37/a3/785a40b410f40ff3f506057250c081f19cdd583ca60c9b91cdada4d90723.py	LinearRegression	LinearRegression(fit_intercept=True)	681	16	681	52	6068423547964675873	modelTTrWater.fit(R, s)	698	0	698	23	-1029454302758237141
/cb-target/python/3d/d6/ffc4afb8d04c51b2903cc13ac32819923a2ba9ab3be9b253e498c9193997.py	LinearRegression	LinearRegression()	125	8	125	26	4778868036780523099	model.fit(Xtrain, Ytrain)	126	9	126	34	2595873069204964511
/cb-target/python/3d/d6/ffc4afb8d04c51b2903cc13ac32819923a2ba9ab3be9b253e498c9193997.py	LinearRegression	LinearRegression()	134	9	134	27	189759789427014824	model2.fit(Xtrain2, Ytrain2)	135	9	135	37	-3073894352240524478
/cb-target/python/3d/d6/ffc4afb8d04c51b2903cc13ac32819923a2ba9ab3be9b253e498c9193997.py	RandomForestRegressor	RandomForestRegressor()	279	13	279	36	8618614233857422275	forest_reg.fit(Xtrain, Ytrain.ravel())	280	0	280	38	-7610104198602121309
/cb-target/python/c6/7e/3cc34d1661d6b0e9211f569ef1561fbfab38497da37d312397800771dafd.py	Lasso	linear_model.Lasso()	235	8	235	28	-8073245291883721220	lasso.fit(sj_train_subtrain, sj_labels_subtrain)	236	0	236	48	-5030286062285135492
/cb-target/python/c6/7e/3cc34d1661d6b0e9211f569ef1561fbfab38497da37d312397800771dafd.py	Lasso	Lasso(alpha=i)	254	12	254	26	5939420086203501236	Lasso(alpha=i).fit(sj_train_subtrain, sj_labels_subtrain)	254	12	254	69	5020298103331050176
/cb-target/python/c6/7e/3cc34d1661d6b0e9211f569ef1561fbfab38497da37d312397800771dafd.py	GridSearchCV	GridSearchCV(DecisionTreeRegressor(), parameters, n_jobs=4)	372	6	372	65	450517965922713518	clf.fit(x,y)	373	0	373	12	6968166553855895985
/cb-target/python/c6/7e/3cc34d1661d6b0e9211f569ef1561fbfab38497da37d312397800771dafd.py	DecisionTreeRegressor	DecisionTreeRegressor()	311	6	311	29	-8168985141033634735	clf.fit(x,y)	312	0	312	12	3270198021267087973
/cb-target/python/1e/c9/dc880bdee67ed854d8b9359c67c38eff13a56f8f0933b8b01e3660547432.py	GridSearchCV	model_selection.GridSearchCV(estimator = model,\n                                     param_grid = parameters,\n                                     cv = 5,\n                                     scoring = 'recall')	499	8	502	56	-6029733325636843604	model.fit(X_train, Y_train)	503	12	503	39	2697469892207376469
/cb-target/python/1e/c9/dc880bdee67ed854d8b9359c67c38eff13a56f8f0933b8b01e3660547432.py	GridSearchCV	model_selection.GridSearchCV(estimator = model,\n                                     param_grid = parameters,\n                                     cv = 5,\n                                     scoring = 'recall_score')	521	8	524	62	7061774014515037830	model.fit(X_train, Y_train)	525	12	525	39	3010168279604681077
/cb-target/python/1e/c9/dc880bdee67ed854d8b9359c67c38eff13a56f8f0933b8b01e3660547432.py	GridSearchCV	model_selection.GridSearchCV(estimator = model,\n                                     param_grid = parameters,\n                                     cv = 5)	467	8	469	44	7587328141063166342	model.fit(X_train, Y_train)	470	12	470	39	1196095066880540730
/cb-target/python/83/03/19587bb26597b9bf8b8f67a45cffa5eece5f0c553d0def3f9046293d76fd.py	RANSACRegressor	RANSACRegressor(LinearRegression())	50	12	50	47	5004302554389852366	reg_model.fit(X_train, y_train)	53	0	53	31	-6919737894427969742
/cb-target/python/b5/0e/343857875796a37403c85de4a9aaa720f8bf2af01033e7adf48fc9b9e93c.py	RandomForestClassifier	RandomForestClassifier(n_estimators=10)	179	6	179	45	7401736531697003005	clf.fit(X[100:], Y[100:])	180	6	180	31	-1864813051671899114
/cb-target/python/93/d8/eddc70d71a934ffa5706ea97ec926731fc6d45ceb9f863b19ed9e5bb1fc1.py	RandomForestRegressor	RandomForestRegressor(n_estimators=2000, n_jobs=-1)	78	10	78	61	3111322494978448826	rtr.fit(X, y)	79	4	79	17	8019564647837496005
/cb-target/python/93/d8/eddc70d71a934ffa5706ea97ec926731fc6d45ceb9f863b19ed9e5bb1fc1.py	RandomForestRegressor	RandomForestRegressor(n_estimators=2000, n_jobs=-1)	110	6	110	57	7734428356197588314	rtr.fit(X, y)	111	0	111	13	-342400961614360508
/cb-target/python/04/bb/7225fc1fb4c169f07cf611ee49abceb4ccfd48dd70aa1ceba390f1ee9d06.py	RandomForestRegressor	ensemble.RandomForestRegressor(n_estimators=200, max_depth=10, min_samples_leaf=4, max_features=0.2, n_jobs=-1, random_state=0)	271	8	271	135	-4829018772988811487	model.fit(train_X, train_y)	272	0	272	27	-5121280317543712568
/cb-target/python/04/bb/7225fc1fb4c169f07cf611ee49abceb4ccfd48dd70aa1ceba390f1ee9d06.py	LabelEncoder	preprocessing.LabelEncoder()	239	14	239	42	-3656818247088344356	lbl.fit(list(train_df[f].values))	240	8	240	41	-5495366730624962322
/cb-target/python/d6/a3/e077548531ab4c08d772335f393c863e9409a117ff3a35badaba5f5a1332.py	LinearSVC	svm.LinearSVC()	84	6	84	21	8687348206600133615	svm.fit(train_features, train_labels)	85	0	85	37	-1894103877737300922
/cb-target/python/16/8f/57e9d01e200bfeef0feb64990d4a854f6a538a07338b5bd09e3931c47935.py	KNeighborsClassifier	neighbors.KNeighborsClassifier(n_neighbors, weights=weights)	41	10	41	70	-7923152109362591528	clf.fit(X, y)	42	4	42	17	3433761563233631912
/cb-target/python/16/8f/57e9d01e200bfeef0feb64990d4a854f6a538a07338b5bd09e3931c47935.py	GridSearchCV	GridSearchCV(KNeighborsClassifier(),\n                        knn_params,\n                        verbose=True)	140	11	142	37	6161965894882309064	best_clf.fit(X_train, y)	145	0	145	24	-7778221030096824893
/cb-target/python/16/8f/57e9d01e200bfeef0feb64990d4a854f6a538a07338b5bd09e3931c47935.py	LabelEncoder	preprocessing.LabelEncoder()	97	25	97	53	3959334749542497539	auto_brand_encoder.fit(train_df['auto_brand'])	98	4	98	50	8916253168175648182
/cb-target/python/16/8f/57e9d01e200bfeef0feb64990d4a854f6a538a07338b5bd09e3931c47935.py	LabelEncoder	preprocessing.LabelEncoder()	99	21	99	49	-7962821915714996695	target_encoder.fit(train_df['too_much'])	100	4	100	44	-2346502392689567643
/cb-target/python/16/8f/57e9d01e200bfeef0feb64990d4a854f6a538a07338b5bd09e3931c47935.py	LabelEncoder	preprocessing.LabelEncoder()	101	21	101	49	75072459486000239	region_encoder.fit(regions_train)	103	4	103	37	-6235379549719287941
/cb-target/python/9e/bd/ac7dbfd01e28e201531eedf59bf35d7341bd040ae4467e4f9942c79fb6c2.py	GridSearchCV	GridSearchCV(clf, parameters, scoring = f1_scorer)	220	11	220	61	2623072403656774618	grid_obj.fit(X_train, y_train)	223	11	223	41	273435372479804684
/cb-target/python/fc/e7/fce2ab49e1780d4a89de032684333891bdbc46fdb1c18e84972a31e108f7.py	RandomForestClassifier	ensemble.RandomForestClassifier()	77	4	77	37	7469568849329726594	clf.fit(df.icol([2,4,6,7,9,11,12]),df.Survived)	88	0	88	47	4728285041302714087
/cb-target/python/45/14/0f5e60249326fd32b47de2fdacf043d1468c0df3157f007246b7696c224b.py	RandomForestClassifier	RandomForestClassifier(n_estimators=800, max_features=450, oob_score=True)	370	10	370	84	3327328811499464442	rfclass.fit(X, y)	371	0	371	17	6034681770312213439
/cb-target/python/45/14/0f5e60249326fd32b47de2fdacf043d1468c0df3157f007246b7696c224b.py	LogisticRegression	LogisticRegression(C=1e9)	418	9	418	34	-20075588154888867	logreg.fit(X_train, y_train)	419	0	419	28	-3283567097559739546
/cb-target/python/45/14/0f5e60249326fd32b47de2fdacf043d1468c0df3157f007246b7696c224b.py	LogisticRegression	LogisticRegression(C=1e9)	462	13	462	38	3711506098178929131	logreg.fit(X_train, y_train)	463	4	463	32	-8257473798943465056
/cb-target/python/45/14/0f5e60249326fd32b47de2fdacf043d1468c0df3157f007246b7696c224b.py	DecisionTreeClassifier	DecisionTreeClassifier(max_depth=10)	284	12	284	48	-2483466907444767366	treeclass.fit(X, y)	285	0	285	19	8665748278051881439
/cb-target/python/45/14/0f5e60249326fd32b47de2fdacf043d1468c0df3157f007246b7696c224b.py	RandomizedSearchCV	RandomizedSearchCV(rfclass, param_dist, n_iter=50, scoring='roc_auc', cv=5)	348	7	348	82	-3927580857995332318	rand.fit(X, y)	349	0	349	14	-2934640841336250264
/cb-target/python/8b/6e/f590943c685580b8c459f8dda484c5d6cfd0ebaf1d71066d6a7964238672.py	LassoLarsCV	LassoLarsCV(cv=10, precompute=False)	66	6	66	42	7679673808827545838	LassoLarsCV(cv=10, precompute=False).fit(training_data, training_target)	66	6	66	78	7577258303983321546
/cb-target/python/db/16/8f728f732ad1bbe4c540b31a8b961fdc17678e2dcdc36d643ee2f9b93248.py	LinearRegression	LinearRegression(fit_intercept=True)	74	5	74	41	-9167018055591242126	lr.fit(X, y)	94	0	94	12	-3979200870480277506
/cb-target/python/8f/8c/f479afc0cd3131461ab09a2f076daecb4cb5ef2cddc910152ce2a773cc0d.py	RandomForestClassifier	RandomForestClassifier(n_estimators=200, criterion='entropy', max_depth=3)	272	10	272	84	8813817094821377866	clf.fit(x, y.ravel())	273	13	273	34	-286724009184337222
/cb-target/python/8f/8c/f479afc0cd3131461ab09a2f076daecb4cb5ef2cddc910152ce2a773cc0d.py	DecisionTreeClassifier	DecisionTreeClassifier(criterion='entropy', min_samples_leaf=3)	34	10	34	73	5074816309222088650	clf.fit(x, y)	35	13	35	26	6717053560868729161
/cb-target/python/8f/8c/f479afc0cd3131461ab09a2f076daecb4cb5ef2cddc910152ce2a773cc0d.py	Pipeline	Pipeline([('sc', StandardScaler()),\n               ('clf', LogisticRegression()) ])	96	5	97	47	-6695438265553993096	lr.fit(x, y.ravel())	98	0	98	20	8055739354880022051
/cb-target/python/8f/8c/f479afc0cd3131461ab09a2f076daecb4cb5ef2cddc910152ce2a773cc0d.py	DecisionTreeRegressor	DecisionTreeRegressor(criterion='mse', max_depth=deep)	239	6	239	60	-9002502175655932986	reg.fit(x, y)	240	5	240	18	641723666194131682
/cb-target/python/8f/8c/f479afc0cd3131461ab09a2f076daecb4cb5ef2cddc910152ce2a773cc0d.py	DecisionTreeRegressor	DecisionTreeRegressor(criterion='mse', max_depth=9)	151	6	151	57	2133789954013590892	reg.fit(x, y)	152	5	152	18	8518615373925795620
/cb-target/python/8f/8c/f479afc0cd3131461ab09a2f076daecb4cb5ef2cddc910152ce2a773cc0d.py	DecisionTreeRegressor	"DecisionTreeRegressor(criterion=""mse"",max_depth=5)"	194	6	194	56	2890142526805605067	model.fit(x_train,y_train)	198	0	198	26	-2826808377176132769
/cb-target/python/a5/9f/b9a8c23465283f5d60b9c4c9c918e710a7b18824233d88b524cc34bc13df.py	DecisionTreeClassifier	DecisionTreeClassifier(criterion='entropy',\n                              max_depth=None,\n                              random_state=1)	433	7	435	45	-7288963061511046869	tree.fit(X_train, y_train)	451	7	451	33	-6581886109286896561
/cb-target/python/a5/9f/b9a8c23465283f5d60b9c4c9c918e710a7b18824233d88b524cc34bc13df.py	DecisionTreeClassifier	"DecisionTreeClassifier(criterion=""entropy"", max_depth=1, random_state=0)"	524	7	524	79	-3919338829151619690	tree.fit(X_train, y_train)	530	7	530	33	-2655147739105055171
/cb-target/python/a5/9f/b9a8c23465283f5d60b9c4c9c918e710a7b18824233d88b524cc34bc13df.py	BaggingClassifier	BaggingClassifier(base_estimator=tree,\n                        n_estimators=500,\n                        max_samples=1.0,\n                        max_features=1.0,\n                        bootstrap=True,\n                        bootstrap_features=False,\n                        n_jobs=1,\n                        random_state=1)	437	6	444	39	-6631081550005546138	bag.fit(X_train, y_train)	460	6	460	31	3284195308021996316
/cb-target/python/a5/9f/b9a8c23465283f5d60b9c4c9c918e710a7b18824233d88b524cc34bc13df.py	clone	clone(clf)	147	25	147	35	-2455763360925620612	clone(clf).fit(X, self.lablenc_.transform(y))	147	25	147	70	1677970198237753824
/cb-target/python/a5/9f/b9a8c23465283f5d60b9c4c9c918e710a7b18824233d88b524cc34bc13df.py	AdaBoostClassifier	AdaBoostClassifier(base_estimator=tree, n_estimators=500, learning_rate=0.1, random_state=0)	525	6	525	98	7900910235144354064	ada.fit(X_train, y_train)	538	6	538	31	-2576241178854648240
/cb-target/python/6f/39/11014482ea404c0cae8d60954a28526636085af2e1ad3aa5dd895757ab12.py	RandomForestClassifier	RandomForestClassifier(random_state = 2)	152	5	152	45	437315778665363328	RandomForestClassifier(random_state = 2).fit(X_train, Y_train)	152	5	152	67	529505623925091928
/cb-target/python/6f/39/11014482ea404c0cae8d60954a28526636085af2e1ad3aa5dd895757ab12.py	OneVsRestClassifier	OneVsRestClassifier(RandomForestClassifier(random_state=2))	122	13	122	72	5668008721394834027	OneVsRestClassifier(RandomForestClassifier(random_state=2)).fit(X_train, Y_train)	122	13	122	94	2776253790481412473
/cb-target/python/31/c9/898d707a59a2ba3a0740c58cb5de0d9d3735daee578992fdb41bf80b00b4.py	LogisticRegression	LogisticRegression()	177	5	177	25	456324281286997726	lm.fit(X,y)	179	9	179	20	-22822870258763533
/cb-target/python/31/c9/898d707a59a2ba3a0740c58cb5de0d9d3735daee578992fdb41bf80b00b4.py	LogisticRegression	LogisticRegression()	249	6	249	26	-5879172984226656775	lm2.fit(x,Y)	251	10	251	22	-3236742408784066852
/cb-target/python/31/c9/898d707a59a2ba3a0740c58cb5de0d9d3735daee578992fdb41bf80b00b4.py	LogisticRegression	LogisticRegression()	283	6	283	26	4664366301189773561	lm3.fit(x_train, Y_train)	285	10	285	35	2481588221706296871
/cb-target/python/31/c9/898d707a59a2ba3a0740c58cb5de0d9d3735daee578992fdb41bf80b00b4.py	LogisticRegression	LogisticRegression()	310	6	310	26	8329150926810064402	lm4.fit(x_train,Y_train)	312	10	312	34	-3384288016696395873
/cb-target/python/cc/26/77903c125e783a1be1681a10caf4c20702e6edc82469216ce25b5e0d68ab.py	BaggingRegressor	BaggingRegressor(rf, n_estimators=45, max_samples=0.1, random_state=25)	93	6	93	77	6604268670498095116	clf.fit(X_train, y_train)	94	0	94	25	-7024230334674724548
/cb-target/python/e6/88/8581e3482bd732a5a3f229a3c2a7e48feed36e134e998a3b1e61f57c76bc.py	GridSearchCV	GridSearchCV(ensemble, gbr_params, scoring = simple_rmse)	179	6	179	63	-1934641284503890783	gs3.fit(train_x,train_y)	180	0	180	24	2618455967643206387
/cb-target/python/e6/88/8581e3482bd732a5a3f229a3c2a7e48feed36e134e998a3b1e61f57c76bc.py	GridSearchCV	GridSearchCV(ensemble, gbr_params, scoring = simple_rmse)	223	7	223	64	-6489989400908034721	gs3b.fit(comb,train_y)	224	0	224	22	2254395468702348568
/cb-target/python/e6/88/8581e3482bd732a5a3f229a3c2a7e48feed36e134e998a3b1e61f57c76bc.py	GridSearchCV	GridSearchCV(ensemble, gbr_params, scoring = simple_rmse)	267	7	267	64	-1145048473732167045	gs3c.fit(comb2,train_y)	268	0	268	23	171933315808756026
/cb-target/python/e6/88/8581e3482bd732a5a3f229a3c2a7e48feed36e134e998a3b1e61f57c76bc.py	GBR	GBR(n_estimators =gs3c.best_params_['n_estimators'],max_features =gs3c.best_params_['max_features'], max_depth =gs3c.best_params_['max_depth'], learning_rate =gs3c.best_params_['learning_rate'], loss=gs3c.best_params_['loss'])	294	15	294	241	-6022399016416451702	ls_gbr_best3.fit(comb2, train_y)	303	0	303	32	1579328302630842445
/cb-target/python/e6/88/8581e3482bd732a5a3f229a3c2a7e48feed36e134e998a3b1e61f57c76bc.py	GBR	GBR(n_estimators =gs3.best_params_['n_estimators'],max_features =gs3.best_params_['max_features'], max_depth =gs3.best_params_['max_depth'], learning_rate =gs3.best_params_['learning_rate'], loss=gs3.best_params_['loss'])	205	14	205	235	-3082312479722333555	ls_gbr_best.fit(train_x, train_y)	301	0	301	33	3443344380112670444
/cb-target/python/e6/88/8581e3482bd732a5a3f229a3c2a7e48feed36e134e998a3b1e61f57c76bc.py	GBR	GBR(n_estimators =gs3b.best_params_['n_estimators'],max_features =gs3b.best_params_['max_features'], max_depth =gs3b.best_params_['max_depth'], learning_rate =gs3b.best_params_['learning_rate'], loss=gs3b.best_params_['loss'])	249	15	249	241	8599318608747420442	ls_gbr_best2.fit(comb, train_y)	302	0	302	31	-2708165357829419761
/cb-target/python/94/6b/de1b5c354a8ee18ddb62c7d299e1a120102a729d3327f5d93bf60544a3f1.py	LinearRegression	LinearRegression()	530	6	530	24	3705138593693245332	clf.fit(Xtrain, ytrain_cas)	532	11	532	38	4774379491809406778
/cb-target/python/94/6b/de1b5c354a8ee18ddb62c7d299e1a120102a729d3327f5d93bf60544a3f1.py	LinearRegression	LinearRegression()	530	6	530	24	3705138593693245332	clf.fit(Xtrain, ytrain_ct)	538	10	538	36	3907162782568341818
/cb-target/python/94/6b/de1b5c354a8ee18ddb62c7d299e1a120102a729d3327f5d93bf60544a3f1.py	LinearRegression	LinearRegression()	530	6	530	24	3705138593693245332	clf.fit(Xtrain, ytrain_reg)	535	15	535	42	6138389249015200610
/cb-target/python/94/6b/de1b5c354a8ee18ddb62c7d299e1a120102a729d3327f5d93bf60544a3f1.py	GradientBoostingRegressor	GradientBoostingRegressor(n_estimators=100, max_depth=3, loss='ls')	1427	6	1427	73	427007393363919665	gbr.fit(Xtrain,ytrain_reg)	1432	8	1432	34	418055049813117351
/cb-target/python/94/6b/de1b5c354a8ee18ddb62c7d299e1a120102a729d3327f5d93bf60544a3f1.py	GradientBoostingRegressor	GradientBoostingRegressor(n_estimators=100, max_depth=3, loss='ls')	1427	6	1427	73	427007393363919665	gbr.fit(Xtrain, ytrain_cas)	1429	8	1429	35	710497957141609464
/cb-target/python/94/6b/de1b5c354a8ee18ddb62c7d299e1a120102a729d3327f5d93bf60544a3f1.py	GradientBoostingRegressor	GradientBoostingRegressor(n_estimators=1000, max_depth=1, learning_rate=1.0)	1444	6	1444	82	3942848154548538173	est.fit(X_train, y_train)	1445	0	1445	25	-5570213210588822543
/cb-target/python/94/6b/de1b5c354a8ee18ddb62c7d299e1a120102a729d3327f5d93bf60544a3f1.py	Ridge	Ridge(alpha=rdgCV.alpha_)	932	6	932	31	6020805173410035350	clf.fit(Xtrain,ytrain_reg)	937	10	937	36	2063061554848324628
/cb-target/python/94/6b/de1b5c354a8ee18ddb62c7d299e1a120102a729d3327f5d93bf60544a3f1.py	Ridge	Ridge(alpha=rdgCV.alpha_)	932	6	932	31	6020805173410035350	clf.fit(Xtrain,ytrain_ct)	940	12	940	37	1959503180310272519
/cb-target/python/94/6b/de1b5c354a8ee18ddb62c7d299e1a120102a729d3327f5d93bf60544a3f1.py	Ridge	Ridge(alpha=rdgCV.alpha_)	932	6	932	31	6020805173410035350	clf.fit(Xtrain, ytrain_cas)	934	10	934	37	-970397322846576997
/cb-target/python/94/6b/de1b5c354a8ee18ddb62c7d299e1a120102a729d3327f5d93bf60544a3f1.py	RandomForestRegressor	RandomForestRegressor()	661	6	661	29	5567627624163754813	clf.fit(Xtrain,ytrain_reg)	666	7	666	33	-7626839361068764452
/cb-target/python/94/6b/de1b5c354a8ee18ddb62c7d299e1a120102a729d3327f5d93bf60544a3f1.py	RandomForestRegressor	RandomForestRegressor()	661	6	661	29	5567627624163754813	clf.fit(Xtrain,ytrain_ct)	669	9	669	34	-2874199805610728500
/cb-target/python/94/6b/de1b5c354a8ee18ddb62c7d299e1a120102a729d3327f5d93bf60544a3f1.py	RandomForestRegressor	RandomForestRegressor()	661	6	661	29	5567627624163754813	clf.fit(Xtrain, ytrain_cas)	663	7	663	34	-1451312081762042672
/cb-target/python/94/6b/de1b5c354a8ee18ddb62c7d299e1a120102a729d3327f5d93bf60544a3f1.py	RandomForestRegressor	RandomForestRegressor(bootstrap=True, compute_importances=None,\n           criterion='mse', max_depth=12, max_features='auto',\n           max_leaf_nodes=None, min_density=None, min_samples_leaf=2,\n           min_samples_split=2, n_estimators=1000, n_jobs=1,\n           oob_score=False, random_state=42, verbose=0)	735	8	739	55	-7991071184553238002	rf_op.fit(Xtrain, ytrain_ct)	741	0	741	28	-4955525940299628435
/cb-target/python/94/6b/de1b5c354a8ee18ddb62c7d299e1a120102a729d3327f5d93bf60544a3f1.py	Lasso	linear_model.Lasso(alpha=0.1)	1297	6	1297	35	-2946675071471444598	clf.fit(Xtrain,ytrain_ct)	1435	10	1435	35	-7513263213686887306
/cb-target/python/94/6b/de1b5c354a8ee18ddb62c7d299e1a120102a729d3327f5d93bf60544a3f1.py	Lasso	linear_model.Lasso(alpha=0.1)	1297	6	1297	35	-2946675071471444598	clf.fit([[0,0], [1, 1], [2, 2]], [0, 1, 2])	1298	0	1298	43	-3665883459201479756
/cb-target/python/94/6b/de1b5c354a8ee18ddb62c7d299e1a120102a729d3327f5d93bf60544a3f1.py	Lasso	Lasso(alpha=alpha)	1204	8	1204	26	6905705788416539955	lasso.fit(Xtrain, ytrain_ct)	1206	15	1206	43	3718702963583045435
/cb-target/python/94/6b/de1b5c354a8ee18ddb62c7d299e1a120102a729d3327f5d93bf60544a3f1.py	GridSearchCV	GridSearchCV(RandomForestRegressor(n_jobs=1, n_estimators=1000), tuned_parameters, cv=3,\n                   verbose=2, scoring=rmsle_scorer)	721	6	722	51	6801691733465910280	GridSearchCV(RandomForestRegressor(n_jobs=1, n_estimators=1000), tuned_parameters, cv=3,\n                   verbose=2, scoring=rmsle_scorer).fit(Xtrain, ytrain_ct)	721	6	722	74	-2952279392760127139
/cb-target/python/94/6b/de1b5c354a8ee18ddb62c7d299e1a120102a729d3327f5d93bf60544a3f1.py	RidgeCV	RidgeCV(alphas=[0.1, 1.0, 10.0], cv=None, fit_intercept=True, scoring=rmsle_scorer, normalize=False)	864	8	864	108	7923695150689573254	rdgCV.fit(Xtrain,ytrain_reg)	869	8	869	36	-5867447096754494185
/cb-target/python/94/6b/de1b5c354a8ee18ddb62c7d299e1a120102a729d3327f5d93bf60544a3f1.py	RidgeCV	RidgeCV(alphas=[0.1, 1.0, 10.0], cv=None, fit_intercept=True, scoring=rmsle_scorer, normalize=False)	864	8	864	108	7923695150689573254	rdgCV.fit(Xtrain, ytrain_cas)	866	8	866	37	-4828527677525657216
/cb-target/python/94/6b/de1b5c354a8ee18ddb62c7d299e1a120102a729d3327f5d93bf60544a3f1.py	RidgeCV	RidgeCV(alphas=[0.1, 1.0, 10.0], cv=None, fit_intercept=True, scoring=rmsle_scorer, normalize=False)	864	8	864	108	7923695150689573254	rdgCV.fit(Xtrain,ytrain_ct)	872	10	872	37	449294936981006916
/cb-target/python/94/6b/de1b5c354a8ee18ddb62c7d299e1a120102a729d3327f5d93bf60544a3f1.py	ElasticNet	ElasticNet(alpha=alpha)	1215	7	1215	30	6191642489087093748	enet.fit(Xtrain, ytrain_ct)	1217	14	1217	41	-6499976428450009643
/cb-target/python/94/6b/de1b5c354a8ee18ddb62c7d299e1a120102a729d3327f5d93bf60544a3f1.py	SVR	SVR(kernel='rbf', C=1e3, gamma=0.1)	1320	10	1320	45	-7862419182788406566	svr_rbf.fit(Xtrain, ytrain_ct)	1323	8	1323	38	-2732474484624334440
/cb-target/python/94/6b/de1b5c354a8ee18ddb62c7d299e1a120102a729d3327f5d93bf60544a3f1.py	SVR	SVR(kernel='poly', C=1e3, degree=2)	1322	11	1322	46	-7296276707796565509	svr_poly.fit(Xtrain, ytrain_ct)	1325	9	1325	40	1552999987716311995
/cb-target/python/94/6b/de1b5c354a8ee18ddb62c7d299e1a120102a729d3327f5d93bf60544a3f1.py	SVR	SVR(kernel='linear', C=1e3)	1321	10	1321	37	-6319963456011195551	svr_lin.fit(Xtrain, ytrain_ct)	1324	8	1324	38	-1024055985539953165
/cb-target/python/94/6b/de1b5c354a8ee18ddb62c7d299e1a120102a729d3327f5d93bf60544a3f1.py	ExtraTreesRegressor	ExtraTreesRegressor(n_estimators=1000, min_samples_split=2, min_samples_leaf=2, max_features='auto', n_jobs=1)	1554	5	1554	115	7798932530794566805	ET.fit(x_data, y_data)	1555	0	1555	22	7011127298727702079
/cb-target/python/94/ff/ee6869392387d4a89a6fe09b36223c9adc57321f5ff1cd9286164507a97b.py	PCA	PCA()	68	6	68	11	-1743766765071597329	PCA().fit(X)	68	6	68	18	8458927590448253630
/cb-target/python/66/c7/4da080f38aeb3e433bd54538cb20c4ac9552270a8f3be078fbd125736cee.py	GMM	mixture.GMM(n_components=i, covariance_type='full', n_iter=100, random_state=0)	205	16	205	95	-6435450938623319858	clusterer.fit(reduced_data)	207	4	207	31	5079935165115428008
/cb-target/python/66/c7/4da080f38aeb3e433bd54538cb20c4ac9552270a8f3be078fbd125736cee.py	PCA	PCA(n_components=2)	171	6	171	25	4272061717078836719	pca.fit(good_data)	172	0	172	18	-5278402071869356965
/cb-target/python/66/c7/4da080f38aeb3e433bd54538cb20c4ac9552270a8f3be078fbd125736cee.py	PCA	PCA(n_components=6)	147	6	147	25	-4715720119404841510	pca.fit(good_data)	150	0	150	18	956800520167384538
/cb-target/python/66/c7/4da080f38aeb3e433bd54538cb20c4ac9552270a8f3be078fbd125736cee.py	DecisionTreeRegressor	DecisionTreeRegressor()	59	16	59	39	3469575812539537223	regressor.fit(X_train, y_train)	60	4	60	35	15477892760954491
/cb-target/python/61/66/b2e7e3c62a531ce1da8eebc339b8224433243d854ccbdd89ec6ab358a31d.py	LinearRegression	LinearRegression()	200	7	200	25	-8611475786909709542	linreg.fit(X,y)	201	0	201	15	2796253769816243000
/cb-target/python/61/66/b2e7e3c62a531ce1da8eebc339b8224433243d854ccbdd89ec6ab358a31d.py	LinearRegression	LinearRegression()	231	9	231	27	-4926027072728859161	linreg.fit(X, y)	232	0	232	16	5419960737651322711
/cb-target/python/61/66/b2e7e3c62a531ce1da8eebc339b8224433243d854ccbdd89ec6ab358a31d.py	KNeighborsClassifier	KNeighborsClassifier(n_neighbors=1)	90	6	90	41	6694162364691778658	knn.fit(X, y)	96	0	96	13	4932107938740805795
/cb-target/python/61/66/b2e7e3c62a531ce1da8eebc339b8224433243d854ccbdd89ec6ab358a31d.py	KNeighborsClassifier	KNeighborsClassifier(n_neighbors=5)	146	4	146	39	5197711876512875916	knn.fit(X,y)	151	0	151	12	-4235611565058289633
/cb-target/python/ea/c9/fb01701e675d96eb1adc4757d15b22a3139ffb66a184ee9d9c45e8024a16.py	LogisticRegression	LogisticRegression()	101	9	101	29	1215388530706905909	_model.fit(X_train, Y_train)	106	0	106	28	-604924017809331735
/cb-target/python/af/d7/d8ee27458dafa9475eb6d1496515546c27af96f3f65babfb38a8dd7092ec.py	GridSearchCV	GridSearchCV(model, PARAMETERS, scoring=SCORING, verbose=True, n_jobs=-1)	243	6	243	79	7730305570979030873	clf.fit(X, Y)	244	0	244	13	-6991933818449091606
/cb-target/python/af/d7/d8ee27458dafa9475eb6d1496515546c27af96f3f65babfb38a8dd7092ec.py	GridSearchCV	GridSearchCV(model, PARAMETERS, scoring=SCORING, verbose=True, n_jobs=-1)	507	6	507	79	-99964488371624839	clf.fit(X, Y)	508	0	508	13	-6886633934820592631
/cb-target/python/af/d7/d8ee27458dafa9475eb6d1496515546c27af96f3f65babfb38a8dd7092ec.py	DTR	DTR(random_state=42)	155	7	155	27	-99979085400247640	tree.fit(X_train, Y_train)	160	0	160	26	-4848884835289681731
/cb-target/python/af/d7/d8ee27458dafa9475eb6d1496515546c27af96f3f65babfb38a8dd7092ec.py	DTR	DTR(max_depth=best_depth, random_state=1)	218	7	218	48	8624559076479335391	tree.fit(X, Y)	219	0	219	14	2006439205661183500
/cb-target/python/af/d7/d8ee27458dafa9475eb6d1496515546c27af96f3f65babfb38a8dd7092ec.py	DTC	DTC(max_depth=2, random_state=1)	431	10	431	42	-3401485235694381826	treeclf.fit(X_train, Y_train)	432	0	432	29	-2467039745920017509
/cb-target/python/af/d7/d8ee27458dafa9475eb6d1496515546c27af96f3f65babfb38a8dd7092ec.py	DTC	DTC(random_state=1)	386	10	386	29	1570747737716417434	treeclf.fit(X_train, Y_train)	387	0	387	29	-6446634848608530640
/cb-target/python/af/d7/d8ee27458dafa9475eb6d1496515546c27af96f3f65babfb38a8dd7092ec.py	DTC	DTC(random_state=1)	397	10	397	29	-3096552107136973887	treeclf.fit(X_train, Y_train)	398	0	398	29	-1335783646479594753
/cb-target/python/af/d7/d8ee27458dafa9475eb6d1496515546c27af96f3f65babfb38a8dd7092ec.py	DTC	DTC(random_state=1)	419	10	419	29	640716685435724161	treeclf.fit(X_train, Y_train)	420	0	420	29	-7509352448637212429
/cb-target/python/af/d7/d8ee27458dafa9475eb6d1496515546c27af96f3f65babfb38a8dd7092ec.py	DTC	DTC(random_state=1)	451	10	451	29	8230758982647739589	treeclf.fit(X_train, Y_train)	452	0	452	29	-4180145332513688016
/cb-target/python/af/d7/d8ee27458dafa9475eb6d1496515546c27af96f3f65babfb38a8dd7092ec.py	DTC	DTC(random_state=1)	477	10	477	29	6079944810275959452	treeclf.fit(X_train, Y_train)	478	0	478	29	5557656171743108965
/cb-target/python/af/d7/d8ee27458dafa9475eb6d1496515546c27af96f3f65babfb38a8dd7092ec.py	DTC	DTC(max_depth=3, random_state=1)	361	10	361	42	390526118201920003	treeclf.fit(X_train, Y_train)	362	0	362	29	-487642528609843431
/cb-target/python/af/d7/d8ee27458dafa9475eb6d1496515546c27af96f3f65babfb38a8dd7092ec.py	DTC	DTC(max_depth=1, random_state=1)	461	10	461	42	4550175451177046969	treeclf.fit(X_train, Y_train)	462	0	462	29	3836811444927669121
/cb-target/python/db/9f/b21ae6f9dc3ba540a48d9e2b8607ee298eff9ff2e2f9bc9508fed62dc38d.py	GBC	GBC()	239	10	239	15	-3966685179403540762	clf.fit(Xtrain.ix[:,2:],asarray(ytrain[0]))	242	4	242	47	2888636303751654885
