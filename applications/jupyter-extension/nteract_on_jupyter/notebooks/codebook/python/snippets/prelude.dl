.type Fid <: number
.type Gid <: number
.type Tid <: number
.type Nid <: number
.type TypeName <: symbol 
.type FieldName <: symbol
.type ByteOffset <: number
.type SourceText <: symbol

.type FlowMod = symbol
.type FlowKind = symbol
.type FlowSubKind = symbol
.type FlowTarget = Gid

.decl child_of(
    fid:Fid, child:Nid, index:number, field:FieldName, parent:Nid
)
.input child_of(
    IO=file,
    filename="child_of.csv.gz",
    delimiter="\t"
)

.decl node_info(
    fid:Fid, nid:Nid, gid:Gid,
    type:TypeName, field:FieldName, tid: Tid,
    sb:ByteOffset, eb:ByteOffset
)
.input node_info(
    IO=file,
    filename="node_info.csv.gz",
    delimiter="\t"
)

.decl debug_text(gid:Gid, sl:number, sc:number, el:number, ec:number, text:SourceText)
.input debug_text(
    IO=file,
    filename="debug_text.csv.gz",
    delimiter="\t"
)

.decl file_info(fid:Fid, path:symbol)
.input file_info(
    IO=file,
    filename="file_info.csv.gz",
    delimiter="\t"
)

.decl dflow(
    from: Gid,
    from_mod: FlowMod,
    to: Gid,
    to_mod: FlowMod,
    edge_kind: FlowKind,
    edge_sub: FlowSubKind,
    edge_target: FlowTarget
)
.input dflow(
    IO=file,
    filename="dflow.csv.gz",
    delimiter="\t"
)

.decl flow(
    from: Gid,
    from_mod: FlowMod,
    to: Gid,
    to_mod: FlowMod,
    edge_kind: FlowKind,
    edge_sub: FlowSubKind,
    edge_target: FlowTarget
)
.input flow(
    IO=file,
    filename="flow.csv.gz",
    delimiter="\t"
)

.decl encloses(parent:Gid, child:Gid)
.input encloses(
    IO=file,
    filename="encloses.csv.gz",
    delimiter="\t"
)

.decl node_type(gid:Gid, type:TypeName)
.input node_type(
    IO=file,
    filename="node_type.csv.gz",
    delimiter="\t"
)

.decl name_of_def(def_gid:Gid, name:symbol)
.input name_of_def(
    IO=file,
    filename="name_of_def.csv.gz",
    delimiter="\t"
)

.decl name_of_ref(ref_gid:Gid, name:symbol)
.input name_of_ref(
    IO=file,
    filename="name_of_ref.csv.gz",
    delimiter="\t"
)


.decl submodule_import(mod_gid:Gid, the_def:Gid, mod_name:symbol, sub_name:symbol, alias:symbol)
.input submodule_import(
  IO=file,
  filename="submodule_import.csv.gz",
  delimiter="\t"
)

.decl from_import(mod_gid:Gid, the_def:Gid, mod_name:symbol, imported:symbol, alias:symbol)
.input from_import(
  IO=file,
  filename="from_import.csv.gz",
  delimiter="\t"
)


.decl dataflow(from:Gid, to:Gid)

dataflow(from, to) :- 
    dflow(to, "entry", to, "exit", "use", _, from)
;
    node_info(fid, fnid, from, _, _, _, _, _),
    node_info(fid, tnid, to, _, _, _, _, _),
    child_of(fid, fnid, _, "right", anid),
    child_of(fid, tnid, _, "left", anid),
    node_info(fid, anid, _, "assignment", _, _, _, _)
;
    node_info(fid, arg_nid, from, _, _, _, _, _),
    child_of(fid, arg_nid, _, _, anid),
    child_of(fid, anid, _, "arguments", cnid),
    node_info(fid, cnid, to, "call", _, _, _, _)
;
    node_info(fid, fnid, from, _, _, _, _, _),
    child_of(fid, fnid, _, "function", cnid),
    node_info(fid, cnid, to, "call", _, _, _, _)
;
    node_info(fid, vnid, from, _, _, _, _, _),
    child_of(fid, vnid, _, "value", snid),
    node_info(fid, snid, to, "subscript", _, _, _, _)
;
    node_info(fid, onid, from, _, _, _, _, _),
    child_of(fid, onid, _, "object", anid),
    node_info(fid, anid, to, "attribute", _, _, _, _)
;
    node_info(fid, cnid, from, _, _, _, _, _),
    child_of(fid, cnid, _, _, bnid),
    node_info(fid, bnid, to, "binary_operator", _, _, _, _)
;
    node_info(fid, cnid, from, _, _, _, _, _),
    child_of(fid, cnid, _, _, bnid),
    node_info(fid, bnid, to, "unary_operator", _, _, _, _)
;
    node_info(fid, cnid, to, _, _, _, _, _),
    child_of(fid, cnid, _, _, pnid),
    node_info(fid, pnid, from, "pattern_list", _, _, _, _)
.

.decl tdataflow(from:Gid, to:Gid)
tdataflow(from, to) :-
    dataflow(from, to)
;
    tdataflow(from, mid), dataflow(mid, to)
.

.decl child_types(parent:Nid, type:TypeName)
child_types(parent, type) :-
  child_of(fid, x, _, _, parent),
  node_info(fid, x, _, type, _, _, _, _)
.

.decl child_types_count(parent:Nid, c:number)
child_types_count(parent, c) :-
  child_types(parent, _),
  c = count : { child_types(parent, _) }
.
 